[{"intent": "mglearn.discrete_scatter(X_train[:, 0], X_train[:, 1], y_train)\u306e\u610f\u5473\u306b\u3064\u3044\u3066", "snippet": "arr[:, 0]", "question_id": 37146, "rewritten_intent": "2\u6b21\u5143\u914d\u5217`arr`\u306e\u8981\u7d20\u3068\u306a\u3063\u3066\u3044\u308b1\u6b21\u5143\u914d\u5217\u304b\u3089\u5148\u982d\u306e\u5024\u306e\u307f\u3092\u629c\u304d\u51fa\u3059"}, {"intent": "python\u306ePandas\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u3001\u6240\u5b9a\u306e\u8f9e\u66f8\u578b\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002", "snippet": "df.to_dict()", "question_id": 25263, "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b"}, {"intent": "beautifulsoup\u3092\u7528\u3044\u3066\u3001\u898f\u5247\u6027\u306e\u3042\u308b20\u884c24\u5217\u306e\u7af6\u99ac\u306e\u30c7\u30fc\u30bf\u8868\u3092CSV\u306b\u66f8\u304d\u8fbc\u307f\u305f\u3044", "snippet": "soup.find('tbody').find_all('tr')", "question_id": 28178, "rewritten_intent": "HTML\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5404\u884c\u3092\u53d6\u5f97\u3059\u308b"}, {"intent": "matplotlib\u3067y\u8ef8\u306e\u7279\u5b9a\u306e\u76ee\u76db\u306e\u8272\u3092\u5909\u3048\u308b", "snippet": "labels[n].set_color('red')", "question_id": 21638, "rewritten_intent": "y\u8ef8\u306e\u7279\u5b9a\u306e\u76ee\u76db`n`\u306e\u8272\u3092\u8d64\u306b\u5909\u3048\u308b"}, {"intent": "\u95a2\u6570\u5185\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u5024\u3092\u3001\u30cd\u30b9\u30c8\u3057\u305f\u95a2\u6570\u304b\u3089\u5909\u66f4\u3059\u308b", "rewritten_intent": "\u30cd\u30b9\u30c8\u3057\u305f\u95a2\u6570\u304b\u3089\u5916\u306e\u95a2\u6570\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u5909\u6570`a`\u3092\u53c2\u7167\u30fb\u5909\u66f4\u3059\u308b", "snippet": "nonlocal a", "question_id": 34517}, {"intent": "POST\u3067\u9001\u3063\u305f\u30c7\u30fc\u30bf\u3092python\u306ecgi.FieldStrage\u3067\u53d7\u3051\u53d6\u308c\u306a\u3044", "snippet": "class handler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        os.environ['REQUEST_METHOD'] = 'POST'\n        form = cgi.FieldStorage(self.rfile, self.headers)", "question_id": 8656, "rewritten_intent": "POST\u30c7\u30fc\u30bf\u3092cgi.FieldStrage\u3067\u53d7\u3051\u53d6\u308b"}, {"intent": "\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u4e00\u3064\u306e\u8981\u7d20\u3092\u9078\u629e\u3057\u305f\u3044\u5834\u5408\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff08python\uff09", "snippet": "random.choice(li)", "question_id": 9836, "rewritten_intent": "\u30ea\u30b9\u30c8`li`\u306e\u4e2d\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u4e00\u3064\u306e\u8981\u7d20\u3092\u9078\u629e\u3059\u308b"}, {"intent": "word2vec\u3067\u30c6\u30ad\u30b9\u30c8\u30e2\u30fc\u30c9\u3067\u51fa\u529b\u3057\u305f\u7d50\u679c\u3092\u3001binary\u30e2\u30fc\u30c9\u3067\u306e\u51fa\u529b\u7d50\u679c\u306bPython\u3067\u5909\u63db\u3057\u305f\u3044", "snippet": "X = np.array(d, dtype='float32')\nX.tofile('binaryVec.bin')", "question_id": 1589, "rewritten_intent": "\u8981\u7d20\u304c\u6570\u5024\u306e\u30ea\u30b9\u30c8\u578b\u30c7\u30fc\u30bf`d`\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf`binaryVrc.bin`\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b"}, {"intent": "python\u3067XML\u3092\u64cd\u4f5c\u3067\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3068\u6587\u5b57\u5316\u3051", "snippet": "doc.toxml(encoding='sjis'))", "question_id": 16807, "rewritten_intent": "xml\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8'doc'\u3092\u6587\u5b57\u30b3\u30fc\u30c9`sjis`\u3067\u30d1\u30fc\u30b9\u3059\u308b"}, {"intent": "jupyter notebook\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u3068\u8aad\u307f\u8fbc\u307f\u306f\u9023\u7d9a\u3067\u884c\u3048\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f", "rewritten_intent": "\u958b\u3044\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb'f'\u3092\u9589\u3058\u308b", "snippet": "f.close()", "question_id": 38532}, {"intent": "multipart\u306erequests\u306b\u3064\u3044\u3066\u306a\u306e\u3067\u3059", "snippet": "requests.post(url, files=files, data=data)", "question_id": 37696, "rewritten_intent": "multipart\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u8907\u6570\u306e\u30c7\u30fc\u30bf`files`, `data`\u3092`url'\u306bPOST\u3059\u308b"}, {"intent": "Scikit-learn\u3067\u30af\u30e9\u30b9\u6570\u3092\u8003\u616e\u3057\u3066\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3057\u305f\u3044", "snippet": "sss = StratifiedShuffleSplit()\nsss.get_n_splits(X, y)", "question_id": 29368, "rewritten_intent": "\u30af\u30e9\u30b9\u6570\u306e\u6bd4\u7387\u3092\u4fdd\u3063\u305f\u307e\u307e\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b"}, {"intent": "matplotlib\u3092\u7528\u3044\u305f\u969b\u306b\u8ef8\u306e\u6570\u5b57\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u554f\u984c\u306b\u3064\u3044\u3066", "snippet": "plt.yticks(range(low,high))", "question_id": 40699, "rewritten_intent": "y\u8ef8\u306e\u30d7\u30ed\u30c3\u30c8\u306e\u7bc4\u56f2\u3092\u4e0b\u9650`low`\u3001\u4e0a\u9650`high`\u306b\u8a2d\u5b9a\u3059\u308b"}, {"intent": "matplotlib\u306e3D\u30b0\u30e9\u30d5\u4e0a\u306e\u5ea7\u6a19\u3092\u5f97\u308b", "snippet": "fig.canvas.mpl_connect('pick_event', onclick)", "question_id": 11011, "rewritten_intent": "\u30b0\u30e9\u30d5\u4e0a\u3067\u9078\u629e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u5ea7\u6a19\u3092\u8868\u793a\u3059\u308b"}, {"intent": "\u30ea\u30b9\u30c8\u304b\u3089\u65e5\u672c\u8a9e\u4ee5\u5916\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u305f\u3044", "snippet": "re.compile('[\u3041-\u3093\u30a1-\u30f3\u4e00-\u9fa5]+')", "question_id": 42344, "rewritten_intent": "\u65e5\u672c\u8a9e\uff08\u3072\u3089\u304c\u306a\u3001\u30ab\u30bf\u30ab\u30ca\u3001\u6f22\u5b57\uff09\u306e\u5224\u5225\u3092\u3059\u308b\u6b63\u898f\u8868\u73fe\u3092\u5f97\u308b"}, {"intent": "\u300c\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u300d\u3092\u81ea\u52d5\u5316", "snippet": "br.submit().read()", "question_id": 17145, "rewritten_intent": "\u30d6\u30e9\u30a6\u30b6\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`br`\u304b\u3089submit\u3057\u305f\u969b\u306e\u8fd4\u308a\u5024\u3092\u8aad\u307f\u3053\u3080"}, {"intent": "python3 \u30bf\u30d7\u30eb\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u51fa\u529b\u3057\u305f\u3044", "rewritten_intent": "\u30bf\u30d7\u30eb`data`\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u8868\u793a\u3059\u308b", "snippet": "[print(*i) for i in data]", "question_id": 38824}, {"intent": "python3 \u30bf\u30d7\u30eb\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u51fa\u529b\u3057\u305f\u3044", "rewritten_intent": "\u30bf\u30d7\u30eb`data`\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u8868\u793a\u3059\u308b", "snippet": "for i in data:\n     print(' '.join(str(j) for j in i))", "question_id": 38824}, {"intent": "python3 \u30bf\u30d7\u30eb\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u51fa\u529b\u3057\u305f\u3044", "rewritten_intent": "\u30bf\u30d7\u30eb`data`\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u8868\u793a\u3059\u308b", "snippet": "for i in data:\n     print(' '.join(map(str, i)))", "question_id": 38824}, {"intent": "Tensorflow\u3067\u30c6\u30f3\u30bd\u30eb\u306e\u8981\u7d20\u306e\u3046\u30610\u4ee5\u4e0a\u306e\u3082\u306e\u306e\u548c\u3092\u8a08\u7b97\u3057\u305f\u3044", "rewritten_intent": "`n`\u00d7`n`\u306e\u30c6\u30f3\u30bd\u30eb\u306e\u8981\u7d20\u306e\u3046\u30610\u4ee5\u4e0a\u306e\u5024\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b", "snippet": "z = tf.constant(0, shape=[n, n], dtype=tf.int32)\nabs = tf.maximum(t, z)\nresult = tf.reduce_sum(abs)", "question_id": 35299}, {"intent": "pyqt5 \u3067\u30b5\u30d6\u30a6\u30a3\u30f3\u30c9\u30a6\u3060\u3051\u3092\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u4f5c\u308a\u305f\u3044", "snippet": "button.clicked.connect(self.w.close)", "question_id": 40370, "rewritten_intent": "\u30dc\u30bf\u30f3`button`\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u969b\u306b\u3001\u8a72\u5f53\u3059\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u3060\u3051\u3092\u9589\u3058\u308b"}, {"intent": "Flask\u3067\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30c7\u30fc\u30bf\u3001request.data \u304c\u7a7a\u306b\u306a\u3063\u3066\u3057\u307e\u3046", "snippet": "hashlib.sha1(f.read()).hexdigest()", "question_id": 27830, "rewritten_intent": "\u30d5\u30a1\u30a4\u30eb`f`\u306esha1\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6c42\u3081\u308b"}, {"intent": "python3\uff0bSQlite\u3000\u3067PDF\u30c7\u30fc\u30bf\u3092INSERT\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u304b", "snippet": "db.execute('insert into img_table values(?)', [blob])", "question_id": 41677, "rewritten_intent": "\u753b\u50cf\u30c7\u30fc\u30bf\u3092`blob`\u3092DB\u5185\u306e`img_table`\u306b\u633f\u5165\u3059\u308b"}, {"intent": "Django\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u306b\u3064\u3044\u3066", "snippet": "print(settings.DATABASES)\n", "question_id": 33970, "rewritten_intent": "\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u8a2d\u5b9a\u3092\u8868\u793a\u3059\u308b"}, {"intent": "dataframe\u306b\u542b\u307e\u308c\u308b\u3001\u6587\u5b57\u5217\u4e2d\u306e\u6570\u5b57\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044", "snippet": "df.x.str.extract(pat)", "question_id": 38328, "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217\u30e9\u30d9\u30eb`x`\u306e\u5404\u884c\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6b63\u898f\u8868\u73fe`pat`\u3092\u9069\u7528\u3059\u308b"}, {"intent": "CSV\u3078\u306e\u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u6559\u3048\u3066\u4e0b\u3055\u3044", "rewritten_intent": "\u30d5\u30a1\u30a4\u30eb`file`\u3092\u4e0a\u66f8\u304d\u30e2\u30fc\u30c9\u3067\u958b\u304f", "snippet": "open(file, 'w')", "question_id": 37418}, {"intent": "matplotlib\u306b\u304a\u3051\u308b\u30b0\u30e9\u30d5\u306e\u59cb\u70b9\u306e\u6307\u5b9a", "snippet": "plt.plot(x_list, y_list)", "question_id": 41200, "rewritten_intent": "\u30c7\u30fc\u30bf`x_list`\u3001`y_list`\u304b\u3089\u306a\u308b\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u6307\u5b9a\u3059\u308b"}, {"intent": "pyqt5\u3067\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044", "snippet": "btn.setEnabled(False)", "question_id": 43255, "rewritten_intent": "\u30dc\u30bf\u30f3'btn'\u3092\u62bc\u305b\u306a\u3044\u3088\u3046\u306b\u3059\u308b"}, {"intent": "pandas series\u306e\u884c\u65b9\u5411\u3078\u306e\u7d50\u5408\u306b\u3064\u3044\u3066", "snippet": "pd.DataFrame([a, b])", "question_id": 43369, "rewritten_intent": "2\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`a`\u3068`b`\u3092\u884c\u65b9\u5411\u306b\u7d50\u5408\u3059\u308b"}, {"intent": "Python simplejson\u3067unicode\u306ejson\u3092\u6271\u3046('ascii' codec can't encode characters in position 0-1: ordinal not in range(128))", "snippet": "f = codecs.open(file, 'r', 'utf-8')", "question_id": 24438, "rewritten_intent": "\u6587\u5b57\u30b3\u30fc\u30c9\u3092utf-8\u306b\u6307\u5b9a\u3057\u3066\u30d5\u30a1\u30a4\u30eb`file`\u3092\u958b\u304f"}, {"intent": "\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u306e\u969b\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u304c\u52dd\u624b\u306b\u5909\u308f\u308b\uff1f", "rewritten_intent": "\u30d5\u30a1\u30a4\u30eb`file`\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u958b\u304f", "snippet": "with open(file, 'rb') as f:\n    data = f.read()", "question_id": 10215}, {"intent": "\u30cd\u30b9\u30c8\u3055\u308c\u3066\u3044\u308blist\u306e\u5185\u5bb9\u3092\u898b\u3084\u3059\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u304b\u3002", "snippet": "pprint.pprint(li)", "question_id": 28982, "rewritten_intent": "\u30cd\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u30ea\u30b9\u30c8`li`\u3092\u898b\u3084\u3059\u304f\u8868\u793a\u3059\u308b"}, {"intent": "python pickle\u306e\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9 (\u30d0\u30a4\u30ca\u30ea\u30e2\u30fc\u30c9\u306e\u5fc5\u7136\u6027)", "snippet": "pickle.dump(x, open('hoge.pkl', 'wb'))", "question_id": 18992, "rewritten_intent": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`x`\u3092\u30d5\u30a1\u30a4\u30eb`hoge.pkl`\u306b\u4fdd\u5b58\u3059\u308b"}, {"intent": "Pandas \u6587\u5b57\u5217\u306e\u7f6e\u63db", "snippet": "df.replace(change_dict)", "question_id": 38400, "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u8907\u6570\u306e\u7570\u306a\u308b\u8981\u7d20\u3092\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`change_dict`\u306e\u30ad\u30fc\u3068\u8981\u7d20\u306e\u30da\u30a2\u306b\u5f93\u3063\u3066\u7f6e\u304d\u63db\u3048\u308b"}, {"intent": "Django\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5916\u90e8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u5165\u308c\u305f\u3044", "snippet": "b.save()", "question_id": 17321, "rewritten_intent": "DB\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`a`\u3092\u633f\u5165\u3082\u3057\u304f\u306f\u66f4\u65b0\u3057\u3066\u4fdd\u5b58\u3059\u308b"}, {"intent": "pandas\u3067csv\u3092\u307e\u3068\u3081\u3066\u53d6\u308a\u8fbc\u307f\u305f\u3044", "rewritten_intent": "\u9023\u756a\u306b\u306a\u3063\u3066\u3044\u308b100\u500b\u306eCSV\u30d5\u30a1\u30a4\u30eb'file_%d'\u3092\u30ea\u30b9\u30c8\u306b\u53d6\u308a\u8fbc\u3080", "snippet": "data = []\ni = 0\nwhile(i<100):\n    data.append(pd.read_csv('file_%d.csv'%i))\n    i+=1", "question_id": 35793}, {"intent": "sklearn\u306eTfidfVectorizer\u306b\u3064\u3044\u3066", "snippet": "numpy.save('my_vector', vectorized.toarray()", "question_id": 20549, "rewritten_intent": "\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30d9\u30af\u30c8\u30eb`vectorized`\u3092\u30d5\u30a1\u30a4\u30eb'my_vector.npy`\u306b\u4fdd\u5b58\u3059\u308b"}, {"intent": "Python\uff1a\u30a4\u30c6\u30ec\u30fc\u30bf\u30af\u30e9\u30b9\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3057\u305f\u3044", "rewritten_intent": "\u30ea\u30b9\u30c8'li'\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u8981\u7d20\u306b\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3092\u884c\u3063\u3066\u8868\u793a\u3059\u308b", "snippet": "for i, name in enumerate(li):\n    print(i, name)", "question_id": 9518}, {"intent": "Python\u3067PDF\u3067\u306e\u65e5\u672c\u8a9e\u8868\u793a\u306b\u3064\u3044\u3066", "rewritten_intent": "HTML\u30d5\u30a1\u30a4\u30eb'test.html'\u3092\u958b\u304d\u3001\u30c6\u30ad\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8'text'\u3092utf-8\u3067\u4fdd\u5b58\u3059\u308b", "snippet": "f = open('test.html', 'w')\nf.write(text.encode('utf-8'))", "question_id": 19144}, {"intent": "Python\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u968e\u5c64\u3088\u308a\u4e0a\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092import\u3057\u305f\u3044\u3002", "snippet": "path = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0]\nsys.path.append(path)", "question_id": 39740, "rewritten_intent": "\u5b9f\u884c\u30d7\u30ed\u30b0\u30e9\u30e0\u3088\u308a\u4e0a\u306e\u968e\u5c64\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092import\u3059\u308b\u305f\u3081\u3001Python\u306ePath\u3078\u8a72\u5f53Path\u3092\u8ffd\u52a0\u3059\u308b"}, {"intent": "Numpy\u306e\u914d\u5217\u306b\u3001Excel\u306e\u3088\u3046\u306asumif, countif\u95a2\u6570\u306f\u306a\u3044\u306e\u3067\u3059\u304b\uff1f", "snippet": "print(arr[arr > n].sum())\nprint(numpy.sum(arr > n))", "question_id": 38760, "rewritten_intent": "numpy\u914d\u5217`arr`\u306b\u5bfe\u3057\u3066\u6570\u5024`n`\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u306e\u5408\u8a08\u53ca\u3073\u500b\u6570\u3092\u6c42\u3081\u3066\u8868\u793a\u3059\u308b"}, {"intent": "\u30eb\u30fc\u30d7\u3067\u4e8c\u6b21\u5143\u914d\u5217\u4f5c\u6210", "rewritten_intent": "\u30a4\u30c6\u30e9\u30d6\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`data`\u306e\u8981\u7d20\u304b\u3089\u6587\u5b57\u5217`area_code`\u3068`prefecture`\u3092\u63a2\u3057\u3001\u305d\u308c\u305e\u308c\u30ad\u30fc\u3068\u8981\u7d20\u306b\u6301\u3064\u8f9e\u66f8`results`\u3092\u4f5c\u308b", "snippet": "results = {}\nfor item in data:\n    results[item.find('areacode').text] = item.find('prefecture').text", "question_id": 35102}, {"intent": "List\u304b\u3089np.array\u306b\u3088\u308b\u5909\u63db\u306b\u3064\u3044\u3066", "snippet": "np.stack(arr_list)", "question_id": 41440, "rewritten_intent": "\u8981\u7d20\u304cNumPy\u914d\u5217\u306e\u30ea\u30b9\u30c8`arr_list`\u30922\u6b21\u5143\u306eNumPy\u914d\u5217\u306b\u5909\u63db\u3059\u308b"}, {"intent": "Python3\u3068Beautifulsoup4\u3092\u4f7f\u3063\u305fHTML\u306e\u30d1\u30fc\u30b9\u306b\u3064\u3044\u3066", "snippet": "soup.find_all('p')", "question_id": 35741, "rewritten_intent": "HTML\u3092\u30d1\u30fc\u30b9\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`soup`\u304b\u3089\u30bf\u30b0`p`\u3092\u3059\u3079\u3066\u898b\u3064\u3051\u308b"}, {"intent": "Python\u3067CSV\u30c7\u30fc\u30bf\u306e\u6574\u7406", "snippet": "df.groupby([c_lable]).last()", "question_id": 40444, "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217`c_label`\u3092Groupby\u3067\u307e\u3068\u3081\u305f\u30c7\u30fc\u30bf\u306e\u6700\u5f8c\u306e\u884c\u3092\u53d6\u308a\u51fa\u3059"}, {"intent": "Python list\u304b\u3089list\u306e\u5024\u306e\u62bd\u51fa", "rewritten_intent": "\u30ea\u30b9\u30c8`a_list`\u306e\u8981\u7d20\u306e\u4e2d\u306e\u30ea\u30b9\u30c8`b_list`\u306e\u8981\u7d20\u3068\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u8868\u793a\u3059\u308b", "snippet": "print([i for i in b_list if i in a_list])", "question_id": 39240}, {"intent": "\u82f1\u540d\u306e\u6708\u3092\u542b\u3080\u65e5\u4ed8\u306e\u6587\u5b57\u5217\u5909\u63db\u306b\u3064\u3044\u3066", "snippet": "datetime.strptime(dt_s,'%d%b%Y')", "question_id": 39375, "rewritten_intent": "\u82f1\u540d\u306e\u6708\u3092\u542b\u3080\u65e5\u4ed8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8'%d%b%Y'\u306e\u6587\u5b57\u5217`dt_s`\u3092datetime\u578b\u306b\u5909\u63db\u3059\u308b"}, {"intent": "python-pptx\u3067\u30b9\u30e9\u30a4\u30c9\u306e\u30b5\u30a4\u30ba\u3092\u5909\u3048\u305f\u3044", "snippet": "ppt.slide_width = X\nppt.slide_height = Y", "question_id": 37638, "rewritten_intent": "\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`ppt`\u306e\u30b5\u30a4\u30ba\u3092\u3001\u6a2a\u5e45`X`\u3068\u7e26\u5e45`Y`\u306b\u3001English Metric Unit\u3067\u6307\u5b9a\u3057\u3066\u5909\u3048\u308b"}, {"intent": "Python3\u306b\u304a\u3051\u308b\u6570\u5024\u306e\u5206\u5272", "rewritten_intent": "\u6570\u5024`n`\u3092\u5206\u5272\u3057\u3066\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3059\u308b", "snippet": "li = [int(c) for c in n]", "question_id": 38960}, {"intent": "python selenium\u3067javascript\u3092\u7121\u52b9\u306b\u3059\u308b", "rewritten_intent": "seleniumt\u3067Firefox\u4ed5\u69d8\u6642\u306bjavascript\u3092\u7121\u52b9\u306b\u3059\u308b", "snippet": "options = Options()\noptions.set_preference('javascript.enabled', False)\ndriver = webdriver.Firefox(options=options", "question_id": 33908}, {"intent": "python selenium\u3067javascript\u3092\u7121\u52b9\u306b\u3059\u308b", "rewritten_intent": "seleniumt\u3067Firefox\u4ed5\u69d8\u6642\u306bjavascript\u3092\u7121\u52b9\u306b\u3059\u308b", "snippet": "profile = webdriver.FirefoxProfile()\nprofile.DEFAULT_PREFERENCES['frozen']['javascript.enabled'] = False\nprofile.set_preference(\"app.update.auto\", False)\nprofile.set_preference(\"app.update.enabled\", False)\nprofile.update_preferences()", "question_id": 33908}, {"intent": "python selenium\u3067javascript\u3092\u7121\u52b9\u306b\u3059\u308b", "rewritten_intent": "seleniumt\u3067Firefox\u4ed5\u69d8\u6642\u306bjavascript\u3092\u7121\u52b9\u306b\u3059\u308b", "snippet": "profile = webdriver.FirefoxProfile()\nprofile.set_preference(\"javascript.enabled\", False)\ndriver = webdriver.Firefox(profile)", "question_id": 33908}, {"intent": "isnumeric() \u306b\u3064\u3044\u3066", "rewritten_intent": "\u6587\u5b57\u5217`s`\u304c\u6570\u3092\u8868\u3059\u6587\u5b57\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b", "snippet": "s.isnumeric()", "question_id": 19770}, {"intent": "PySocks\u3092\u7528\u3044\u3066\u3001Tor\u7d4c\u7531\u3067\u306eWeb\u30b9\u30af\u30ec\u30a4\u30d3\u30f3\u30b0", "snippet": "original_socket = socket.socket", "question_id": 29614, "rewritten_intent": "\u30bd\u30b1\u30c3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b"}, {"intent": "\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u6700\u5f8c\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97", "snippet": "os.listdir(dir)", "question_id": 41032, "rewritten_intent": "\u30c7\u30a3\u30ec\u30af\u30c8\u30ea`dir`\u5185\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b"}, {"intent": "files = os.listdir('./data/' + d)\u3067\u306e\u30a8\u30e9\u30fc\u306b\u3064\u3044\u3066", "rewritten_intent": "\u753b\u50cf`img`\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b", "snippet": "img is None", "question_id": 37709}, {"intent": "cupy\u3067\u51e6\u7406\u4e2d\u306e\u914d\u5217\u306e\u7d50\u5408\u306b\u3064\u3044\u3066", "snippet": "cupy.concatenate((a_1,a_2),axis=0)", "question_id": 39516, "rewritten_intent": "\u914d\u5217`a_1`\u3068`a_2`\u3092\u7d50\u5408\u3059\u308b"}, {"intent": "python\u304b\u3089twitter\u3092\u4f7f\u3063\u3066\u3001\u4e2d\u56fd\u8a9e\u306e\u30c4\u30a4\u30fc\u30c8\u3092\u53d6\u5f97\u3057\u305f\u3044", "snippet": "stream.filter(track=[u'\u4e2d\u56fd', ], languages=['zh'])", "question_id": 29331, "rewritten_intent": "\u30b9\u30c8\u30ea\u30fc\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`stream`\u304b\u3089\u8a00\u8a9e\u304c\u4e2d\u56fd\u8a9e\u306e\u30c4\u30a4\u30fc\u30c8\u306e\u307f\u3092\u629c\u304d\u51fa\u3059"}, {"intent": "tensorflow\u3067class\u3068saver.save\u304c\u4e00\u7dd2\u306b\u4f7f\u3048\u306a\u3044\u3002", "rewritten_intent": "\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9`cnn`\u306b\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb`mode.ckpt`\u3092\u8aad\u307f\u8fbc\u3080", "snippet": "cnn.saver.restore(cnn.sess, 'model.ckpt')", "question_id": 35881}, {"intent": "sympy\u306ecoeff\u306e\u4f7f\u3044\u65b9\u3092\u6559\u3048\u3066\u4e0b\u3055\u3044", "rewritten_intent": "`x`\u306b\u95a2\u3059\u308b\u591a\u9805\u5f0f`f`\u306e\u5404\u6b21\u6570\u306e\u4fc2\u6570\u3092\u6c42\u3081\u3066\u30ea\u30b9\u30c8\u306b\u3059\u308b", "snippet": "p = Poly(f, x)\np.coeffs()", "question_id": 33677}, {"intent": "\"if 1 & 5\" \u304c\u306a\u305cTrue\u306a\u306e\u304b\uff1f", "snippet": "a & b", "question_id": 37449, "rewritten_intent": "\u5909\u6570`a`\u3068`b`\u306e\u30d3\u30c3\u30c8\u6f14\u7b97"}, {"intent": "globals()\u30e1\u30bd\u30c3\u30c9\u306f\u4f55\u306e\u70ba\u306b\u4f7f\u3046\u3082\u306e\u306a\u306e\u304b", "rewritten_intent": "\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306e\u4e00\u89a7\u3092\u5f97\u308b", "snippet": "globals()", "question_id": 42442}, {"intent": "Python\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3059\u308b\u6642\u3001\u8907\u6570\u884c\uff08\u5165\u529b\u306e\u7d42\u4e86\u307e\u3067\uff09\u3067\u306a\u304a\u304b\u3064\u4e00\u884c\u306b\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3059\u308b\u6642\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f", "rewritten_intent": "\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5165\u529b`stdin`\u3092\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u8868\u793a\u3059\u308b", "snippet": "for line in stdin:\n    a = line.rstrip().split(' ')\n    print(a)", "question_id": 40830}, {"intent": "Python\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3059\u308b\u6642\u3001\u8907\u6570\u884c\uff08\u5165\u529b\u306e\u7d42\u4e86\u307e\u3067\uff09\u3067\u306a\u304a\u304b\u3064\u4e00\u884c\u306b\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3059\u308b\u6642\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f", "rewritten_intent": "\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5165\u529b`stdin`\u3092\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u8868\u793a\u3059\u308b", "snippet": "l = []\nfor line in stdin:\n  a = line.rstrip().split(' ')\n  l.append(a)\nprint(l)", "question_id": 40830}, {"intent": "Python\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6587\u7ae0\u3092\u53d6\u308a\u8fbc\u307f\u3001\u691c\u7d22\u3057\u305f\u5358\u8a9e\u304c\u3069\u306e\u6587\u306b\u542b\u307e\u308c\u3066\u3044\u3066\u4f55\u56de\u51fa\u3066\u304f\u308b\u304b\u691c\u7d22\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u306e\u3067\u3059\u3002\u6587\u3054\u3068\u306b\u30ea\u30b9\u30c8\u3092\u4f5c\u88fd\u3057\u3066\u305d\u3053\u304b\u3089\u691c\u7d22\u3059\u308b\u969b\u306bfor\u306a\u3069\u3092\u7528\u3044\u3066\u6587\u3054\u3068\u306b\u30ea\u30b9\u30c8\u3092\u4f5c\u88fd\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002", "snippet": "Counter(word_list)", "question_id": 38030, "rewritten_intent": "\u30ea\u30b9\u30c8`word_list'\u5185\u306b\u51fa\u73fe\u3059\u308b\u5358\u8a9e\u3092\u6570\u3048\u308b"}, {"intent": "Tweepy\u3092\u4f7f\u3063\u3066\u3001\u3042\u308b\u6587\u5b57\u5217\u3092\u542b\u3093\u3060\u30c4\u30a4\u30fc\u30c8\u3092\u4e00\u5b9a\u9593\u9694\u3067\u7fd2\u5f97\u3057\u3001\u305d\u306e\u30c4\u30a4\u30fc\u30c8\u306b\u542b\u307e\u308c\u308b\u6587\u7ae0\u3092\u30c4\u30a4\u30fc\u30c8\u3059\u308b", "snippet": "search = api.search(q=word)", "question_id": 38878, "rewritten_intent": "tweepy\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9`api`\u3092\u4f7f\u3044\u3001\u6587\u5b57\u5217`word`\u3092\u542b\u3093\u3060\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22\u3057\u3001\u7d50\u679c\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5f97\u308b"}, {"intent": "python \u3067 lambda \u3092\u4f7f\u3044\u300c\u95a2\u6570\u3092\u53d7\u3051\u53d6\u3063\u3066\u95a2\u6570\u3092\u8fd4\u3059\u300d\u95a2\u6570\u304c\u4f5c\u308a\u305f\u3044", "rewritten_intent": "\u95a2\u6570`f`\u3068`g`\u3092\u53d7\u3051\u53d6\u3063\u3066\u95a2\u6570\u540c\u58eb\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570`add_functions`\u3092\u5b9a\u7fa9\u3059\u308b", "snippet": "def add_functions(f, g):\n    return lambda x: f(x) + g(x)", "question_id": 38724}, {"intent": "python \u3067\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53d6\u5f97\u3067\u304d\u308b\u304b\uff1f", "rewritten_intent": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`obj`\u306e\u30af\u30e9\u30b9\u3092\u5f97\u308b", "snippet": "type(obj)", "question_id": 22439}, {"intent": "python \u3067\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53d6\u5f97\u3067\u304d\u308b\u304b\uff1f", "rewritten_intent": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`obj`\u306e\u30af\u30e9\u30b9\u3092\u5f97\u308b", "snippet": "obj.__class__", "question_id": 22439}, {"intent": "\u6307\u5b9a\u3057\u305fURL\u306e\u5185\u5bb9\u3092\u8868\u793a\u3057\u305f\u3044", "snippet": "with urllib.request.urlopen(url) as r:\n    print(r.read())", "question_id": 39340, "rewritten_intent": "\u6307\u5b9a\u3057\u305fURL`url`\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b"}, {"intent": "Python2.7\u3000Opencv3.0\u3000\u7279\u5fb4\u70b9\u691c\u51fa\u306b\u3066", "snippet": "cv2.drawKeypoints(img, kp, img2, color=(0,255,0), flags=0)", "question_id": 17418, "rewritten_intent": "\u5165\u529b\u753b\u50cf\u3092`img`\u3001\u51fa\u529b\u753b\u50cf\u3092`img2`\u3068\u3057\u3066\u7279\u5fb4\u70b9`kp`\u3092\u63cf\u753b\u3059\u308b"}, {"intent": "os.walk()\u3001shutilcopy()\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b", "snippet": "os.path.join(foldername, filename)", "question_id": 39589, "rewritten_intent": "\u30d5\u30a9\u30eb\u30c0\u540d`foldername'\u3068\u30d5\u30a1\u30a4\u30eb\u540d`filename`\u3092\u7d50\u5408\u3057\u305f\u30d1\u30b9\u3092\u5f97\u308b"}, {"intent": "python pandas \u3067\u306e\u30c7\u30fc\u30bf\u51e6\u7406\u306b\u3064\u3044\u3066", "snippet": "ax.set_xlim(l, h)", "question_id": 23577, "rewritten_intent": "X\u8ef8\u306e\u7bc4\u56f2\u3092\u4e0b\u9650`l`\u3068\u4e0a\u9650`h`\u306b\u6307\u5b9a\u3059\u308b"}, {"intent": "Python\u306b\u65bc\u3051\u308b\u6574\u6570\u306e\u5207\u308a\u4e0a\u3052\u3068\u5207\u308a\u6368\u3066\u306b\u3064\u3044\u3066", "snippet": "int(math.ceil(src/float(range)) * range)", "question_id": 41087, "rewritten_intent": "\u6574\u6570`src`\u3092\u7279\u5b9a\u306e\u7bc4\u56f2`range`\u306e\u500d\u6570\u3067\u5207\u308a\u4e0a\u3052\u308b"}, {"intent": "Python\u306b\u65bc\u3051\u308b\u6574\u6570\u306e\u5207\u308a\u4e0a\u3052\u3068\u5207\u308a\u6368\u3066\u306b\u3064\u3044\u3066", "snippet": "src if src % range == 0 else src + range - src % range", "question_id": 41087, "rewritten_intent": "\u6574\u6570`src`\u3092\u7279\u5b9a\u306e\u7bc4\u56f2`range`\u306e\u500d\u6570\u3067\u5207\u308a\u4e0a\u3052\u308b"}, {"intent": "Numpy\u3067\u3001\u8981\u7d20\u6570\u306e\u7dcf\u548c\u304cN\u3068\u306a\u308b\u5236\u7d04\u306e\u4e0b\u3001n\u6b21\u5143\u306e\u30e9\u30f3\u30c0\u30e0\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\u3057\u305f\u3044\u3002", "snippet": "random_numbers = np.random.rand(n)\nanswer = N * random_numbers / np.sum(random_numbers)", "question_id": 40711, "rewritten_intent": "\u8981\u7d20\u6570\u306e\u7dcf\u548c\u304c`N`\u3068\u306a\u308b\u5236\u7d04\u306e\u4e0b\u3001`n`\u6b21\u5143\u306e\u30e9\u30f3\u30c0\u30e0\u30d9\u30af\u30c8\u30eb`answer`\u3092\u751f\u6210\u3059\u308b"}, {"intent": "Numpy\u3067\u3001\u8981\u7d20\u6570\u306e\u7dcf\u548c\u304cN\u3068\u306a\u308b\u5236\u7d04\u306e\u4e0b\u3001n\u6b21\u5143\u306e\u30e9\u30f3\u30c0\u30e0\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\u3057\u305f\u3044\u3002", "snippet": "answer = np.random.dirichlet(np.ones(n)) * N", "question_id": 40711, "rewritten_intent": "\u8981\u7d20\u6570\u306e\u7dcf\u548c\u304c`N`\u3068\u306a\u308b\u5236\u7d04\u306e\u4e0b\u3001`n`\u6b21\u5143\u306e\u30e9\u30f3\u30c0\u30e0\u30d9\u30af\u30c8\u30eb`answer`\u3092\u751f\u6210\u3059\u308b"}, {"intent": "\u30ea\u30b9\u30c8\u304b\u3089\u53d6\u308a\u51fa\u3059\u8981\u7d20\u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u7d44\u307f\u5408\u308f\u305b\u308b", "snippet": "random.shuffle(li)", "question_id": 31924, "rewritten_intent": "\u30ea\u30b9\u30c8`li`\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b"}, {"intent": "\u6587\u7ae0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7b97\u51fa\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0", "snippet": "itertools.product(a,b)", "question_id": 40343, "rewritten_intent": "\u8907\u6570\u306e\u30ea\u30b9\u30c8`a`\u3068`b`\u306e\u76f4\u7a4d\uff08\u30c7\u30ab\u30eb\u30c8\u7a4d\uff09\u3092\u751f\u6210\u3057\u3001\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u7d50\u679c\u3092\u5f97\u308b"}, {"intent": "\u5217\u30c7\u30fc\u30bf\u304b\u3089\u6b63\u898f\u8868\u73fe\u3067\u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\u3092\u3001\u65b0\u3057\u3044\u5217\u306b\u66f8\u304d\u8fbc\u3080\u306b\u306f\uff1f", "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217`a`\u3092\u6b63\u898f\u8868\u73fe`reg'\u3067\u62bd\u51fa\u3059\u308b", "snippet": "df['a'].str.extract(reg, expand=True)", "question_id": 36217}, {"intent": "for\u6587\u3067\u751f\u6210\u3057\u305f\u6587\u5b57\u5217\u3092\u30bf\u30d7\u30eb\u306b\u683c\u7d0d\u3059\u308b\u65b9\u6cd5", "snippet": "d = {f+s : cost for ((f,s), cost) in zip(product(factories,shops), costs)}", "question_id": 27871, "rewritten_intent": "2\u3064\u306e\u30ea\u30b9\u30c8`factories'\u3068`shops`\u306e\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30ad\u30fc\u3068\u3057\u3001\u30bf\u30d7\u30eb`costs`\u5404\u8981\u7d20\u3092\u8981\u7d20\u7b49\u3059\u308b\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b"}, {"intent": "for\u6587\u3067\u751f\u6210\u3057\u305f\u6587\u5b57\u5217\u3092\u30bf\u30d7\u30eb\u306b\u683c\u7d0d\u3059\u308b\u65b9\u6cd5", "snippet": "root = [''.join((x, y)) for x, y in itertools.product(factories, shops)]\nd = dict(zip(root, cost))", "question_id": 27871, "rewritten_intent": "2\u3064\u306e\u30ea\u30b9\u30c8`factories'\u3068`shops`\u306e\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30ad\u30fc\u3068\u3057\u3001\u30bf\u30d7\u30eb`costs`\u5404\u8981\u7d20\u3092\u8981\u7d20\u7b49\u3059\u308b\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b"}, {"intent": "BeautifulSoup \u3092\u7528\u3044\u305f\u3001\u7279\u5b9a\u306eli \u306e\u5185\u5bb9\u306e\u53d6\u5f97", "snippet": "sop.find_all(attrs={\"data-locate\": \"address\"})", "question_id": 40676, "rewritten_intent": "\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3068\u3057\u3066\u7528\u3044\u308b\u4e8b\u304c\u3067\u304d\u306a\u3044HTML5\u306edata-\u5c5e\u6027\u3001\u4f8b\u3048\u3070`data-locel`\u304c`address`\u306b\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`soup`\u304b\u3089\u691c\u7d22\u3059\u308b"}, {"intent": "\u30ea\u30b9\u30c8\u5185\u306e\u982d\u6587\u5b57\u3092\u7d50\u5408\u3057\u305f\u3044", "rewritten_intent": "\u6587\u5b57\u5217\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8`li`\u306e\u982d\u6587\u5b57\u3092\u7d50\u5408\u3057\u305f\u6587\u5b57\u5217`s`\u3092\u5f97\u308b", "snippet": "s = ''.join(i[0] for i in li)", "question_id": 42256}, {"intent": "\u30ea\u30b9\u30c8\u5185\u306e\u982d\u6587\u5b57\u3092\u7d50\u5408\u3057\u305f\u3044", "rewritten_intent": "\u6587\u5b57\u5217\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8`li`\u306e\u982d\u6587\u5b57\u3092\u7d50\u5408\u3057\u305f\u6587\u5b57\u5217`s`\u3092\u5f97\u308b", "snippet": "s = ''\nfor line in li:\n    s += v[0]", "question_id": 42256}, {"intent": "python\u306efor\u30eb\u30fc\u30d7\u6587\u4e2d\u3067\u30ea\u30b9\u30c8\u3092\u7528\u3044\u305f\u6761\u4ef6\u5206\u5c90\u3092\u884c\u3044\u305f\u3044", "rewritten_intent": "\u30ea\u30b9\u30c8`li`\u306e\u4e2d\u306b\u8981\u7d20`i`\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u6761\u4ef6\u5206\u5c90\u3092\u884c\u3046", "snippet": "if i not in li:", "question_id": 18967}, {"intent": "\u30c9\u30b3\u30e2API\u3092\u4f7f\u7528\u3057\u305f\u5bfe\u8a71\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30a8\u30e9\u30fc: POST data should be bytes or an iterable of bytes", "snippet": "json.dumps(req_data).encode('utf-8'))", "question_id": 37648, "rewritten_intent": "\u30b5\u30fc\u30d0\u30fc\u306b\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf`req_data`\u3092UTF-8\u3067\u7b26\u53f7\u5316\u3059\u308b"}, {"intent": "subprocess\u306echeck_call\u3067\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30b5\u30a4\u30ba\u3092\u51fa\u529b\u7d50\u679c\u3068\u3057\u3066\u4fdd\u6301\u3057\u305f\u3044", "snippet": "cmd = 'du -b /var/hoge'\nint(subprocess.check_output(cmd, shell=True).split()[0])", "question_id": 22991, "rewritten_intent": "Linux\u306edu\u30b3\u30de\u30f3\u30c9\u3092\u5229\u7528\u3057\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea`/var/hoge`\u306e\u30b5\u30a4\u30ba\u3092\u5f97\u308b"}, {"intent": "Python\u3067\u65e5\u672c\u8a9e\u9593\u306e\u7a7a\u767d\u524a\u9664", "snippet": "re.sub('([\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc])\\s+((?=[\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc]))',r'\\1\\2', str)", "question_id": 39502, "rewritten_intent": "\u6587\u5b57\u5217`str`\u5185\u306e\u3001\u65e5\u672c\u8a9e\u3067\u631f\u307e\u308c\u305f\u7a7a\u767d\u3092\u524a\u9664\u3059\u308b"}, {"intent": "python\u3067XML\u3092\u64cd\u4f5c\u3067\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3068\u6587\u5b57\u5316\u3051", "rewritten_intent": "\u6587\u5b57\u5217\u306e\u5909\u6570`s`\u3068`n`\u3092UTF-8\u306b\u5909\u63db\u3057\u3066\u7d50\u5408\u3059\u308b", "snippet": "u'{0}{1}'.format(s, n)", "question_id": 16805}, {"intent": "[1,1,1,2,2,2,3,3,3,4,4,4]\u307f\u305f\u3044\u306a\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3044", "rewritten_intent": "1\u304c`N`\u500b, 2\u304c`N`\u500b, ..., `M`\u304c`N`\u500b\u4e26\u3076\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b", "snippet": "[x+1 for x in range(M) for y in range(N)]", "question_id": 40978}, {"intent": "[1,1,1,2,2,2,3,3,3,4,4,4]\u307f\u305f\u3044\u306a\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3044", "rewritten_intent": "1\u304c`N`\u500b, 2\u304c`N`\u500b, ..., `M`\u304c`N`\u500b\u4e26\u3076\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b", "snippet": "[i // n + 1 for i in range(N * M)]", "question_id": 40978}, {"intent": "seaborn\u306edistplot\u3067\u8868\u793a\u3057\u305f\u30b0\u30e9\u30d5\u4e0a\u306e\u30d4\u30f3\u306e\u4f4d\u7f6e\u304c\u77e5\u308a\u305f\u3044", "snippet": "[h.get_height() for h in sns.distplot(x).patches]", "question_id": 39379, "rewritten_intent": "distplot\u3067\u8868\u793a\u3057\u305f\u30c7\u30fc\u30bf`x`\u306b\u95a2\u3059\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u4e0a\u306e\u30d4\u30f3\u306e\u9ad8\u3055\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5f97\u308b"}, {"intent": "matplotlib\u3067\u306e\u30b0\u30e9\u30d5\u306e\u5f62\u72b6\u306e\u5909\u3048\u65b9", "snippet": "ax=plt.subplot(aspect='equal')", "question_id": 38415, "rewritten_intent": "\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u7bc4\u56f2`ax`\u3092\u6b63\u65b9\u5f62\u306b\u3059\u308b"}, {"intent": "python\u3067\u6587\u5b57\u5217\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5909\u66f4\u3059\u308b\u65b9\u6cd5", "rewritten_intent": "\u6587\u5b57\u5217\u578b\u5909\u6570`string`\u306e\u5024\u3092\u6570\u5024\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b", "snippet": "locals()[string]", "question_id": 37757}, {"intent": "python\u3067\u6587\u5b57\u5217\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5909\u66f4\u3059\u308b\u65b9\u6cd5", "rewritten_intent": "\u6587\u5b57\u5217\u578b\u5909\u6570`string`\u306e\u5024\u3092\u6570\u5024\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b", "snippet": "eval(string)", "question_id": 37757}, {"intent": "\u8981\u7d20\u306e\u4e2d\u306e\u8981\u7d20\uff1f\u306e\u8868\u793a\u306e\u3057\u304b\u305f", "snippet": "d = json.loads(s_json)", "question_id": 34422, "rewritten_intent": "JSON\u3092\u8868\u3059\u6587\u5b57\u5217`s_json`\u304b\u3089\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`d`\u3092\u5f97\u308b"}, {"intent": "feedparser\u3067im:id\u306eattribute\u3092\u53d6\u5f97\u3057\u305f\u3044\u3067\u3059\u3002(\u30a2\u30c3\u30d7\u30eb\u306eiOS\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u30c7\u30fc\u30bf\u306eXML\u3092\u89e3\u6790\u3057\u3066\u3044\u307e\u3059\u3002)", "snippet": "soup.get('a_id')", "question_id": 27686, "rewritten_intent": "HTML\u30d1\u30fc\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`soup`\u306e\u4e2d\u3067HTML\u30bf\u30b0\u306e`a_id`\u306e\u5c5e\u6027\u5024\u3092\u53d6\u5f97\u3059\u308b"}, {"intent": "\u7279\u5b9a\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u4e00\u6c17\u306b\u66f8\u304d\u63db\u3048\u305f\u3044\u3002", "snippet": "[os.rename(f, f.replace('.dat', '.gui')) for f in os.listdir('.') if not f.startswith('.')]", "question_id": 41054, "rewritten_intent": "\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u7279\u5b9a\u306e\u62e1\u5f35\u5b50`.dat`\u3092\u3082\u3064\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092`.gui`\u306b\u3059\u3079\u3066\u66f8\u304d\u63db\u3048\u308b"}, {"intent": "DataFrame\u306e\u7d50\u5408\u306b\u3064\u3044\u3066", "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u305f\u65b0\u305f\u306a\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df2`\u3092\u5f97\u308b", "snippet": "df2 = df.reset_index(drop=True)", "question_id": 43303}, {"intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u62e1\u5f35\u3068\u88dc\u9593", "snippet": "df.resample('1min').ffill()", "question_id": 43322, "rewritten_intent": "\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u5165\u3063\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u30921\u5206\u3054\u3068\u306b\u30ea\u30b5\u30f3\u30d7\u30eb\u3057\u3001\u9593\u306e\u5024\u306f\u76f4\u524d\u306e\u5024\u3067\u88dc\u5b8c\u3059\u308b"}, {"intent": "\u8907\u7d20\u6570\u306e\u8a08\u7b97 (a+jb+c+jd; a,b,c,d:real) \u306e\u51fa\u529b\u578b\u5f0f\u306e\u8a2d\u5b9a\u65b9\u6cd5", "rewritten_intent": "\u8907\u7d20\u6570`z`\u306e\u5b9f\u6570\u90e8\u306e\u307f\u3092\u5f97\u308b", "snippet": "z.real", "question_id": 35683}, {"intent": "0,1,2,....,a(b+1)\u307e\u3067\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u8868\u793a\u306e\u4ed5\u65b9\u3092\u6559\u3048\u3066\u307b\u3057\u3044\u3067\u3059", "snippet": "list(itertools.combinations(iter, r))", "question_id": 41058, "rewritten_intent": "\u30a4\u30c6\u30e9\u30d6\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`iter`\u306e`r`\u500b\u306e\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5f97\u308b"}, {"intent": "Excel\u306e\u30bb\u30eb\u306e\u5024\u3092\u547c\u3073\u51fa\u3057\u305f\u3044", "snippet": "sheet.cell_value(row, col))", "question_id": 42573, "rewritten_intent": "Excel\u30b7\u30fc\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`sheet`\u5185\u306e\u884c`row`\u3001\u5217`col`\u306e\u30bb\u30eb\u306e\u5024\u3092\u5f97\u308b"}, {"intent": "\u30e1\u30bd\u30c3\u30c9\u3067\u4f7f\u7528\u3055\u308c\u308b\u6a19\u6e96\u95a2\u6570\u306b\u3088\u3063\u3066\u30a8\u30e9\u30fc\u3092\u51fa\u3059\u65b9\u6cd5", "rewritten_intent": "\u7d44\u307f\u8fbc\u307f\u95a2\u6570`eval`\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u969b\u306b\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3059\u308b", "snippet": "__builtins__.eval = lambda x: 'eval is not allowed'", "question_id": 30539}, {"intent": "\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u305d\u306e\u307e\u307e\u5f15\u6570\u3068\u3059\u308b\u65b9\u6cd5", "rewritten_intent": "\u5f15\u6570`args`\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3066\u95a2\u6570`func`\u306b\u6e21\u3059", "snippet": "func(*args)", "question_id": 40361}, {"intent": "\u7e70\u308a\u8fd4\u3057\u69cb\u6587\u5185\u3067\u306eDataFrame\u306e\u69cb\u7bc9\u306b\u3064\u3044\u3066", "snippet": "d = {'range': r, 'result': l}\ndf = pd.DataFrame(data=d)", "question_id": 43333, "rewritten_intent": "\u5217\u540d`range`\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8`r`\u3001\u5217\u540d`result`\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8`l`\u3068\u3057\u3066\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308b"}, {"intent": "python\u3067\u3059\u3079\u3066\u306e\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3001\u8a73\u7d30\u3092\u8868\u793a\u3055\u305b\u305f\u3044\u3002", "rewritten_intent": "\u4f8b\u5916\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u8868\u793a\u3059\u308b", "snippet": "try:\n    hoge()\nexcept:\n    traceback.print_exc()", "question_id": 6972}, {"intent": "python\u3067\u3059\u3079\u3066\u306e\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3001\u8a73\u7d30\u3092\u8868\u793a\u3055\u305b\u305f\u3044\u3002", "rewritten_intent": "\u4f8b\u5916\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u8868\u793a\u3059\u308b", "snippet": "try:\n    hoge()\nexcept:\n    print(sys.exc_info())", "question_id": 6972}, {"intent": "python\u3067\u3059\u3079\u3066\u306e\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3001\u8a73\u7d30\u3092\u8868\u793a\u3055\u305b\u305f\u3044\u3002", "rewritten_intent": "\u4f8b\u5916\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u8868\u793a\u3059\u308b", "snippet": "try:\n    hoge()\nexcept Exception as e:\n    print('Error:', e.args)\n    fuga()", "question_id": 6972}, {"intent": "open\u95a2\u6570\u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc (unicode error) \u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3059", "snippet": "f = open(r'C:\\Users\\Documents\\python programs', 'r', encoding='utf-8')", "question_id": 11582, "rewritten_intent": "\u30d5\u30a1\u30a4\u30eb`C:\\Users\\Documents\\python programs`\u3092\u958b\u304f"}, {"intent": "PYTHONPATH\u3068\u306f", "snippet": "print(sys.path)", "question_id": 12174, "rewritten_intent": "PYTHONPATH\u3092\u8868\u793a\u3059\u308b"}, {"intent": "Python \u306b\u304a\u3051\u308b `'NoneType' object has no attribute '__getitem__'` \u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u3064\u3044\u3066", "snippet": "fetchone()", "question_id": 4616, "rewritten_intent": "\u30af\u30a8\u30ea\u7d50\u679c\u306e\u6b21\u306e\u884c\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b"}, {"intent": "python\u306b\u3066IOError: [Errno 2] No such file or directory\u3068\u8868\u793a\u3055\u308c\u3001\u624b\u8a70\u307e\u308a\u306b\u306a\u308b", "rewritten_intent": "\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8868\u793a\u3059\u308b", "snippet": "print(os.getcwd())", "question_id": 20536}, {"intent": "python \u3067\u30c6\u30ad\u30b9\u30c8\u306e\u884c\u6570\u3092\u53d6\u5f97\u3057\u305f\u3044", "rewritten_intent": "\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb`myfile.txt`\u306e\u884c\u6570\u3092\u53d6\u5f97\u3059\u308b", "snippet": "sum(1 for line in open('myfile.txt'))", "question_id": 6225}, {"intent": "python \u3067\u30c6\u30ad\u30b9\u30c8\u306e\u884c\u6570\u3092\u53d6\u5f97\u3057\u305f\u3044", "rewritten_intent": "\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb`myfile.txt`\u306e\u884c\u6570\u3092\u53d6\u5f97\u3059\u308b", "snippet": "len(open('myfile.txt').readlines())", "question_id": 6225}, {"intent": "Python\u306ethreading.Timer\u3067\u5b9a\u671f\u7684\u306b\u51e6\u7406\u3092\u547c\u3073\u51fa\u3059\u30b5\u30f3\u30d7\u30eb", "rewritten_intent": "\u30b9\u30ec\u30c3\u30c9`t`\u3092\u5b9a\u671f\u7684\u306b\u5b9f\u884c\u3059\u308b", "snippet": "t=threading.Timer(interval, function)\nt.start()", "question_id": 24508}, {"intent": "Python\u3067None\u5224\u5b9a\u3092\u3057\u3066None\u3067\u306a\u3051\u308c\u3070\u305d\u306e\u5909\u6570\u3092if\u5206\u306e\u4e2d\u3067\u51e6\u7406\u3059\u308b\u306b\u306f", "rewritten_intent": "\u5909\u6570`a`\u304cNone\u3067\u306a\u3044\u5834\u5408\u306b\u5909\u6570\u3092\u8868\u793a\u3059\u308b", "snippet": "if a is not None:\n    print(a)", "question_id": 47199}, {"intent": "python\u3067print\u304c\u7701\u7565\u3055\u308c\u308b\u304c\u3001\u5168\u90e8\u307f\u305f\u3044", "snippet": "for r in data:\n    list.append(', '.join(r))\nprint(\"\\n\".join(list))", "question_id": 23332, "rewritten_intent": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u306e\u4e2d\u8eab\u3092\u5168\u3066"}, {"intent": "Python \u30a8\u30e9\u30fc'cp932' codec can't encode character", "snippet": "f = open('all_names.csv', 'w', encoding='UTF-8') ", "question_id": 34431, "rewritten_intent": "\u6587\u5b57\u30b3\u30fc\u30c9"}, {"intent": "Python\u3000\u30ea\u30b9\u30c8\u5185\u3092\u90e8\u5206\u4e00\u81f4\u3067\u691c\u7d22\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066", "rewritten_intent": "\u30ea\u30b9\u30c8`list`\u304b\u3089\u6761\u4ef6\u3068\u306a\u308b\u6587\u5b57\u5217`string`\u3068\u90e8\u5206\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\u65b0\u3057\u3044\u30ea\u30b9\u30c8`newlist`\u3092\u4f5c\u308b", "snippet": "newlist = []\nif any(s.endswith('string') for s in list):\n    newl.append('string')", "question_id": 33700}, {"intent": "Python\u3000\u30ea\u30b9\u30c8\u5185\u3092\u90e8\u5206\u4e00\u81f4\u3067\u691c\u7d22\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066", "rewritten_intent": "\u30ea\u30b9\u30c8`list`\u304b\u3089\u6761\u4ef6\u3068\u306a\u308b\u6587\u5b57\u5217`string`\u3068\u90e8\u5206\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\u65b0\u3057\u3044\u30ea\u30b9\u30c8`newlist`\u3092\u4f5c\u308b", "snippet": "newlist = []\nfor s in list:\n    if 'string' in s:\n        newlist.append(s)", "question_id": 33700}, {"intent": "\u30b0\u30e9\u30d5\u304c\u91cd\u306a\u3063\u3066\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3084\u3081\u305f\u3044", "snippet": "plt.figure() ", "question_id": 27556, "rewritten_intent": "\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b"}, {"intent": "TypeError: 'module' object is not callable\u304c\u51fa\u307e\u3059", "snippet": "display(data_frame)", "question_id": 37060, "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`data_frame`\u3092\u8868\u793a\u3059\u308b"}, {"intent": "Python \u3067 cv2.imshow \u3068\u3057\u3066\u3082\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u306a\u3044", "snippet": "cv2.imshow('image', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()", "question_id": 31537, "rewritten_intent": "\u753b\u50cf`image`\u3092\u8868\u793a\u3059\u308b:\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306bWait\u3059\u308b"}, {"intent": "python\u3067\u8868\u3092\u4f5c\u6210\u3059\u308b\u4fbf\u5229\u306a\u65b9\u6cd5\u306f\uff1f", "rewritten_intent": "\u8868`table`\u3092\u753b\u9762\u306b\u8868\u793a\u3059\u308b\uff08texttable)", "snippet": "table = Texttable()\nprint(table.draw())", "question_id": 12310}, {"intent": "Python3\u3067numpy\u3092\u7528\u3044\u3066\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059", "snippet": "df = pd.read_csv('arena.txt', header=None, delim_whitespace=True, decimal=',')", "question_id": 19311, "rewritten_intent": "\u5c11\u6570\u70b9\u306b\u30b3\u30f3\u30de\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb`arena.txt`\u3092\u8aad\u307f\u8fbc\u3080"}, {"intent": "str() \u3067\u6587\u5b57\u5217\u306b\u3057\u305f Python \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c json.loads \u3067\u623b\u305b\u306a\u3044", "rewritten_intent": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`json_data`\u3092JSON\u6587\u5b57\u5217`json_str`\u306b\u5909\u63db\u3059\u308b", "snippet": "json_str = json.dumps(json_data)", "question_id": 42268}, {"intent": "ValueError: too many values to unpack (expected 2)\u306e\u89e3\u6c7a\u6cd5(python3.7)", "snippet": "data = np.genfromtxt('file.csv')", "question_id": 51387, "rewritten_intent": "CSV\u30d5\u30a1\u30a4\u30eb`file.csv`\u3092`data`\u306b\u8aad\u307f\u8fbc\u3080"}, {"intent": "\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u884c\u306e\u307f\u3092\u524a\u9664\u3059\u308b\u306b\u306f\uff1f", "snippet": "df.drop(df.index[df.row == \"condition\"], inplace=True)", "question_id": 38598, "rewritten_intent": "\u6761\u4ef6`condition`\u3092\u6e80\u305f\u3059\u884c\u3092\u524a\u9664\u3059\u308b"}, {"intent": "\u30ea\u30b9\u30c8\u306e\u5165\u308c\u5b50\u304b\u3089\u4efb\u610f\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059", "snippet": "print list[x][y]", "question_id": 20094, "rewritten_intent": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u5185\u306e\u8981\u7d20"}, {"intent": "python\u3067for\u30eb\u30fc\u30d7\u4e2d\u306b\u81ea\u52d5\u3067\u30ea\u30b9\u30c8\u306e\u540d\u524d\u3092\u5909\u3048\u305f\u3044", "rewritten_intent": "for\u30eb\u30fc\u30d7\u3067\u6570\u5b57\u3092\u6dfb\u5b57\u306b\u6301\u3064\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u3092\u751f\u6210\u3059\u308b", "snippet": "for i in range(x):\n  for j in range(y):\n    exec(\"list_\" + str(i) + \"_\" + str(j) + \"= [i, j]\")", "question_id": 18780}, {"intent": "Python \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u306b\u65e5\u4ed8\u3092\u5165\u308c\u305f\u3044", "rewritten_intent": "\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u73fe\u5728\u306e\u65e5\u4ed8\u3092\u5165\u308c\u308b", "snippet": "now = datetime.datetime.now()\nfile_name = 'file_{0:%Y%m%d-%H%M%S}.txt'.format(now)", "question_id": 19552}, {"intent": "matplotlib\u3067\u63cf\u753b\u3057\u305f\u6563\u5e03\u56f3\u306b\u7dda\u5f62\u56de\u5e30\u76f4\u7dda\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5", "snippet": "a, b = np.polyfit(x, y, 1)\nlinear = a * x + b\n\nax.plot(x, linear,color=\"black\")", "question_id": 38755, "rewritten_intent": "\u30b0\u30e9\u30d5\u306b\u7dda\u5f62\u56de\u5e30\u76f4\u7dda\u3092\u8ffd\u52a0\u3059\u308b"}, {"intent": "\u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5", "rewritten_intent": "\u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b", "snippet": "class Foo:\n    def whoAmI(self):\n        print( \"I am \" + self.__class__.__name__)\n\nFoo().whoAmI()", "question_id": 4556}, {"intent": "\u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5", "rewritten_intent": "\u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b", "snippet": "class Foo(object):\n    def __init__(self):\n        print(self.__class__.__name__) # >>> Foo\n\na = Foo()\nprint(a.__class__.__name__) # >>> Foo", "question_id": 4556}, {"intent": "XPath\u3067\u8981\u7d20\u306e\u5b58\u5728\u3092\u78ba\u8a8d\u3059\u308b\u65b9\u6cd5", "snippet": "try:\n    driver.find_element(By.XPATH, element)\nexcept:\n    process_if_the_element_does_not_exist", "question_id": 30895, "rewritten_intent": "XPath\u3092\u4f7f\u3044\u8981\u7d20`element`\u306e\u5b58\u5728\u3092\u6761\u4ef6\u3068\u3057\u3066\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b"}, {"intent": "Python3\u3067web\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u5b58\u5728\u3059\u308bURL\u304c\u958b\u3051\u307e\u305b\u3093\u3002", "snippet": "headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0\"}", "question_id": 27922, "rewritten_intent": "\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092Firefox\u306b\u5909\u66f4\u3059\u308b"}, {"intent": "\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u306e\u306bFileNotFoundError\u304c\u51fa\u307e\u3059", "snippet": "chdir('/path/to') ", "question_id": 42850, "rewritten_intent": "\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092`path/to`\u306b\u5909\u66f4\u3059\u308b"}, {"intent": "python\u3067web\u30b5\u30a4\u30c8\u304b\u3089\u306ehtml\u53d6\u5f97\u3092\u3057\u307e\u3057\u305f\u304c\u6587\u5b57\u5316\u3051\u3057\u307e\u3059\u3002", "snippet": "guess = chardet.detect(data)\nunicode_data = data.decode(guess['encoding'])", "question_id": 11182, "rewritten_intent": "\u30c7\u30fc\u30bf`data`\u304b\u3089\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u5224\u5b9a\u3057\u3001Unicode\u306b\u5909\u63db\u3059\u308b"}, {"intent": "CSV\u3092Pandas\u3067\u6271\u3046\u969b\u306e\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u554f\u984c", "snippet": "pd.read_csv(file, sep='\\s+')", "question_id": 35394, "rewritten_intent": "\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb`file`\u3092\u8aad\u307f\u8fbc\u3080"}, {"intent": "CSV\u3092Pandas\u3067\u6271\u3046\u969b\u306e\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u554f\u984c", "snippet": "pd.read_csv(file, delim_whitespace=True)", "question_id": 35394, "rewritten_intent": "\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb`file`\u3092\u8aad\u307f\u8fbc\u3080"}, {"intent": "\u5909\u6570\u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u5024\u3092\u4ee3\u5165\u3057\u3001\u5165\u3063\u3066\u3044\u308c\u3070\u4f55\u3082\u3057\u306a\u3044\u51e6\u7406\u3092\u30b9\u30de\u30fc\u30c8\u306b\u3067\u304d\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002", "rewritten_intent": "\u5909\u6570`variable`\u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u307f\u5024\u3092\u4ee3\u5165\u3092\u3059\u308b", "snippet": "variable = value if variable is None else v", "question_id": 37591}, {"intent": "\u5909\u6570\u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u5024\u3092\u4ee3\u5165\u3057\u3001\u5165\u3063\u3066\u3044\u308c\u3070\u4f55\u3082\u3057\u306a\u3044\u51e6\u7406\u3092\u30b9\u30de\u30fc\u30c8\u306b\u3067\u304d\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002", "rewritten_intent": "\u5909\u6570`variable`\u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u307f\u5024\u3092\u4ee3\u5165\u3092\u3059\u308b", "snippet": "variable = value if variable is None else variable", "question_id": 37591}, {"intent": "python\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3057\u305f\u3089PermissionError: Permission denied\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3057\u305f", "snippet": "os.startfile('C:\\Program Files\\....\\app.exe')", "question_id": 11601, "rewritten_intent": "Windows\u4e0a\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3`app`\u3092\u5b9f\u884c\u3059\u308b"}, {"intent": "python \u3067 \u6570\u5024\u3092\u6841\u5225\u306b\u53d6\u5f97\u3059\u308b\u306b\u306f", "rewritten_intent": "\u6570\u5024`number`\u3092\u4e00\u6841\u305a\u3064\u53d6\u5f97\u3057\u3066\u30ea\u30b9\u30c8`num_list`\u306b\u3059\u308b", "snippet": "num_list = []\nwhile numer != 0:\n  num.append(number % 10)\n  n /= 10\nnum_list.reverse()", "question_id": 26837}, {"intent": "python \u3067 \u6570\u5024\u3092\u6841\u5225\u306b\u53d6\u5f97\u3059\u308b\u306b\u306f", "rewritten_intent": "\u6570\u5024`number`\u3092\u4e00\u6841\u305a\u3064\u53d6\u5f97\u3057\u3066\u30ea\u30b9\u30c8`num_list`\u306b\u3059\u308b", "snippet": "num_list = map(int, str(number))", "question_id": 26837}, {"intent": "AttributeError: module 'tensorflow' has no attribute 'Session'\u306b\u3064\u3044\u3066", "snippet": "hello  = tf.constant(\"Hello\")\nf = tf.function(example)\nprint(eval(f([], hello)))", "question_id": 59780, "rewritten_intent": "\u5b9a\u6570\u306e\u8a55\u4fa1\u7d50\u679c\u3092\u8868\u793a\u3059\u308b"}, {"intent": "\u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3092\u62bd\u51fa\u3057\u3001\u5408\u8a08\u3057\u305f\u3044", "snippet": "pattern=r\"([0-9]*)\"\nlist=re.findall(pattern,text)", "question_id": 38276, "rewritten_intent": "\u6b63\u898f\u8868\u73fe\u3067\u6587\u5b57\u5217`text`\u306e\u4e2d\u304b\u3089\u6570\u5024\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u30ea\u30b9\u30c8`list`\u306b\u3059\u308b"}, {"intent": "matplotlib \u306e ylim\u306b\u3064\u3044\u3066\u3000\u4e0b\u9650\u5024\u306f\u6307\u5b9a\u3001\u4e0a\u9650\u5024\u306f\u81ea\u52d5\u306b\u3057\u305f\u3044", "snippet": "rp = sns.regplot(x, y, data=df, order=1, line_kws={\"color\":\"indianred\"})\nrp.axes.set_ylim(0,)", "question_id": 49558, "rewritten_intent": "y\u8ef8\u306e\u4e0b\u9650\u5024\u3092\u6307\u5b9a\u3057\u3001\u4e0a\u9650\u5024\u306f\u81ea\u52d5\u306b\u3059\u308b"}, {"intent": "NoneType' object is not subscriptable \u30a8\u30e9\u30fc\u306e\u5bfe\u51e6\u6cd5", "rewritten_intent": "\u6587\u5b57\u5217`word`\u306e\u9806\u756a\u3092`h`\u756a\u76ee\u3067\u5165\u308c\u66ff\u3048\u308b", "snippet": "tmp1 = word[:h]\nword = word[h:]\nword.extend(tmp1)", "question_id": 65284}, {"intent": "\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u5909\u6570\u306e\u5024\u3092for\u6587\u3067\u5909\u66f4\u3057\u305f\u3044", "rewritten_intent": "\u30ea\u30b9\u30c8`attributes`\u306e\u5168\u8981\u7d20\u306e\u6570\u5024\u306b\u5bfe\u3057\u3066for\u6587\u3067\u30de\u30a4\u30ca\u30b91\u3059\u308b", "snippet": "for i, attribute in enumerate(attributes):\n    attributes[i] = attribute-1", "question_id": 31916}, {"intent": "\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u5909\u6570\u306e\u5024\u3092for\u6587\u3067\u5909\u66f4\u3057\u305f\u3044", "rewritten_intent": "\u30ea\u30b9\u30c8`attributes`\u306e\u5168\u8981\u7d20\u306e\u6570\u5024\u306b\u5bfe\u3057\u3066for\u6587\u3067\u30de\u30a4\u30ca\u30b91\u3059\u308b", "snippet": "for i in range(len(attributes)):\n    attributes[i] = attributes[i]-1", "question_id": 31916}, {"intent": "\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u5909\u6570\u306e\u5024\u3092for\u6587\u3067\u5909\u66f4\u3057\u305f\u3044", "rewritten_intent": "\u30ea\u30b9\u30c8`attributes`\u306e\u5168\u8981\u7d20\u306e\u6570\u5024\u306b\u5bfe\u3057\u3066for\u6587\u3067\u30de\u30a4\u30ca\u30b91\u3059\u308b", "snippet": "attributes = [attribute-1 for attribute in attributes]", "question_id": 31916}, {"intent": "Python\u30672\u6b21\u5143\u30ea\u30b9\u30c8\u306e\u6761\u4ef6\u306b\u5408\u3046\u8981\u7d20\u3092\u62bd\u51fa", "snippet": "c = Counter(map(tuple, list))", "question_id": 21171, "rewritten_intent": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u304b\u3089\u91cd\u8907\u3059\u308b\u8981\u7d20\u306e\u307f\u62bd\u51fa\u3059\u308b"}, {"intent": "python\u3067\u8907\u6570\u306etxt\u30d5\u30a1\u30a4\u30eb\u3092\u4e00\u5ea6\u306b\u8aad\u307f\u8fbc\u307f\u305f\u3044", "rewritten_intent": "\u9023\u756a\u500b\u6570`num_of_file`\u306etxt\u30d5\u30a1\u30a4\u30eb`data{}.txt`\u3092\u8aad\u307f\u8fbc\u3080", "snippet": "data = [None] * num_of_file\nfor i in range(num_of_file):\n    with open('data{}.txt'.format(i + 1), mode=\"r\", encoding=\"utf-8\") as f:\n        data[i] = f.read()", "question_id": 45204}, {"intent": "TypeError\u304c\u51fa\u3066\u304d\u3066\u5b9f\u884c\u3067\u304d\u306a\u3044\u3002", "snippet": "urllib.parse.urlencode('string').encode('ascii')", "question_id": 24786, "rewritten_intent": "\u6587\u5b57\u5217`string`\u3092byte\u578b"}, {"intent": "scikit-learn\u3092\u7528\u3044\u3066\u4e3b\u6210\u5206\u5206\u6790 (PCA) \u3057\u305f\u7d50\u679c\u304b\u3089\u5143\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u5fa9\u5143\u3057\u305f\u3044", "snippet": "pca = PCA()\npca.fit(imgAry)\npca_res = pca.transform(imgAry)\nrestoredImgAry = pca.inverse_transform(pca_res)", "question_id": 5822, "rewritten_intent": "\u4e3b\u6210\u5206\u5206\u6790 "}, {"intent": "matplotlib\u3067\u63cf\u753b\u3057\u305f\u56f3\u306e\u8ef8\u30e9\u30d9\u30eb\u304c\u8868\u793a\u3055\u308c\u306a\u3044", "snippet": "plt.savefig(fnameF, dpi=200, bbox_inches=\"tight\", pad_inches=0.1)", "question_id": 42516, "rewritten_intent": "\u30b0\u30e9\u30d5\u30b5\u30a4\u30ba\u3092\u8abf\u6574\u3057\u3066\u4fdd\u5b58\u3059\u308b"}, {"intent": "2\u6b21\u5143\u914d\u5217\u306e\u30ea\u30b9\u30c8\u3092\u524a\u9664\u3057\u305f\u3044", "rewritten_intent": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u304b\u3089\u7a7a\u767d\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b", "snippet": "list = [x for x in list if x]", "question_id": 18685}, {"intent": "2\u6b21\u5143\u914d\u5217\u306e\u30ea\u30b9\u30c8\u3092\u524a\u9664\u3057\u305f\u3044", "rewritten_intent": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u304b\u3089\u7a7a\u767d\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b", "snippet": "for i in range(len(list) - 1, -1, -1):\n  if not list[i]:\n    del list[i]", "question_id": 18685}, {"intent": "pyserial\u3067read\u3057\u305f\u30c7\u30fc\u30bf\u306e\u6587\u5b57\u6bd4\u8f03", "snippet": "while True:\n   if ser.inWaiting() > 0\n      data = ser.read(ser.inWaiting())\n      print(data)", "question_id": 8532, "rewritten_intent": "\u53d7\u4fe1\u3057\u305f\u6587\u5b57\u5217`ser`\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a\u3059\u308b"}, {"intent": "Python3\u7cfb\u3067\u306eJson\u304b\u3089\u306e\u5024\u306e\u53d6\u5f97\u6cd5\u306b\u3064\u3044\u3066", "rewritten_intent": "JSON\u6587\u5b57\u5217`json_string`\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`json_obj`\u306b\u8aad\u307f\u8fbc\u3080\uff08json)", "snippet": "json_obj = json.loads(json_string)", "question_id": 34692}, {"intent": "OpenCv\u3067\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u3068\u767d\u304c\u9ec4\u8272\u306b\u306a\u308b\u3002", "snippet": "gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\nplt.imshow(gray_img)\nplt.gray()\nplt.show()", "question_id": 35864, "rewritten_intent": "\u30ab\u30e9\u30fc\u753b\u50cf`img`\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u8868\u793a\u3059\u308b"}, {"intent": "matplotlib\u306epyplot\u3067savefig\u3092\u3059\u308b\u3068\u304d\u3001\uff58\u8ef8\u306e\u30e9\u30d9\u30eb\u306e\u6570\u304c\u591a\u3059\u304e\u308b\u3068\u30e9\u30d9\u30eb\u304c\u91cd\u306a\u3063\u3066\u3057\u307e\u3046\u3002", "snippet": "plt.xticks(range(0, len(labels), ticks), labels[::ticks])", "question_id": 49478, "rewritten_intent": "X\u8ef8\u306e\u9593\u9694\u3092`ticks`\u306b\u3001\u30e9\u30d9\u30eb\u3092`labels`\u306b\u3059\u308b"}, {"intent": "python\u3067csv \u3084 Excel \u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e00\u5ea6\u306b\u8aad\u307f\u8fbc\u307f\u305f\u3044", "snippet": "book_list = []\nfor n in range(1, num_of_file + 1):\n    file_name = 'excel_file%d.xls' % (n)\n    book_list.append(xlrd.open_workbook(file_name))", "question_id": 16769, "rewritten_intent": "\u9023\u756a\u306b\u306a\u3063\u3066\u3044\u308b`num_of_file`\u500b\u306eExcel\u30d5\u30a1\u30a4\u30eb`excel_file`\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u307f\u8fbc\u3080"}, {"intent": "IndexError:too many indices for array \u306b\u3064\u3044\u3066", "snippet": "data=np.genfromtxt('file.csv', delimiter=',')", "question_id": 24388, "rewritten_intent": "\u30b3\u30f3\u30de\u533a\u5207\u308a\u306eCSV\u30d5\u30a1\u30a4\u30eb`file.csv`\u3092\u8aad\u307f\u8fbc\u3080"}, {"intent": "Python\u306edatetime\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089Unix Time\u3092\u6c42\u3081\u308b", "snippet": "dt.timestamp()", "question_id": 2220, "rewritten_intent": "datetime\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`dt`\u304b\u3089Unix Time\u3092\u6c42\u3081\u308b"}, {"intent": "\u7279\u5b9a\u306e\u6587\u5b57\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u884c\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u65b9\u6cd5\u3092\u4f3a\u3044\u305f\u3044\u3067\u3059", "snippet": "df[df['col_name'].str.contains('string')]", "question_id": 44723, "rewritten_intent": "\u884c`col_name`\u306b\u7279\u5b9a\u306e\u6587\u5b57\u5217`string`\u3092\u542b\u3080\u884c\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u304b\u3089\u62bd\u51fa\u3059\u308b"}, {"intent": "Python\u3067import\u4ed5\u7d44\u307f\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3067\u3059\u3002\u30a8\u30e9\u30fc\u3082\u51fa\u307e\u3059ImportError: No module named 'config'", "rewritten_intent": "\u4e0a\u4f4d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb`file.py`\u3092import\u3059\u308b", "snippet": "from .. import file.py", "question_id": 39007}, {"intent": "\u30ea\u30b9\u30c8\u306e\u672b\u5c3e n \u500b\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044", "rewritten_intent": "\u30ea\u30b9\u30c8`list`\u306e\u672b\u5c3e\u304b\u3089`n`\u500b\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059", "snippet": "list[-n:]", "question_id": 46711}, {"intent": "Python\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db: UTF-16\u304b\u3089UTF-8\u3078\u306e\u5909\u63db", "snippet": "b_string.decode('unicode-escape')", "question_id": 17648, "rewritten_intent": "Unicode\u30a8\u30b9\u30b1\u30fc\u30d7\u3055\u308c\u305f\u30d0\u30a4\u30c8\u5217`b_string`\u3092\u6587\u5b57\u5217\u306b\u5909\u63db"}, {"intent": "\u4f8b\u3048\u3070 Python \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u7de8\u96c6\u3092\u884c\u3044\u305f\u3044\u304c\uff0c\u4fdd\u5b58\u66421\u884c\u305a\u3064\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u4ee5\u5916\u306b\u3046\u307e\u3044\u65b9\u6cd5\u306f\u3042\u308b\u304b", "rewritten_intent": "\u6587\u5b57\u5217`str`\u5185\u306e\u5bfe\u8c61\u6587\u5b57\u5217`old_s`\u3092\u5225\u306e\u6587\u5b57\u5217`new_s`\u306b\u7f6e\u63db\u3059\u308b", "snippet": "str.replace(old_s, new_s)", "question_id": 9633}, {"intent": "python3 \u3067 input \u306b\u5bfe\u3059\u308b\u7a7a\u884c\u306e\u5165\u529b\u3092\u5224\u5b9a\u3057\u305f\u3044\u304c EOFError \u304c\u767a\u751f\u3057\u306a\u3044", "rewritten_intent": "\u7a7a\u884c\u304c\u5165\u529b\u3055\u308c\u308b\u307e\u3067\u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b", "snippet": "while True:\n  try:\n    line = input()\n    if line == '':\n        break\n    else:\n        yield line\n    except EOFError:\n        break", "question_id": 37327}, {"intent": "Keras\u3092\u7528\u3044\u305f\u3068\u304d\u8a08\u7b97\u9014\u4e2d\u306b\u30ed\u30b0\u3092\u51fa\u529b\u3055\u305b\u306a\u3044\u65b9\u6cd5", "snippet": "model.fit(X, Y, epochs=200, batch_size=1, verbose=0)", "question_id": 37831, "rewritten_intent": "\u30ed\u30b0\u3092\u51fa\u529b\u305b\u305a\u306b\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046"}, {"intent": "AttributeError\u306e\u76f4\u3057\u65b9", "snippet": "str.encode('utf-8')", "question_id": 53340, "rewritten_intent": "\u6587\u5b57\u5217`str`\u3092\u30d0\u30a4\u30c8\u5217"}, {"intent": "python\u3067for\u30eb\u30fc\u30d7\u3067\u81ea\u52d5\u3067DataFrame\u306e\u540d\u524d\u3092\u5909\u3048\u305f\u3044", "snippet": "for i in range(n):\n    df[i] = pd.DataFrame()", "question_id": 45120, "rewritten_intent": "\u8981\u7d20\u304c\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u3001\u8981\u7d20\u6570`n`\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b"}, {"intent": "\u9023\u7d9a\u3057\u305f\u5168\u89d2\u7a7a\u767d\u30921\u3064\u306e\u5168\u89d2\u7a7a\u767d\u3067\u7f6e\u304d\u63db\u3048\u305f\u3044", "snippet": "re.sub('[\\u3000]{2,}', '\\u3000', str)", "question_id": 24987, "rewritten_intent": "\u6587\u5b57\u5217`str`\u306e\u4e2d\u306e\u9023\u7d9a\u3057\u305f\u8907\u6570\u306e\u5168\u89d2\u7a7a\u767d\u30921\u3064\u306e\u5168\u89d2\u7a7a\u767d\u3067\u7f6e\u63db\u3059\u308b"}, {"intent": "\u3010Django\u3011\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u306b\u5b9a\u7fa9\u3057\u305f\u5909\u6570\u3092forms.py\u3067\u8aad\u307f\u8fbc\u307f\u305f\u3044", "rewritten_intent": "\u540c\u968e\u5c64\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb`file.py`\u3092import\u3059\u308b", "snippet": "from . import file.py", "question_id": 33012}, {"intent": "Python \u753b\u50cf\u4fdd\u5b58\u5148\u6307\u5b9a", "snippet": "cv2.imwrite('file.jpg', img)", "question_id": 50500, "rewritten_intent": "\u753b\u50cf`img`\u3092\u30d5\u30a1\u30a4\u30eb\u540d`file.jpg`\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b"}, {"intent": "python numpy\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3068\u306f\uff1f", "snippet": "np.dot(a, b)", "question_id": 41336, "rewritten_intent": "\u884c\u5217`a`\u3068`b`\u306e\u7a4d\u3092\u8a08\u7b97\u3059\u308b"}, {"intent": ".txt\u30d5\u30a1\u30a4\u30eb\u3092.csv\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3057\u305f\u3044", "snippet": "df = pd.read_table('file.txt', header=None, delim_whitespace=True)\ndf.to_csv('new_file.csv', index=False, header=False)", "question_id": 48742, "rewritten_intent": "\u7a7a\u767d\u533a\u5207\u308a\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb`file.txt`\u3092\u30b3\u30f3\u30de\u533a\u5207\u308a\u306ecsv\u30d5\u30a1\u30a4\u30eb`new_file.csv`\u306b\u5909\u63db\u3059\u308b"}, {"intent": "python \u3067\u3000with open\u95a2\u6570\u306e\u5f15\u6570\u306b\u5909\u6570\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u304b\uff1f", "rewritten_intent": "\u6570\u5024`n`\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b", "snippet": "str(n)", "question_id": 35271}, {"intent": "Chainer\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u9014\u4e2d\u3067\u306e\u30c7\u30fc\u30bf\u306e\u5408\u6210\u65b9\u6cd5\u306f\uff1f", "snippet": "chainer.functions.concat([x1, x2], axis=1)", "question_id": 30337, "rewritten_intent": "\u591a\u6b21\u5143\u914d\u5217`x1`\u3068`x2`\u3092\u9023\u7d50\u3059\u308b"}, {"intent": "jupyter notebook\u3067\u306e\u30e1\u30e2\u30ea\u30a8\u30e9\u30fc", "snippet": "@profile \ndef function():\n    #function_code", "question_id": 49825, "rewritten_intent": "\u95a2\u6570`function`\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u8abf\u3079\u308b"}, {"intent": "\u8907\u6570\u306e\u6570\u5024\u3092input\u3067\u4e00\u884c\u3067\u53d6\u5f97\u3057\u305f\u3044", "rewritten_intent": "\u8907\u6570\u306e\u6574\u6570\u5024\u3092input\u3067\u53d6\u5f97\u3059\u308b", "snippet": "a,b,c = map(int,input().split())", "question_id": 53030}, {"intent": "python\u3092\u7528\u3044\u30662\u6b21\u5143\u914d\u5217\u304b\u3089\u91cd\u8907\u3059\u308b\u914d\u5217\u3092\u53d6\u308a\u51fa\u3059", "snippet": "c = Counter(tuple(x) for x in li)\n[list(k) for k,v in c.items() if v >=2]", "question_id": 20048, "rewritten_intent": "2\u6b21\u5143\u30ea\u30b9\u30c8`li`\u5185\u306e\u91cd\u8907\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059"}, {"intent": "Python\u30671\u6b21\u5143\u306e\u30ea\u30b9\u30c8\u3092\u6bd4\u8f03\u3057,\u540c\u4e00\u306e\u8981\u7d20\u306e\u524a\u9664\u306b\u3064\u3044\u3066", "rewritten_intent": "2\u3064\u306e\u30ea\u30b9\u30c8`li`\u3068`li2`\u3092\u6bd4\u8f03\u3057\u3001\u91cd\u8907\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u524a\u9664\u3059\u308b", "snippet": "list(filter(lambda x:x not in li2, li))", "question_id": 21070}, {"intent": "\u30ea\u30b9\u30c8\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f3\u3064\u306e\u6574\u6570\u306e\u5408\u8a08\u304c0\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b", "rewritten_intent": "\u6574\u6570\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8`li'\u304b\u3089\u3001\u5408\u8a08\u3059\u308b\u30680\u306b\u306a\u308b3\u3064\u306e\u6574\u6570\u3092\u6c42\u3081\u308b", "snippet": "li.sort()\nM = len(li) - 1\nfor i, e in enumerate(li):\n    j = i + 1\n    k = M\n    while k > j:\n        s = li[i] + li[j] + li[k]\n        if s == 0:\n            print(li[i], li[j], li[k])\n            k -= 1\n        elif s > 0:\n            k -= 1\n        else:\n            j += 1", "question_id": 19098}, {"intent": "MeCab\u3092python3\u3067\u4f7f\u3044\u305f\u3044\u304c 'utf-8' codec can't decode 'utf-8' codec can't decode\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3046", "snippet": "mecab = MeCab.Tagger('-Ochasen')\ninfo = mecab.dictionary_info()\nprint(info.charset)", "question_id": 42804, "rewritten_intent": "\u8f9e\u66f8\u30c7\u30fc\u30bf\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b"}, {"intent": "Word2vec\u306e\u8ffd\u52a0\u5b66\u7fd2\u306b\u3064\u3044\u3066", "rewritten_intent": "\u65e2\u5b58\u306e\u30e2\u30c7\u30eb'old_model'\u3092\u8aad\u307f\u8fbc\u307f\u30c7\u30fc\u30bf`sentences`\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3055\u305b\u3066\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u308b", "snippet": "model = word2vec.Word2Vec.load('old_model')\nmodel.train(sentences)", "question_id": 29214}, {"intent": "NumPy\u914d\u5217\u306e\u5404\u8981\u7d20\u306b\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u3066\u51fa\u529b\u3059\u308b\u65b9\u6cd5", "snippet": "print(np.array2string(ary, separator=', ', formatter={'float_kind': lambda x: '{: .4f}'.format(x)}))", "question_id": 36377, "rewritten_intent": "\u914d\u5217`ary`\u306e\u5404\u8981\u7d20\u306b\u30b3\u30f3\u30de\u3092\u4ed8\u3051\u3066\u5c0f\u6570\u70b9\u56db\u6841\u307e\u3067\u8868\u793a\u3059\u308b"}, {"intent": "python\u3067\u5916\u90e8\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u305d\u306e\u51fa\u529b\u306b\u51e6\u7406\u3092\u52a0\u3048\u308b\u65b9\u6cd5", "snippet": "contents = subprocess.check_output('cat file', shell=True)", "question_id": 23839, "rewritten_intent": "\u5916\u90e8\u30d7\u30ed\u30bb\u30b9`cat`\u3092\u547c\u3073\u51fa\u3057\u3001\u30d5\u30a1\u30a4\u30eb`file`\u306e\u4e2d\u8eab\u3092\u8aad\u307f\u8fbc\u3080"}, {"intent": "\u30a8\u30e9\u30fc\u3000\u753b\u50cf\u3092\u81ea\u52d5\u3067\u3057\u304d\u3044\u5024\u3092\u6c7a\u3081\u30662\u5024\u5316\u3057\u305f\u3044\u3002\u5927\u6d25\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "snippet": "img = cv2.imread('file.png', 0)", "question_id": 34981, "rewritten_intent": "\u753b\u50cf'file.png'\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u8aad\u307f\u8fbc\u3080"}, {"intent": "TensorFlow\u306b\u3064\u3044\u3066", "snippet": "print(sess.run(W))\nprint(sess.run(b))", "question_id": 25412, "rewritten_intent": "\u91cd\u307f`W`\u3084\u30d0\u30a4\u30a2\u30b9`b`\u306a\u3069\u306e\u5909\u6570\u3092\u8868\u793a\u3059\u308b"}, {"intent": "Python3.6.0\u3067Gmail\u306eUTF-8\u30e1\u30fc\u30eb\u306e\u30c7\u30b3\u30fc\u30c9\u306b\u5931\u6557", "snippet": "base64.b64decode(s).decode()", "question_id": 33506, "rewritten_intent": "base64\u3067\u7b26\u53f7\u5316\u3055\u308c\u305f\u6587\u5b57\u5217`s`\u3092\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b"}, {"intent": "x and y must be the same size\u306e\u30a8\u30e9\u30fc\u306b\u3064\u3044\u3066", "snippet": "plt.scatter(x, y)", "question_id": 24190, "rewritten_intent": "\u914d\u5217\u30c7\u30fc\u30bf`x`,`y`\u306e\u6563\u5e03\u56f3\u3092\u8868\u793a\u3059\u308b"}, {"intent": "BeautifulSoup\u3092\u4f7f\u3063\u3066<li>\u306e\u5185\u5bb9\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u65b9\u6cd5\uff1f", "snippet": "soup = bs4.BeautifulSoup(html, 'lxml')\nunorder_list = soup.find_all('ul', id='front')\nnew_list = []\nfor ul_tag in unorder_list:\n    for li in ul_tag.find_all('li'):\n        new_list.append(li.text)\nprint(new_list)", "question_id": 40646, "rewritten_intent": "HTML\u30d5\u30a1\u30a4\u30eb`html`\u5185\u306e\u9806\u5e8f\u306a\u3057\u30ea\u30b9\u30c8\u3092python\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u53d6\u308a\u8fbc\u3080"}, {"intent": "python\u30672\u3064\u306ecsv\u30d5\u30a1\u30a4\u30eb\u3092\u6bd4\u8f03\u3057\u91cd\u8907\u3057\u3066\u3044\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b", "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u5185\u306e\u5217`col_label`\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u884c\u3092\u62bd\u51fa\u3059\u308b\uff08pandas)", "snippet": "df[df.duplicated(subset=col_lable)]", "question_id": 41775}, {"intent": "pandas\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u7a4d\u307f\u4e0a\u3052\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u308a\u305f\u3044", "snippet": "pandas.crosstab(df[col_1], df[col_2]).plot(kind='bar',stacked=True)", "question_id": 33034, "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217`col_1`\u3068`col_2`\u306b\u3064\u3044\u3066\u30af\u30ed\u30b9\u96c6\u8a08\u3092\u884c\u3063\u305f\u7d50\u679c\u3092\u7a4d\u307f\u4e0a\u3052\u30b0\u30e9\u30d5\u306b\u3059\u308b"}, {"intent": "python\u306e\u30ea\u30b9\u30c8\u5185\u306e\u91cd\u8907\u8981\u7d20\u691c\u7d22", "rewritten_intent": "\u30ea\u30b9\u30c8`li`\u304b\u3089\u691c\u7d22\u3059\u308b\u5024`v`\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3059\u3079\u3066\u53d6\u5f97\u3057\u3066\u8868\u793a\u3059\u308b", "snippet": "ans = []\nfor index, value in enumerate(li):\n    if value == v:\n        ans.append(index)", "question_id": 23246}, {"intent": "python\u306e\u30ea\u30b9\u30c8\u5185\u306e\u91cd\u8907\u8981\u7d20\u691c\u7d22", "rewritten_intent": "\u30ea\u30b9\u30c8`li`\u304b\u3089\u691c\u7d22\u3059\u308b\u5024`v`\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3059\u3079\u3066\u53d6\u5f97\u3057\u3066\u8868\u793a\u3059\u308b", "snippet": "ans = [ i for i, value in enumerate(li) if value == v]", "question_id": 23246}, {"intent": "Python\u3067dict\u304b\u3089\u5b58\u5728\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u30ad\u30fc\u306e\u524a\u9664", "rewritten_intent": "\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`d`\u5185\u306e\u5b58\u5728\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u30ad\u30fc`k`\u3092\u524a\u9664\u3059\u308b", "snippet": "d.pop(k, None) ", "question_id": 30088}, {"intent": "\u4e8c\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u6bd4\u8f03", "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u5185\u306e\u5217`col_label`\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u884c\u3092\u524a\u9664\u3059\u308b\uff08pandas)", "snippet": "df.drop_duplicates(subset=col_lable)", "question_id": 41700}, {"intent": "Python Datetime \u5148\u6708\u3092\u53d6\u5f97\u3057\u305f\u3044\u3067\u3059\u3002", "snippet": "today = datetime.date.today()\nprevious_month = today - dateutil.relativedelta.relativedelta(months=1)", "question_id": 30824, "rewritten_intent": "\u4eca\u65e5\u304b\u3089\u4e00\u30f6\u6708\u524d\u306e\u65e5\u4ed8\u3092\u53d6\u5f97\u3059\u308b"}, {"intent": "Python\u3092\u4f7f\u7528\u3057\u3066\u3001Bluetooth\u306eRSSI\u5024\u3092\u53d6\u5f97\u3057\u305f\u3044\u3002", "snippet": "bluetooth.byte_to_signed_int()", "question_id": 30882, "rewritten_intent": "Bluetooth\u306eRSSI\u5024\u3092\u53d6\u5f97\u3059\u308b"}, {"intent": "Python \u306e input()\u3067\u6539\u884c\u3092\u3055\u305b\u306a\u3044\u65b9\u6cd5", "rewritten_intent": "\u6587\u5b57\u5217`str`\u304b\u3089\u7a7a\u767d\u3068\u6539\u884c\u3092\u53d6\u308a\u9664\u304f", "snippet": "str.strip()", "question_id": 42011}, {"intent": "pylab\u3067\u63cf\u753b\u3067\u304d\u308b\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3092\u30c7\u30fc\u30bf\u3067\u51fa\u529b\u3057\u305f\u3044\u3002", "snippet": "f,t,Sxx = signal.spectrogram(data, fs)\nplt.pcolormesh(t, f, Sxx)", "question_id": 23218, "rewritten_intent": "\u4fe1\u53f7\u30c7\u30fc\u30bf`data`\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5468\u6ce2\u6570`fs`\u3067\u5468\u6ce2\u6570\u89e3\u6790\u3057\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3092\u8868\u793a\u3059\u308b"}, {"intent": "python\u3067\u306eshift-jis\u306ebytes\u578b\u304b\u3089utf-8\u306e\u6587\u5b57\u5217\u3078\u306e\u5909\u63db", "rewritten_intent": "Shift_JIS\u3067\u7b26\u53f7\u5316\u3055\u308c\u305f\u6587\u5b57\u5217`sjis_str`\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b", "snippet": "sjis_str.decode('shift-jis')", "question_id": 39255}, {"intent": "CSV\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u578b\u5909\u63db\u306b\u3064\u3044\u3066: astype \u3057\u3066\u3082 dtype \u304c\u5909\u308f\u3089\u306a\u3044", "snippet": "df[col] = df[col].astype(str)", "question_id": 41519, "rewritten_intent": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217`col`\u3092\u6587\u5b57\u5217\u578b\u306b\u5909\u66f4\u3059\u308b"}]