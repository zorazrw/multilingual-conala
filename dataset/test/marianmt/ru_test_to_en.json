[{"question_id": 757454, "snippet": "math.modf(num)[0]", "intent": "Select a fraction of the positive number on Piton", "rewritten_intent": "Select the fraction of the number `num'"}, {"question_id": 757454, "snippet": "num % 1", "intent": "Select a fraction of the positive number on Piton", "rewritten_intent": "Select the fraction of the number `num'"}, {"question_id": 247377, "snippet": "100 / whole * part", "intent": "Python. Interest function", "rewritten_intent": "Compute how much interest is the number `part' of `whole'"}, {"question_id": 712792, "snippet": "s.title()", "intent": "Make the first letter of each word big (principal)", "rewritten_intent": "Capture the first letter of each word in the row `s'"}, {"question_id": 775089, "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "intent": "How to detect the time spent on each function and the total time spent on the programme", "rewritten_intent": "Measure the time of the `time_work' function"}, {"question_id": 157675, "snippet": "re.findall('(\\d+)', s)", "intent": "How do you find the number in the Python line?", "rewritten_intent": "Find numbers in row `s'"}, {"question_id": 567383, "snippet": "my_tupels = tuple(map(int, input().split(sep)))\n", "intent": "EOF at the time of insertion: SyntaxError: Unexposed EOF when parsing", "rewritten_intent": "Enter the number cortex `my_tupels' from the keyboard to use `sep' as a divider"}, {"question_id": 210870, "snippet": "file_1 = open(file_path, \"w\")\\n\nfile_1.write(str(num))\nfile_1.close()", "intent": "How to write into a file values of variables like integer", "rewritten_intent": "Write the number 'nums' to the file `file_path'"}, {"question_id": 210870, "snippet": "with open(file_path, 'w') as f:\\n\n\\tprint(str(num))\\n", "intent": "How to write into a file values of variables like integer", "rewritten_intent": "Write the number 'nums' to the file `file_path'"}, {"question_id": 681594, "snippet": "res = requests.post(url, json=data)", "intent": "Json post request python", "rewritten_intent": "Send POST request `res' with JSON data `data' to `url'"}, {"question_id": 584129, "snippet": "json.dumps(my_dict, ensure_ascii=False)", "intent": "Russian Coding of JSON Object", "rewritten_intent": "Transform the Russian-language dictionary `my_dict' into JSON"}, {"question_id": 37137, "snippet": "count_values_l1 = Counter(my_list1)\\n\ncount_values_l2 = Counter(my_list2)\\n\nkeys1 = count_values_l1.keys()\\n\nkeys2 = count_values_l2.keys()\\n\ncommon_items = []\\n\nfor key in keys1:\\n\n\\tif key in keys2:\\n\n\\t\\tcommon_items += [key] * min(count_values_l1[key], count_values_l2[key])\n", "intent": "How do you compare two lists?", "rewritten_intent": "Find common elements `common_items' list `my_list1' and list `my_list2'"}, {"question_id": 37137, "snippet": "list(set(my_list1) & set(my_list2))", "intent": "How do you compare two lists?", "rewritten_intent": "Find common elements `common_items' list `my_list1' and list `my_list2'"}, {"question_id": 645227, "snippet": "factors = []\\n\nwhile n % 2 == 0:\\n\n\\tfactors.append(n)\\n\n\\tn = n / 2\\n\\n\n    \nfor i in range(3,int(math.sqrt(n))+1,2):\\n\n\\twhile (n % i == 0):\\n\n\\t\\tfactors.append(i)\\n\n\\t\\tn = n / i\\n\\n\n    \nif n > 2:\\n\n\\tfactors.append(n)", "intent": "Set the number to simple multipliers", "rewritten_intent": "Set the number `n' to simple multipliers `factors'"}, {"question_id": 565846, "snippet": "my_list = [random.randint(val1, val2) for i in range(N)]", "intent": "How do you create a list of random whole numbers using a list listing?", "rewritten_intent": "Generate a list of `my_list' long `N' random values between `val1' and `val2'"}, {"question_id": 801094, "snippet": "os.path.join(os.path.abspath(os.curdir), file_path)", "intent": "Check Python characters", "rewritten_intent": "Get the absolute path for the file `file_path'"}, {"question_id": 925879, "snippet": "my_list[i], my_list[j] = my_list[j], my_list[i]", "intent": "How do you change the location of the elements of the list?", "rewritten_intent": "Change the order of the list elements `my_list' with the indices `i' and `j'"}, {"question_id": 140252, "snippet": "def auth_vk_password():\\n\n\\tsession = vk.AuthSession(app_id=APP_ID, user_login=LOGIN, user_password=PASS)\n\\tfile = open(\"auth_vk.ini\", 'w')\n\\tfile.writelines(session.access_token)\n\\treturn session\n\ntry:\\n\n\\tfile = open(\"auth_vk.ini\", 'r')\\n\nexcept IOError as e:\\n\n\\taccess_token = auth_vk_password().access_token\\n\nelse:\\n\n\\taccess_token = file.readline()\\n\n\nsession = vk.Session(access_token=access_token)\\n\nif session:\\n\n\\tprint('\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!')\\n\nelse:\\n\n\\tprint('\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c!')\\n", "intent": "Authorization of VK API and Python application", "rewritten_intent": "Authorize in VK application with id `APP_ID' with log 'LOGIN' and password `PASS'"}, {"question_id": 649828, "snippet": "my_list = input().split()", "intent": "Enter the list through the space", "rewritten_intent": "Enter & my_list's page list from the keyboard through the space"}, {"question_id": 752179, "snippet": "my_key in my_dict", "intent": "How do you check the key in the dictionary?", "rewritten_intent": "Check the availability of the key `my_key' in the dictionary `my_dict'"}, {"question_id": 752179, "snippet": "if my_key in my_dict:\\n\n\\tprint('\u041a\u043b\u044e\u0447 {my_key} \u0435\u0441\u043b\u0438 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435')\\n\nelse:\\n\n\\tprint('\u041a\u043b\u044e\u0447\u0430 {my_key} \u043d\u0435\u0442 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435')\\n", "intent": "How do you check the key in the dictionary?", "rewritten_intent": "Check the availability of the key `my_key' in the dictionary `my_dict'"}, {"question_id": 540082, "snippet": "filename, file_extension = os.path.splitext(file_path)", "intent": "Definition of file extension in python", "rewritten_intent": "Receive extension `file_extension' of file `file_path'"}, {"question_id": 540082, "snippet": "file_extension= file_path.split('.')[-1]", "intent": "Definition of file extension in python", "rewritten_intent": "Receive extension `file_extension' of file `file_path'"}, {"question_id": 502573, "snippet": "s = s[:s.find(symbol)]", "intent": "Delete all characters after decimal place(,*, \")", "rewritten_intent": "Delete all characters in row `s' after symbol `symbol'"}, {"question_id": 502573, "snippet": "s = s.split(symbol)[0]", "intent": "Delete all characters after decimal place(,*, \")", "rewritten_intent": "Delete all characters in row `s' after symbol `symbol'"}, {"question_id": 452762, "snippet": "class A_heir(A):\\n\n\\tdef __init__(self):\\n\n\\t\\tsuper().__init__()\\n\n        \n\\tdef __call__(self, func_name=\"\", args=[], kwargs={}):\\n\n\\t\\treturn getattr(self, func_name)(*args, **kwargs)\\n\n\nclass B_heir(B):\\n\n\\tdef __init__(self):\\n\n\\t\\tsuper().__init__()\\n\n        \n\\tdef __call__(self, func_name=\"\", args=[], kwargs={}):\\n\n\\t\\treturn getattr(self, func_name)(*args, **kwargs)\\n\n            \na = A_heir()\\n\nb = B_heir()\\n\n\np1 = Process(target=a, kwargs={'func_name': method1})\\n\np2 = Process(target=b, kwargs={'func_name': method2})\\n\np1.start()\\n\np2.start()\\n\n\np1.join()\\n\np2.join()\\n", "intent": "Simultaneous performance of functions in different classes", "rewritten_intent": "Implement in parallel the `method1' method of class `A' and the `method2' method of class B"}, {"question_id": 21825, "snippet": "count_values1 = Counter(my_list1)\\n\ncount_values2 = Counter(my_list2)\\n\n\nkeys1 = list(count_values1.keys())\\n\nkeys2 = list(count_values2.keys())\\n\n\ndiff_list = []\\n\nfor key in set(keys1 + keys2):\\n\n\\tif key in keys1 and key in keys2:\\n\n\\t\\tdiff_list += [key] * abs(count_values1[key] - count_values2[key])\\n\n\\telif key in keys1:\\n\n\\t\\tdiff_list += [key] * count_values1[key]\\n\n\\telif key in keys2:\\n\n\\t\\tdiff_list += [key] * count_values2[key]\\n", "intent": "Python List Discrepancies", "rewritten_intent": "Find the difference `diff_list' of lists `my_list1' and `my_list2'"}, {"question_id": 21825, "snippet": "diff_list = list(set(my_list1)-set(my_list2)) + list(set(my_list2)-set(my_list1))", "intent": "Python List Discrepancies", "rewritten_intent": "Find the difference `diff_list' of lists `my_list1' and `my_list2'"}, {"question_id": 384437, "snippet": "total = 0\\n\nwhile True:\\n\n\\tn = int(input())\\n\n\\tif n == end_sign:\\n\n\\t\\tbreak\\n\n\\ttotal += n\\n", "intent": "Whyle cycle \"Summa of number sequence\"", "rewritten_intent": "Find the sum of the numbers `total' entered from the keyboard, sign the end of the input `end_sign'"}, {"question_id": 513149, "snippet": " s.index(my_char)", "intent": "Python \u266a How do you find the symbol index in the row?", "rewritten_intent": "Find the character position `my_char' in the row `s'"}, {"question_id": 513149, "snippet": " s.find(my_char)", "intent": "Python \u266a How do you find the symbol index in the row?", "rewritten_intent": "Find the character position `my_char' in the row `s'"}, {"question_id": 934453, "snippet": "my_list = list(map(int, input().split()))", "intent": "Introduction of n elements into the same line", "rewritten_intent": "Enter from the number keyboard through a space in the list `my_list'"}, {"question_id": 934453, "snippet": "my_list = [int(a) for a in input().split()]", "intent": "Introduction of n elements into the same line", "rewritten_intent": "Enter from the number keyboard through a space in the list `my_list'"}, {"question_id": 515513, "snippet": "#python-docx-template\\n\ndoc = DocxTemplate(template_path)\\n\ndata = { 'var_name' : \"HELLO WORLD!\" }\\n\ndoc.render(data)\\n\ndoc.save(output_file_path)", "intent": "Python: Creating Word documents in a template", "rewritten_intent": "Detend the word document `output_file_path' by default from the word file `template_path' with JSON data data data"}, {"question_id": 524081, "snippet": "if not my_list:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n\nelse:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n", "intent": "Python's empty list", "rewritten_intent": "Check if empty list `my_list'"}, {"question_id": 524081, "snippet": "if length(my_list) == 0:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n\nelse:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n", "intent": "Python's empty list", "rewritten_intent": "Check if empty list `my_list'"}, {"question_id": 766573, "snippet": "for i in range(1, num):\\n\n\\tprint(*range(i, i*num+1, i), sep='\\t')\\n", "intent": "Python Multiplier Table", "rewritten_intent": "Generate the multiplication table to the number `num'"}, {"question_id": 724582, "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, data=data, files=files)", "intent": "Python+requests: POST Multipart/form-data in form", "rewritten_intent": "Send a POST request with JSON data `data' and file `file_path' on `url'"}, {"question_id": 735924, "snippet": "Counter(s)", "intent": "How do you count how many times a symbol appears in a row?", "rewritten_intent": "Count the characters in the row `s'"}, {"question_id": 735924, "snippet": "{c:s.count(c) for c in set(s)}", "intent": "How do you count how many times a symbol appears in a row?", "rewritten_intent": "Count the characters in the row `s'"}, {"question_id": 504426, "snippet": "my_dict[my_key]", "intent": "Quick search for element in python list", "rewritten_intent": "Get the value of the dictionary `my_dict' by key `my_key'"}, {"question_id": 387249, "snippet": "## -*- coding: utf-8 -*-", "intent": "Python 3 and Russian characters: \"print!\" leads to UnicodeEncodeError: 'ascii' codec can't encode... error", "rewritten_intent": "Set utf-8 encoding for file"}, {"question_id": 66490, "snippet": "s = sep.join(my_list)", "intent": "Conclusion through Python Space", "rewritten_intent": "Transform the list `my_list' to the row `s' with the divider `sep'"}, {"question_id": 66490, "snippet": "s = sep.join(map(str, my_list))", "intent": "Conclusion through Python Space", "rewritten_intent": "Transform the list `my_list' to the row `s' with the divider `sep'"}, {"question_id": 363427, "snippet": "re.sub(r'[^\\w\\s]+|[\\d]+', r'',s)", "intent": "Delete all numbers from the row", "rewritten_intent": "Remove all numbers from line `s'"}, {"question_id": 224298, "snippet": "for c in s:\\n\n\\tprint(ord(c))", "intent": "Presentation of the row as numbers", "rewritten_intent": "Get the character codes of the line's'"}, {"question_id": 182910, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "How do you get Python's html page code?", "rewritten_intent": "Spare HTML page code `code' by reference `url'"}, {"question_id": 715809, "snippet": "def child_func():\\n\n\\tif something_went_wrong:\\n\n\\t\\traise Exception(\"Something went wrong\")\\n\n    \ndef parent_func():\\n\n\\t# ...\\n\n\\ttry:\\n\n\\t\\tchild_func()\\n\n\\texcept Exception as e:\\n\n\\t\\tprint(\"Error:\", e)\\n\n\\t\\treturn", "intent": "Python - how do you interrupt a function from another function?", "rewritten_intent": "Interrupt function `parent_fund' from `child_fund'"}, {"question_id": 850118, "snippet": "class ClassEncoder(json.JSONEncoder):\\n\n\\tdef default(self, obj):\\n\n\\tif isinstance(obj, My_class):\\n\n\\t\\treturn obj.__dict__\\n\n\\treturn json.JSONEncoder.default(self, obj)\\n\n        \njson.dumps(my_obj, cls=ClassEncoder)\\n", "intent": "TypeError: Project of type is not JSON seralizable", "rewritten_intent": "Serialize object `my_obj' of class `My_class'"}, {"question_id": 673692, "snippet": "words = s.split()", "intent": "Split the row into words and print them one at a time.", "rewritten_intent": "Split the row `s' by the words `words'"}, {"question_id": 843929, "snippet": "isinstance(s, str)", "intent": "How do you check the variable for the type of string in Python 3?", "rewritten_intent": "Check whether `s' is a line"}, {"question_id": 705331, "snippet": "my_set = set(my_list)", "intent": "How to turn the list into multiples and vice versa", "rewritten_intent": "Transform the list `my_list' to multiple `my_set'"}, {"question_id": 841014, "snippet": "keyboard.add_hotkey(my_key, my_func)", "intent": "Python 3 how to trace the push on the buttons", "rewritten_intent": "When pressing the key, `my_key' start the function `my_func'"}, {"question_id": 589590, "snippet": "bot = telebot.TeleBot(TOKEN)\\n\n\n@bot.message_handler(commands=[cmd])\\n\ndef add(message):\\n\n\\tbot.send_message(message.chat.id, mess)", "intent": "pyTelegramBotAPI(telebot) Processing and Reception of Requests", "rewritten_intent": "Process the 'cmd' bot' telegram with `TOKEN' and send a message'mess' in response"}, {"question_id": 262786, "snippet": "list(str(num))", "intent": "Disaggregate the number to the digit list", "rewritten_intent": "Disaggregate the number `num' to the level"}, {"question_id": 262786, "snippet": "[int(i) for i in str(num)]", "intent": "Disaggregate the number to the digit list", "rewritten_intent": "Disaggregate the number `num' to the level"}, {"question_id": 313184, "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "intent": "Timer in Python'e: record events the time of which must be maintained", "rewritten_intent": "Measure the time of the `time_work' function"}, {"question_id": 678639, "snippet": "any(map(str.isdigit, s))", "intent": "Checking the rows for numbers", "rewritten_intent": "Check if there are numbers in the row `s'"}, {"question_id": 678639, "snippet": "re.search('\\d+', s)", "intent": "Checking the rows for numbers", "rewritten_intent": "Check if there are numbers in the row `s'"}, {"question_id": 830473, "snippet": "num = int(input().strip())", "intent": "Error \"not all arms peer-to-peer\"", "rewritten_intent": "Count from keyboard number to variable `num'"}, {"question_id": 307354, "snippet": "form = { # \u043f\u0440\u0438\u043c\u0435\u0440 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0441\u043b\u043e\u0432\u0430 \"\u043a\u043e\u0440\u043e\u0432\u0430\"\\n\n    \"11-14\": \"\u043a\u043e\u0440\u043e\u0432\",\\n\n    \"0,5-9\": \"\u043a\u043e\u0440\u043e\u0432\",\\n\n    \"1\": \"\u043a\u043e\u0440\u043e\u0432\u0430\",\\n\n    \"2-4\": \"\u043a\u043e\u0440\u043e\u0432\u044b\",\\n\n}\\n\n\nif n >= 11 and n <= 14:\\n\n\\tprint(n, form[\"11-14\"])\\n\nelse:\\n\n\\ttemp = n % 10\\n\n\\tif temp == 0 or (temp >= 5 and temp <= 9):\\n\n\\t\\tprint(n, form[\"0,5-9\"])\\n\n\\tif temp == 1:\\n\n\\t\\tprint(n, form[\"1\"])\\n\n\\tif temp >=2 and temp <=4:\\n\n\\t\\tprint(n, form[\"2-4\"])\\n", "intent": "Problem: How many cows do they feed on the meadow?", "rewritten_intent": "Select the slope of the word `word' depending on the number `n' by template"}, {"question_id": 773920, "snippet": "my_list = [random.randint(val1, val2) for i in range(N)]", "intent": "Filling the array with random values", "rewritten_intent": "Generate a list of `my_list' random values between `val1' and `val2' long `N'"}, {"question_id": 115592, "snippet": "splitted = [[]]\\n\nfor item in my_list:\\n\n\\tif item == sep:\\n\n\\t\\tsplitted.append([])\\n\n\\telse:\\n\n\\t\\tsplitted[-1].append(item)", "intent": "Python: split the list into a list of lists, by divisional element", "rewritten_intent": "Bundle list `my_list' to list list `splitted' by divider `sep'"}, {"question_id": 158145, "snippet": "my_list = [[val for _ in range(N)] for _ in range(M)]", "intent": "Multidimensional Python arrays", "rewritten_intent": "Generate the list `my_list' of size `M'x'N' filled with `val'"}, {"question_id": 592250, "snippet": "s = 0\\n\nfor x in range(1, n+ 1):\\n\n\\ts += f(x)\\n", "intent": "The counter and cycles for and when (Python) need to write the counter", "rewritten_intent": "Calculate the sum of `n' members of arithmetical progress with a member of the designated function `f(x)'"}, {"question_id": 592250, "snippet": "s = 0\\n\nx = 0\\n\nwhile True:\\n\n\\tx+= 1\\n\n\\ts += f(x)\\n\n\\tif x == n:\\n\n\\t\\tbreak\\n", "intent": "The counter and cycles for and when (Python) need to write the counter", "rewritten_intent": "Calculate the sum of `n' members of arithmetical progress with a member of the designated function `f(x)'"}, {"question_id": 419321, "snippet": "new_date = datetime.strptime(old_date, date_format)", "intent": "Transforming the date between string presentations", "rewritten_intent": "Transform the string date `old_date' into the string view `new_data' format `data_format' using the datame library"}, {"question_id": 419321, "snippet": "locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')\\n\nnew_date = datetime.strptime(old_date, date_format).date()", "intent": "Transforming the date between string presentations", "rewritten_intent": "Transform the string date `old_date' into the string view `new_data' format `data_format' using the datame library"}, {"question_id": 505510, "snippet": "try:\\n\n\\tpassexcept Exception as e:\\n\n\\tprint('\u041e\u0448\u0438\u0431\u043a\u0430:\\n', traceback.format_exc())\\n", "intent": "Python Fail and Stacktrace in the console", "rewritten_intent": "Show error name in thry-catch"}, {"question_id": 505510, "snippet": "try:\\n\n\\tpassexcept Exception as e:\\n\n\\tprint('\u041e\u0448\u0438\u0431\u043a\u0430:\\n', e)\\n", "intent": "Python Fail and Stacktrace in the console", "rewritten_intent": "Show error name in thry-catch"}, {"question_id": 654183, "snippet": "with open (file_path, 'r') as f:\\n\n\\told_data = f.read()\\n\n\nnew_data = old_data.replace(old_s, new_s)\\n\n\nwith open (file_path, 'w') as f:\\n\n\\tf.write(new_data)\\n", "intent": "How do you replace the line in.txt file with Python 3?", "rewritten_intent": "Replace the row `old_s' with the row `new_s' in the file `file_path'"}, {"question_id": 404985, "snippet": "count = 0\\n\ni = -1\\n\nwhile True:\\n\n\\ti = s.find(sub, i+1)\\n\n\\tif i == -1:\\n\n\\t\\tbreak\\n\n\\tcount += 1", "intent": "Calculation of the entry of the overlapping substrate into the row", "rewritten_intent": "Find the number of overlaps of `account' substrate `sub' in the row `s'"}, {"question_id": 193764, "snippet": "# \u0414\u0430\u0439\u0442\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 https://myaccount.google.com/lesssecureapps\nport = 465  # For SSL\\n\nsmtp_server = \"smtp.gmail.com\"\\n\ncontext = ssl.create_default_context()\\n\nwith smtplib.SMTP_SSL(smtp_server, port, context=context) as server:\\n\n\\tserver.login(sender_email, password)\\n\n\\tserver.sendmail(sender_email, receiver_email, message)\\n", "intent": "How to send email to python", "rewritten_intent": "Send a letter with the text `message' to `receiver_email' using a gmail account with the logic `sender_email' and the password `password'"}, {"question_id": 294557, "snippet": "colors = {\\n\n\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\": '\\u001b[31m',\\n\n\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\": '\\u001b[32m',\\n\n\"\u0441\u0438\u043d\u0438\u0439\": '\\u001b[34m',\\n\n\"\u0431\u0435\u043b\u044b\u0439\": '\\u001b[37m',\\n\n\"\u0447\u0435\u0440\u043d\u044b\u0439\": '\\u001b[30m',\\n\n\"\u0436\u0435\u043b\u0442\u044b\u0439\": '\\u001b[33m',\\n\n'reset': '\\033[0m'\\n\n}\\n\nprint('{ colors[color] }{ s }{ colors['reset'] }')", "intent": "Can I draw the Python program's output in color?", "rewritten_intent": "Remove the row `s' in color `color' to the terminal"}, {"question_id": 294557, "snippet": "#import colorama\n#from colorama import Fore\n#from colorama import Style\n\ncolors = {\\n\n\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\": 'RED'\\n,\n\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\": 'GREEN',\\n\n\"\u0441\u0438\u043d\u0438\u0439\": 'BLUE',\\n\n\"\u0431\u0435\u043b\u044b\u0439\": 'WHITE',\\n\n\"\u0447\u0435\u0440\u043d\u044b\u0439\": 'BLACK',\\n\n\"\u0436\u0435\u043b\u0442\u044b\u0439\": 'YELLOW'\\n\n}\\n\nprint(getattr(Fore, colors[color]) + Style.BRIGHT + s + Style.RESET_ALL)", "intent": "Can I draw the Python program's output in color?", "rewritten_intent": "Remove the row `s' in color `color' to the terminal"}, {"question_id": 427051, "snippet": "my_list.reverse()", "intent": "Reversed function() in Piton", "rewritten_intent": "Move List `my_list'"}, {"question_id": 427051, "snippet": "my_list = my_list[::-1]", "intent": "Reversed function() in Piton", "rewritten_intent": "Move List `my_list'"}, {"question_id": 427051, "snippet": "my_list = list(reversed(my_list))", "intent": "Reversed function() in Piton", "rewritten_intent": "Move List `my_list'"}, {"question_id": 789625, "snippet": "my_dict = dict(zip(list_key, list_value))", "intent": "How do you make a dictionary out of two lists?", "rewritten_intent": "Merge the list of keys `list_key' and the list of values `list_value' into the dictionary `my_dict'"}, {"question_id": 789625, "snippet": "my_dict = {list_key[i]: list_value[i] for i in range(len(list_key))}", "intent": "How do you make a dictionary out of two lists?", "rewritten_intent": "Merge the list of keys `list_key' and the list of values `list_value' into the dictionary `my_dict'"}, {"question_id": 1, "snippet": "basename = os.path.basename(file_path)\\n\n\n# Compose attachment\\n\npart = MIMEBase('application', \"octet-stream\")\\n\npart.set_payload(open(file_path ,\"rb\").read() )\\n\nencoders.encode_base64(part)\\n\npart.add_header('Content-Disposition', 'attachment; filename=\"%s\"' % basename)\\n\n\n# Compose message\\n\nmsg = MIMEMultipart()\\n\nmsg['From'] = sender_email\\n\nmsg['To'] = receiver_email\\n\nmsg.attach(part)\\n\n\n# Send mail\\n\nsmtp = SMTP_SSL(smtp_server)\\n\nsmtp.connect(smtp_server, 465)\\n\nsmtp.login(sender_email, password)\\n\nsmtp.sendmail(sender_email, receiver_email, msg.as_string())\\n\nsmtp.quit()\\n", "intent": "How do you send an investment letter from a script on Piton?", "rewritten_intent": "Send an e-mail with the file 'file_path' to `receiver_email' from smtp server `smtp_server' with the logic `sender_email' and password `password'"}, {"question_id": 477678, "snippet": "print(sep.join([s] * n))", "intent": "Remove part of sequence 1 2 2 3 3 3 4 4 4 5 5 5 5 in python 3", "rewritten_intent": "Delete the row `s' `n' once through the divider `sep'"}, {"question_id": 635319, "snippet": "cols = df.iloc[:, indexes]", "intent": "How do you choose the right columns?", "rewritten_intent": "Select `cols' columns with turkeys `list_indexes' pandas dateframe `df'"}, {"question_id": 1085344, "snippet": "total = sum(my_list)", "intent": "how to calculate the sum of the elements in the list using FOR IN", "rewritten_intent": "Find the sum of the numbers `total' list `my_list'"}, {"question_id": 1085344, "snippet": "total = 0\\n\nfor i in my_list:\\n\n\\ttotal += i\\n", "intent": "how to calculate the sum of the elements in the list using FOR IN", "rewritten_intent": "Find the sum of the numbers `total' list `my_list'"}, {"question_id": 759476, "snippet": "max_val = {x: y for x, y in filter(lambda x: my_list[x[0]] == max(my_list.values()), my_list.items())}\n", "intent": "Find maximum value of python dictionary", "rewritten_intent": "Find the maximum sign `max_value' in the dictionary `my_list'"}, {"question_id": 759476, "snippet": "max_val = max(my_list.values())", "intent": "Find maximum value of python dictionary", "rewritten_intent": "Find the maximum sign `max_value' in the dictionary `my_list'"}, {"question_id": 407127, "snippet": "print(*random.sample(set(my_list),n))", "intent": "Conclusion of the list of words randomly without repetition", "rewritten_intent": "Delete 'n' words from the list of `my_list' in random order without repetition"}, {"question_id": 526785, "snippet": "## -*- coding: utf-8 -*-", "intent": "Error in regexpo with Russian Python characters: SyntaxError: (unique error) 'utf-8' codec can't decode by 0xd1", "rewritten_intent": "Set utf-8 encoding for file"}, {"question_id": 446920, "snippet": "my_list.extend(my_tuple)", "intent": "Assignment operator += for lists (place added)", "rewritten_intent": "Add'my_tuple' to list `my_list'"}, {"question_id": 103581, "snippet": "s[:i] + symbol + s[i + 1:]", "intent": "Operation of the replay function", "rewritten_intent": "Replace in row `s' the symbol in the entry `i' with `symbol'"}, {"question_id": 28096, "snippet": "my_list = sorted(my_list)", "intent": "Sorting List", "rewritten_intent": "Select list `my_list'"}, {"question_id": 28096, "snippet": "my_list.sort()", "intent": "Sorting List", "rewritten_intent": "Select list `my_list'"}, {"question_id": 133137, "snippet": "conn = http.client.HTTPConnection(\"ifconfig.me\")\\n\nconn.request(\"GET\", \"/ip\")\\n\nmy_ip = conn.getresponse().read()\\n", "intent": "We need to find out our computer's iPhone address online on Python.", "rewritten_intent": "Get an IP address for `my_ip' computers on the Internet"}, {"question_id": 134564, "snippet": "second_date - first_date", "intent": "The difference between two dates in seconds in Django", "rewritten_intent": "Find how long it took between the dates in datame `first_date' and `second_date'"}, {"question_id": 14349, "snippet": "img = Image.new('RGB', (256, 256 * 3), 'white')\\n\nfor point in points:\\n\n\\tdraw.point(point + img.size,color=\"red\")\\n\n\nimg.show()\\n\n", "intent": "Python chart (point diagram)", "rewritten_intent": "Generate the image by points with the `points' reference list"}, {"question_id": 236635, "snippet": "sys.argv", "intent": "How to Script Python Accept Options", "rewritten_intent": "Get a list of parameters from the command line"}, {"question_id": 230436, "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "intent": "Python Timer", "rewritten_intent": "Measure the time of the `time_work' function"}, {"question_id": 273613, "snippet": "\ntext = \"\"\nwith open(file_path, 'r') as f:\n    for line in f:\n        if not re.search(r\"^({})\".format(prefix), line):\n            text += line\n\nwith open(file_path, 'w') as f:\n    f.write(text)", "intent": "Remove selected strings from the file", "rewritten_intent": "Remove from file `file_path' rows that start with the line `prefix'"}, {"question_id": 9096, "snippet": "Counter(s.split())", "intent": "Frequency of words in the text", "rewritten_intent": "Count words in row `s'"}, {"question_id": 157783, "snippet": "new_num = int(str(num), base) ", "intent": "Python how do you write the translation function from k-ic to decimal?", "rewritten_intent": "convert the number `num' in the base `base' to `new_num' in the decimal number system"}, {"question_id": 224243, "snippet": "con = sqlite3.connect(db_path)\\n\ncur = con.cursor()\\n", "intent": "How does Python program a new database and script it?", "rewritten_intent": "Create a database sqlite3 `file_path'"}, {"question_id": 225896, "snippet": "result = os.popen(cmd, 'r', 1)", "intent": "Start bash from Python 2.7.3.", "rewritten_intent": "Get the data output stream from the console command `cmd' to the file object `result'"}, {"question_id": 319317, "snippet": "my_dict = json.loads(s)", "intent": "\"ValueError: Dictionary extradate sequence effect #0 has ength\" when using dict", "rewritten_intent": "Transform the row `s' to the dictionary `my_dict'"}, {"question_id": 319317, "snippet": "my_dict = dict(ast.literal_eval(s))", "intent": "\"ValueError: Dictionary extradate sequence effect #0 has ength\" when using dict", "rewritten_intent": "Transform the row `s' to the dictionary `my_dict'"}, {"question_id": 235923, "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "intent": "Counting Files to the Variable isn't the end yet.", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 235923, "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Counting Files to the Variable isn't the end yet.", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 235923, "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Counting Files to the Variable isn't the end yet.", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 44503, "snippet": "regexp = re.compile( \"\\s*(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?)\\s*;\", re.M )\\n\nnums = regexp.findall(s)\\n", "intent": "Reading from text file numbers", "rewritten_intent": "Get a list of numbers 'num' from the line `s'"}, {"question_id": 197142, "snippet": "split_regex = re.compile(r'[.|!|?|\u2026]')\\n\nsentences = list(filter(lambda t: t, [t.strip() for t in split_regex.split(s)]))", "intent": "How to divide the text into separate sentences?", "rewritten_intent": "Set the line `s' to the list of proposals `sentences'"}, {"question_id": 166814, "snippet": "print(s, end=\" \")", "intent": "python 2.7, conclusion in the same line", "rewritten_intent": "Show the line `s' without translating the line"}, {"question_id": 69121, "snippet": "exec(open(\"./file_path\").read())\\n\nf()\\n", "intent": "The Challenge of Other Python Scripts", "rewritten_intent": "Call function `f' from file `file_path'"}, {"question_id": 75962, "snippet": "mixer.init()\\n\nmixer.music.load(file_path)\\n\nmixer.music.play()\\n", "intent": "Play mp3 in Python", "rewritten_intent": "Play audio file `file_path'"}, {"question_id": 91763, "snippet": "keys = list(my_dict.keys()).copy()\\n\nfor i in keys:\\n\n    if my_key in my_dict:\n        del my_dict[my_key]\n", "intent": "How to remove a value from a dictionary during a cycle.", "rewritten_intent": "Remove the dictionary element `my_dict' with the key `my_key' inside the cycle for"}, {"question_id": 297129, "snippet": "str(num).encode()", "intent": "Battle operations", "rewritten_intent": "Translate the number `num' to byte"}, {"question_id": 19994, "snippet": "con = pymysql.connect(my_host, user, password, db_name)\\n \nwith con:\\n    \n\\tcur = con.cursor()\\n", "intent": "Interaction with the OBD in Python", "rewritten_intent": "Connect to mysql database `db_name' on host `my_host' with user `user' and password `password'"}, {"question_id": 55256, "snippet": "frm = ''.join([str(i) for i in my_dict.keys()])\\n\nto = ''.join([str(i) for i in my_dict.values()])\\n\ntrantab = str.maketrans(frm, to)\\n\ns = s.translate(trantab)\\n", "intent": "Replace row elements with dictionary values", "rewritten_intent": "Replace the characters in the row `s' in the dictionary `my_dict'"}, {"question_id": 55256, "snippet": "for i, symbol in enumerate(s):\\n\n\\tif symbol in my_dict:\\n\n\\t\\ts = s[:i] + str(my_dict[symbol]) + s[i+1:]\\n", "intent": "Replace row elements with dictionary values", "rewritten_intent": "Replace the characters in the row `s' in the dictionary `my_dict'"}, {"question_id": 105134, "snippet": "def get_upload_path(instance, filename):\\n\n    return os.path.join(\n      \"user_%d\" % instance.owner.id, \"car_%s\" % instance.slug, filename)", "intent": "Dynamic path for upload_to in django model (models.FileField)", "rewritten_intent": "Regenerate the dynamic path to store files at Django upload_to"}, {"question_id": 185524, "snippet": "\" \".join(list(filter( lambda x : not x.endswith(suff), list(s.split()))))", "intent": "Remove elements from the list", "rewritten_intent": "In the line `s' delete the words with the suffix `suff'"}, {"question_id": 294170, "snippet": "globs = globals().copy()\\n\nvar_name = list(filter(lambda x: id(globs[x]) == id(my_var), globs))[0]\\n\nif var_name in globals():\\n\n\\tprint('y')\\n\nelse:\\n\n\\tprint('n')\\n", "intent": "Check the existence of the variable", "rewritten_intent": "Test the existence of a global variable `my_var'"}, {"question_id": 205516, "snippet": "values_by_key  = [x[my_key] for x in dict_list if my_key in x] \n", "intent": "Get all the meanings of the dictionary.", "rewritten_intent": "Get a list of values of `values_by_key' from the list of dictionaries `dict_list' by key `my_key'"}, {"question_id": 45499, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "A simple example of parser htmp page", "rewritten_intent": "Spare HTML page code `code' by reference `url'"}, {"question_id": 292305, "snippet": "os.popen(\"sudo -S %s\"%(command), 'w').write(cmd)", "intent": "How do you use the command module for sub in linex?", "rewritten_intent": "Run command `cmd' on behalf of the administrator in Linux"}, {"question_id": 58045, "snippet": "redirect(url)", "intent": "django redirect", "rewritten_intent": "Redirect to `url' in Django"}, {"question_id": 19319, "snippet": "`x = (window.winfo_screenwidth() - window.winfo_reqwidth()) / 2\\n\ny = (window.winfo_screenheight() - window.winfo_reqheight()) / 2\\n\nwindow.wm_geometry(\"+%d+%d\" % (x, y))\\n\nwindow.mainloop()\\n", "intent": "Location of the window at the centre of Tkinter", "rewritten_intent": "Place Tkinter `Window' window at center"}, {"question_id": 211668, "snippet": "book = xlwt.Workbook()\\n\nsheet1 = book.add_sheet(\"sheet1\")\\n\n\nfor row_index, row_values in enumerate(values):\\n\n\\trow = sheet1.row(row_index)\\n\n\\tfor col_index, col in enumerate(row_values):\\n\n\\t\\tvalue = row_values[col_index]\\n\n\\t\\trow.write(col_index, value)\\n\n\nbook.save(filename)", "intent": "Python output in Excel", "rewritten_intent": "Save the list of values of `valutes' in Excel file `filename'"}, {"question_id": 163083, "snippet": "list(map(lambda x: x[0]+x[1], zip(my_list[0::2], my_list[1::2])))", "intent": "Python Massive and Cycle", "rewritten_intent": "Merge elements of the list `my_list' in rows"}, {"question_id": 62533, "snippet": "s.encode()\n", "intent": "How do you translate the line into bytes into Python 3.2?", "rewritten_intent": "Translate the line `s' to the byte string"}, {"question_id": 215531, "snippet": "my_json = json.loads(s)\n", "intent": "JSON python", "rewritten_intent": "Transform the row `s' to JSON object `my_json'"}, {"question_id": 86126, "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "intent": "Unload the file to the POST server in a way", "rewritten_intent": "Send POST request with file `file_path' on `url'"}, {"question_id": 301251, "snippet": "def stable_running():\\n\n\\ttry:\\n\n\\t\\tmy_f()\\n\n\\texcept ValueError:\\n\n\\t\\tstable_running()\\n", "intent": "How do you start the function again if you get an exception?", "rewritten_intent": "Call function `my_f' in case of error again"}, {"question_id": 1666, "snippet": "hashlib.md5(s.unicode())", "intent": "Python cipher.", "rewritten_intent": "Hack the row `s' using the MD5 algorithm"}, {"question_id": 151750, "snippet": "with open(file_path, 'r') as f:\\n\n\\tpass", "intent": "Collection of data from file: UnicodeEncodeError: 'charmap' codec can't encode charterer", "rewritten_intent": "Open file `file_path' with UTF-8 encoded"}, {"question_id": 271764, "snippet": "strings.sort()", "intent": "Sorting by alphabet and length at once", "rewritten_intent": "Graph the list of rows `strings' by alphabet and length"}, {"question_id": 103067, "snippet": "[math.dist(point, cur_point) for cur_point in points]", "intent": "How quickly do you calculate the distances from one point to all the other points?", "rewritten_intent": "Find distances between `point' and `points' coordinates"}, {"question_id": 306224, "snippet": "l1 = map(lambda x: x.strip(), list(open('test1.txt')))\\n\nl2 = map(lambda x: x.strip(), list(open('test2.txt')))\\n\ndiff_list = list(zip(l1, l2))\\n\n\nfor i, line in enumerate(diff_list):\\n\n\\tif line[0] == line[1]:\\n\n\\t\\tprint('\u0421\u0442\u0440\u043e\u043a\u0438 { i} \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442')\\n\n\\telse:\\n\n\\tprint('\u0421\u0442\u0440\u043e\u043a\u0438 { i} \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442')\\n", "intent": "Comparison of Files", "rewritten_intent": "Compare files `file_path1' and `file_path2' lined"}, {"question_id": 306224, "snippet": "from difflib import ndiff\n\nt1 = open('test1.txt').read().splitlines(1)\nt2 = open('test2.txt').read().splitlines(1)\n\nprint ''.join(ndiff(t1, t2))", "intent": "Comparison of Files", "rewritten_intent": "Compare files `file_path1' and `file_path2' lined"}, {"question_id": 157647, "snippet": "s.replace(old_sub, new_sub, count)", "intent": "Replacement of python text", "rewritten_intent": "Replace the sub-line `old_sub' with `new_sub' in the row `s' `account' once"}, {"question_id": 303166, "snippet": "my_dict = dict([[x[1:-1] for x in s.split(sep)], ])", "intent": "How do you turn the lines into a dictionary?", "rewritten_intent": "Open the row key value `s' to the divider `sep' to the dictionary `my_dict'"}, {"question_id": 80334, "snippet": "win32clipboard.OpenClipboard()\\n\ndata = win32clipboard.GetClipboardData()\\n\nwin32clipboard.CloseClipboard()\\n", "intent": "How do you handle the python buffer?", "rewritten_intent": "Get data from the `data' buffer"}, {"question_id": 101677, "snippet": "num = str(num)\\n\n\nif \".\" in num:\\n\n\\tinteger, tail = num.split(\".\")\\n\n\\ttail = re.sub(r'[0]*$', '', tail)\\n\n\\tif not tail:\\n\n\\t\\tnum = integer\\n\n\\telse:\\n\n\\t\\tnum = float(integer + \".\" + tail)", "intent": "How do you throw zeros on the right?", "rewritten_intent": "Fold minor zeros to the right"}, {"question_id": 135134, "snippet": "time.timezone // 3600", "intent": "How to Get a Time Zone on Python", "rewritten_intent": "Get Time Zone"}, {"question_id": 74955, "snippet": "re.sub(r'[^\\w\\s]', '', s)", "intent": "How can punctuation be removed from Unicode's line?", "rewritten_intent": "Remove puncture marks from line `s'"}, {"question_id": 74955, "snippet": "for p in string.punctuation:\\n\n\\tif p in s:\\n\n\\t\\ts = s.replace(p, '')\\n", "intent": "How can punctuation be removed from Unicode's line?", "rewritten_intent": "Remove puncture marks from line `s'"}, {"question_id": 91006, "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "intent": "Upload file via python to server", "rewritten_intent": "Send POST request with file `file_path' on `url'"}, {"question_id": 202621, "snippet": "result = os.popen(cmd, 'r', 1)", "intent": "Interception of Python console output", "rewritten_intent": "Get the data output stream from the console command `cmd' to the file object `result'"}, {"question_id": 253869, "snippet": "def get_length_items_list(a):\\n\n\\treturn list(map(lambda x: 1 if isinstance(x, list) else 0, a))\\n\n\nlength_my_list = get_length_items_list(my_list)\\n\n\nwhile max(length_my_list) > 0:\\n\n\\tnew_list = []\\n\n\\tfor item in my_list:\\n\n\\t\\tif isinstance(item, list):\n\\t\\t\\tif len(item) > 0:\n\\t\\t\\t\\tnew_list += item\n\\t\\t\\telse:\n\\t\\t\\t\\tnew_list.append(item)\n\n\\tmy_list = new_list\n\\tlength_my_list = get_length_items_list(my_list)", "intent": "How do you break the list into elements?", "rewritten_intent": "Transform the multidimensional list `my_list' into a single-dimensional"}, {"question_id": 300050, "snippet": "s = sep.join(my_list)", "intent": "How do you turn the list into a line?", "rewritten_intent": "Transform the list `my_list' to the row `s' with the divider `sep'"}, {"question_id": 300050, "snippet": "s = \" \".join(map(str, my_list))", "intent": "How do you turn the list into a line?", "rewritten_intent": "Transform the list `my_list' to the row `s' with the divider `sep'"}, {"question_id": 459170, "snippet": "sys.exit(code)", "intent": "Completion of Python program", "rewritten_intent": "Complete program coded `code'"}, {"question_id": 459170, "snippet": "raise SystemExit(code)", "intent": "Completion of Python program", "rewritten_intent": "Complete program coded `code'"}, {"question_id": 52873, "snippet": "chars = list(s)", "intent": "How do you break the row into individual symbols?", "rewritten_intent": "Break the row `s' to the symbol list `chars'"}, {"question_id": 52873, "snippet": "chars = [c for c in s]", "intent": "How do you break the row into individual symbols?", "rewritten_intent": "Break the row `s' to the symbol list `chars'"}, {"question_id": 648454, "snippet": "round(num, n)", "intent": "Fixed number of signs after decimal place in Python", "rewritten_intent": "Round 'num' to `n' digits after decimal place"}, {"question_id": 359110, "snippet": "s = s.replace(' ', '')", "intent": "How do you remove all the blanks from the Python line?", "rewritten_intent": "Remove all blanks from the line `s'"}, {"question_id": 359110, "snippet": "s = ''.join(s.split())", "intent": "How do you remove all the blanks from the Python line?", "rewritten_intent": "Remove all blanks from the line `s'"}, {"question_id": 418982, "snippet": "Counter(my_list)", "intent": "Number of repeat items in the list", "rewritten_intent": "Calculate elements in the list `my_list' in `list_value_counts'"}, {"question_id": 418982, "snippet": "{i: array.count(i) for i in my_list}", "intent": "Number of repeat items in the list", "rewritten_intent": "Calculate elements in the list `my_list' in `list_value_counts'"}, {"question_id": 575604, "snippet": "my_list = [el for el, _ in groupby(my_list)]", "intent": "Removal of the same elements in a sorted sheet (list)", "rewritten_intent": "Remove repeat elements in the sorted list `my_list'"}, {"question_id": 575604, "snippet": "my_list = list(set(my_list))", "intent": "Removal of the same elements in a sorted sheet (list)", "rewritten_intent": "Remove repeat elements in the sorted list `my_list'"}, {"question_id": 397222, "snippet": "math.sqrt(x)", "intent": "How do we find the square root in Python?", "rewritten_intent": "Find a square root of `num'"}, {"question_id": 459401, "snippet": "my_numbers = [int(item) for item in my_number_strs]", "intent": "Translating the list of rows to the list of numbers", "rewritten_intent": "Transform the list of rows `my_number_strs' to the list of numbers `my_numbers'"}, {"question_id": 235938, "snippet": "re.search(sub_s, s)", "intent": "Search Line Substrate", "rewritten_intent": "Check if there is a substrate `my_subs' in the row `s'"}, {"question_id": 235938, "snippet": "sub_s in s", "intent": "Search Line Substrate", "rewritten_intent": "Check if there is a substrate `my_subs' in the row `s'"}, {"question_id": 235938, "snippet": " s.find(sub_s) != -1 ", "intent": "Search Line Substrate", "rewritten_intent": "Check if there is a substrate `my_subs' in the row `s'"}, {"question_id": 427942, "snippet": "count_values_l1 = Counter(my_list1)\\n\ncount_values_l2 = Counter(my_list2)\\n\nkeys1 = count_values_l1.keys()\\n\nkeys2 = count_values_l2.keys()\\n\ncommon_items = []\\n\nfor key in keys1:\\n\n\\tif key in keys2:\\n\n\\t\\tcommon_items += [key] * min(count_values_l1[key], count_values_l2[key])\n", "intent": "Comparison of 2 lists in python", "rewritten_intent": "Find common elements `common_items' list `my_list1' and list `my_list2'"}, {"question_id": 427942, "snippet": "list(set(my_list1) & set(my_list2))", "intent": "Comparison of 2 lists in python", "rewritten_intent": "Find common elements `common_items' list `my_list1' and list `my_list2'"}, {"question_id": 535318, "snippet": "os.getcwd()", "intent": "Python's current directory", "rewritten_intent": "Get the current directory."}, {"question_id": 535318, "snippet": "os.path.abspath(os.curdir)", "intent": "Python's current directory", "rewritten_intent": "Get the current directory."}, {"question_id": 535318, "snippet": "os.path.abspath(__file__)\n\n", "intent": "Python's current directory", "rewritten_intent": "Get the current directory."}, {"question_id": 414593, "snippet": "os.path.exists(file_path)", "intent": "How do you check the existence of the file?", "rewritten_intent": "Check if file `file_path' exists"}, {"question_id": 50064, "snippet": "with open(path, \"w\") as file:\\n\n\\tprint(data, file=file)", "intent": "Record list in txt file in python", "rewritten_intent": "Write data `data' into file `file_path'"}, {"question_id": 50064, "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tprint(data, file=file)", "intent": "Record list in txt file in python", "rewritten_intent": "Write data `data' into file `file_path'"}, {"question_id": 507330, "snippet": "my_key = None\\n\nfor k, v in my_dict.items():\\n\n\\tif v == val:\\n\n\\t\\tmy_key = k\\n\n\\t\\tbreak", "intent": "Get a key by value", "rewritten_intent": "Get the key `my_key' from the dictionary `my_dict' by `val'"}, {"question_id": 507330, "snippet": "reversed_dict = dict(zip(my_dict.values(), my_dict.keys()))\\n\nmy_key = reversed_dict[val]", "intent": "Get a key by value", "rewritten_intent": "Get the key `my_key' from the dictionary `my_dict' by `val'"}, {"question_id": 30653, "snippet": "num % 2 == 0", "intent": "How do you check the number for evenness?", "rewritten_intent": "Check number 'num' for evenness"}, {"question_id": 299026, "snippet": "my_list.reverse()", "intent": "Flip List", "rewritten_intent": "Move List `my_list'"}, {"question_id": 299026, "snippet": "my_list = my_list[::-1]", "intent": "Flip List", "rewritten_intent": "Move List `my_list'"}, {"question_id": 299026, "snippet": "my_list = list(reversed(my_list))", "intent": "Flip List", "rewritten_intent": "Move List `my_list'"}, {"question_id": 81572, "snippet": "my_list.remove(item)", "intent": "How do you remove the element of the array in the python?", "rewritten_intent": "Remove element `item' from list `my_list'"}, {"question_id": 81572, "snippet": "del my_list[my_list.index(item)]", "intent": "How do you remove the element of the array in the python?", "rewritten_intent": "Remove element `item' from list `my_list'"}, {"question_id": 293, "snippet": "## -*- coding: utf-8 -*-", "intent": "Why doesn't the script on Piton understand the youth?", "rewritten_intent": "Set utf-8 encoding for file"}, {"question_id": 592812, "snippet": "s_list = s.strip().split(sep)", "intent": "How do you divide the line into a list of words divided by spaces?", "rewritten_intent": "Split row `s' into rows `s_list' by divider `sep'"}, {"question_id": 506457, "snippet": "digits = [int(i) for i in str(num)]", "intent": "Disaggregate the number into the components", "rewritten_intent": "Disaggregate the number `num' to the list of numbers `digits'"}, {"question_id": 597892, "snippet": "with open(file_path) as file:\\n\n\\tlines = [line.rstrip() for line in file.readlines()]", "intent": "How to remove the symbol of the new line (\\n) when reading the lines from the file", "rewritten_intent": "Read the lines from the file `file_path' to `lines' without moving the line"}, {"question_id": 251048, "snippet": "for x in my_list:\\n \n\\tprint(x)", "intent": "How do you line up the whole Python list?", "rewritten_intent": "Set the list `my_list' lined up"}, {"question_id": 251048, "snippet": "print('\\n'.join(my_list))", "intent": "How do you line up the whole Python list?", "rewritten_intent": "Set the list `my_list' lined up"}, {"question_id": 251048, "snippet": "print('\\n'.join(list(map(str, my_list))))", "intent": "How do you line up the whole Python list?", "rewritten_intent": "Set the list `my_list' lined up"}, {"question_id": 33868, "snippet": "f = codecs.open(file_path, \"r\", \"utf_8_sig\" )\ndata = f.read()\nf.close()", "intent": "Python code error: readline() when reading utf-8 file swears: 'charmap' codec can't decode byte", "rewritten_intent": "Read 'file_path' with utf-8 encoded to `data'"}, {"question_id": 33868, "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tdata = f.read()", "intent": "Python code error: readline() when reading utf-8 file swears: 'charmap' codec can't decode byte", "rewritten_intent": "Read 'file_path' with utf-8 encoded to `data'"}, {"question_id": 248267, "snippet": "s = ' '.join(s.split())", "intent": "Remove unnecessary blanks from the line", "rewritten_intent": "Remove unnecessary blanks from the line `s'"}, {"question_id": 607802, "snippet": "n = int(str(num), from_base)\\n\nalphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n\nnew_num = \"\"\\n\nwhile n > 0:\\n\n\\tn, m = divmod(n, to_base)\\n\n\\tnew_num += alphabet[m]\\n\nnum = new_num[::-1]", "intent": "Transfer from any counting system to any", "rewritten_intent": "Move the number `num' from `from_base' to `to_base'"}, {"question_id": 585259, "snippet": "isinstance(num, int)", "intent": "Full number verification - condition for verification of data entered by the user", "rewritten_intent": "Check that the number `num' is"}, {"question_id": 446226, "snippet": "reg = re.compile('[^a-zA-Z ]')\\n\ns = reg.sub('', s))", "intent": "We need to clear the row of foreign characters.", "rewritten_intent": "Clear the row `s' of unnecessary symbols"}, {"question_id": 446226, "snippet": "good_chars = (ascii_letters + whitespace).encode()\\n\njunk_chars = bytearray(set(range(0x100)) - set(good_chars))\\n\ns = s.encode('ascii', 'ignore').translate(None, junk_chars).decode()", "intent": "We need to clear the row of foreign characters.", "rewritten_intent": "Clear the row `s' of unnecessary symbols"}, {"question_id": 542210, "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "intent": "Reading from file lined and recording to array", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 542210, "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Reading from file lined and recording to array", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 542210, "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Reading from file lined and recording to array", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 60925, "snippet": "with urllib.request.urlopen(link) as url:\\n\n\\tdownloaded_file = url.read()\\n\n\\twith open(file_path, \"wb\") as f:\\n\n\\t\\tf.write(downloaded_file)", "intent": "Upload file through urllib", "rewritten_intent": "download the file by `link' in `file_path'"}, {"question_id": 274131, "snippet": "with open(file_path,'r') as f:\\n\n\\ttext = f.read()\\n\n\nif word in text:\\n\n\\tprint('\u0421\u043b\u043e\u0432\u043e { word } \u0435\u0441\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435')\\n\nelse:\\n\n\\tprint('\u0421\u043b\u043e\u0432\u0430 {word} \u043d\u0435\u0442 \u0432 \u0444\u0430\u0439\u043b\u0435')\\n", "intent": "Search for Word in File", "rewritten_intent": "Find word `word' in file `file_path'"}, {"question_id": 505115, "snippet": "words = s.split()\nwords.sort()", "intent": "Transforming the line to a list with sorting in lexicographic order", "rewritten_intent": "Transform the row `s' to the list of words `words' and sort"}, {"question_id": 565252, "snippet": "my_symbol = chr(char_code)", "intent": "Passing Python alphabet", "rewritten_intent": "Get the symbol `my_symbol' from its code `char_code'"}, {"question_id": 509576, "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tpass", "intent": "Coding problem in the file: UnicodeEncodeError: 'charmap' codec can't encode recorder '\\u039a'", "rewritten_intent": "Open file `file_path' to record utf-8 encoded to variable f"}, {"question_id": 509576, "snippet": "f = open(file_path,'a', encoding='utf-8')", "intent": "Coding problem in the file: UnicodeEncodeError: 'charmap' codec can't encode recorder '\\u039a'", "rewritten_intent": "Open file `file_path' to record utf-8 encoded to variable f"}, {"question_id": 42621, "snippet": "sys.path.append(my_path)\n", "intent": "How do sys.path add relative paths to search for modules?", "rewritten_intent": "Add a path `my_path' to search for modules"}, {"question_id": 615741, "snippet": "re.search(r\"\\b{}\\b\".format(word), s)", "intent": "Search Python", "rewritten_intent": "Check whether there is a word `word' in the row `s'"}, {"question_id": 615741, "snippet": "word in s.split()", "intent": "Search Python", "rewritten_intent": "Check whether there is a word `word' in the row `s'"}, {"question_id": 500957, "snippet": "new_matrix = matrix.transpose()", "intent": "Translating matrix (numpy array) to python", "rewritten_intent": "Translate matrix `matrix' to matrix `new_matrix'"}, {"question_id": 500957, "snippet": "new_matrix = matrix.T", "intent": "Translating matrix (numpy array) to python", "rewritten_intent": "Translate matrix `matrix' to matrix `new_matrix'"}, {"question_id": 500957, "snippet": "new_matrix = []\\n\nfor i in range(len(matrix[0])):\\n\n\\tnew_matrix.append(list())\\n\n\\tfor j in range(len(matrix)):\\n\n\\t\\tnew_matrix[i].append(matrix[j][i])\\n", "intent": "Translating matrix (numpy array) to python", "rewritten_intent": "Translate matrix `matrix' to matrix `new_matrix'"}, {"question_id": 116074, "snippet": "my_list = [[input() for _ in range(cols)] for i in range(rows)]", "intent": "Introduction and withdrawal of two-dimensional array(HYD)", "rewritten_intent": "Fill in the two-dimensional array `my_list' of `rows' rows and `cols' columns from the keyboard"}, {"question_id": 116074, "snippet": "my_list = [[input().strip().split() for _ in range(cols)] for i in range(rows)]", "intent": "Introduction and withdrawal of two-dimensional array(HYD)", "rewritten_intent": "Fill in the two-dimensional array `my_list' of `rows' rows and `cols' columns from the keyboard"}, {"question_id": 116074, "snippet": "my_list = []\\n\nfor r in range(rows):\\n\n]tcur_row = []\\n\n\\tfor c  in range(cols):\\n\n\\t\\tval = input()\\n\n\\t\\tcur_row.append(val)\\n\n\\tmy_list.append(cur_row)\\n", "intent": "Introduction and withdrawal of two-dimensional array(HYD)", "rewritten_intent": "Fill in the two-dimensional array `my_list' of `rows' rows and `cols' columns from the keyboard"}, {"question_id": 786730, "snippet": "df = df.loc[cond]", "intent": "Remove rows in DataFrame that satisfy condition", "rewritten_intent": "Remove from the dateframe `df' line by condition `cond'"}, {"question_id": 528474, "snippet": "OrderedDict(sorted(my_dict.items(), key=lambda t: t[0]))", "intent": "Sorting up the dictionary keys", "rewritten_intent": "Select the dictionary `my_dict' by keys to increase"}, {"question_id": 229015, "snippet": "## -*- coding: utf-8 -*-", "intent": "Python 2.7 coding problems", "rewritten_intent": "Set utf-8 encoding for file"}, {"question_id": 517085, "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tpass", "intent": "Python: 'charmap' codec can't decode byte 0x98", "rewritten_intent": "Open file `file_path' to record utf-8 encoded to variable f"}, {"question_id": 517085, "snippet": "f = open(file_path,'a', encoding='utf-8')", "intent": "Python: 'charmap' codec can't decode byte 0x98", "rewritten_intent": "Open file `file_path' to record utf-8 encoded to variable f"}, {"question_id": 690089, "snippet": "res = requests.post(url, json=data) \\n\nprint(res.text)\n", "intent": "POST request in python", "rewritten_intent": "Send a POST request with JSON data `data' on `url'"}, {"question_id": 550742, "snippet": "count_lines = sum(1 for line in open(file_path, 'r'))", "intent": "Delete the number of rows in the file", "rewritten_intent": "Select the number of rows `account_lines' in the file `file_path'"}, {"question_id": 928295, "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "intent": "Reading file lined up in Python", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 928295, "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Reading file lined up in Python", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 928295, "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Reading file lined up in Python", "rewritten_intent": "Read by line from file `file_path' to list `my_list'"}, {"question_id": 255207, "snippet": "## -*- coding: utf-8 -*-", "intent": "Python is coded problem utf-8.", "rewritten_intent": "Set utf-8 encoding for file"}, {"question_id": 777723, "snippet": "s.replace(sub_s, \"\")\n", "intent": "How do you remove a certain symbol from the line?", "rewritten_intent": "Remove substrate `sub_s' from line `s'"}, {"question_id": 466658, "snippet": "sock.send(mess.encode())", "intent": "Error when connecting the scoop to the server: a bytes-lake object is requered, not'str'", "rewritten_intent": "Send message `mess' to sock'"}, {"question_id": 422461, "snippet": "my_list = [value for value in my_list if value]\n", "intent": "Remove empty Python list elements", "rewritten_intent": "Remove empty elements from list `my_list'"}, {"question_id": 422461, "snippet": "my_list = [value for value in my_list if value != [None]]\n", "intent": "Remove empty Python list elements", "rewritten_intent": "Remove empty elements from list `my_list'"}, {"question_id": 533108, "snippet": "Counter(my_list)", "intent": "How do we find all the duplicates on the list and the number of duplicates?", "rewritten_intent": "Calculate elements in the list `my_list' in `list_value_counts'"}, {"question_id": 533108, "snippet": "{i: array.count(i) for i in my_list}", "intent": "How do we find all the duplicates on the list and the number of duplicates?", "rewritten_intent": "Calculate elements in the list `my_list' in `list_value_counts'"}, {"question_id": 594690, "snippet": "alpha = ' abcdefghijklmnopqrstuvwxyz'\\n\nnew_s = ''\\n\nfor c in s:\\n\n\\tnew_s += alpha[(alpha.index(c) + shift) % len(alpha)]\n", "intent": "Cesar Python Code", "rewritten_intent": "Encode the row `s' to the line `new_s' by Caesar's cipher with shift `shift'"}, {"question_id": 424441, "snippet": "s == s[::-1]", "intent": "Python's mission is \"Palindrome.\"", "rewritten_intent": "Check whether the line `s' is a palindrome"}, {"question_id": 424441, "snippet": "s == reversed(s)", "intent": "Python's mission is \"Palindrome.\"", "rewritten_intent": "Check whether the line `s' is a palindrome"}, {"question_id": 630116, "snippet": "derivative(my_f, x)", "intent": "Python derivative location", "rewritten_intent": "Find a derivative of `d' functions `my_f' at `x' point"}, {"question_id": 577060, "snippet": "s = s[:n] + new_char + s[n+1:]", "intent": "Replace character by line index: TypeError:'str' target does not support it signment", "rewritten_intent": "Replace the symbol with the index `n' in the row `s' with `new_char'"}, {"question_id": 406558, "snippet": "os.system(img_path)\n", "intent": "How do you open a picture through Python?", "rewritten_intent": "Open image of `img_path' in the conductor"}, {"question_id": 406558, "snippet": "os.startfile(img_path)\n", "intent": "How do you open a picture through Python?", "rewritten_intent": "Open image of `img_path' in the conductor"}, {"question_id": 458373, "snippet": "list(s)", "intent": "Split Python 3 word by symbol", "rewritten_intent": "Break the row `s' to the symbol list `chars'"}, {"question_id": 458373, "snippet": "[c for c in s]", "intent": "Split Python 3 word by symbol", "rewritten_intent": "Break the row `s' to the symbol list `chars'"}, {"question_id": 879670, "snippet": "s = s[:i] + s[i+1:]", "intent": "How to remove the symbol from the index line", "rewritten_intent": "Remove the symbol with the index `i' from the line `s'"}, {"question_id": 119418, "snippet": "common_dict = {}\\n\nfor cur_dict in dicts:\\n\n\\tfor key in cur_dict:\\n\n\\t\\tif key not in common_dict:\\n\n\\t\\t\\tcommon_dict[key] = cur_dict[key]\\n\n\\t\\t\\tcontinue\\n\n\n\\t\\tif not isinstance(common_dict[key], list):\\n\n\\t\\\\ttcommon_dict[key] = [common_dict[key]] + [cur_dict[key]]\\n\n\\t\\t\\tcontinue\\n\n\n\\t\\tcommon_dict[key] += [cur_dict[key]]\\n", "intent": "Forming a dictionary with the same keys", "rewritten_intent": "Merge the list of dictionaries `dicts' with the same keys into the common dictionary `common_dict'"}, {"question_id": 60790, "snippet": "lib = CDLL('some.dll')", "intent": "Can you connect the DLL to the python?", "rewritten_intent": "Connect dll file `filepath' to the variable `lib'"}, {"question_id": 299217, "snippet": "session = requests.Session()\nresponse = session.get('http://google.com')\ncookies = session.cookies.get_dict()", "intent": "Authorisation on the website", "rewritten_intent": "Get cookie 'cookies' from `url'"}, {"question_id": 65166, "snippet": " inspect.getargspec(f)", "intent": "How do you know the number of arguments that are transferred?", "rewritten_intent": "Receive an argument specification of the function `f'"}, {"question_id": 206151, "snippet": "result = os.popen(cmd, 'r', 1)", "intent": "Start Windows Commands from Python: As a systeminfo output of the command to insert into the variable", "rewritten_intent": "Get the data output stream from the console command `cmd' to the file object `result'"}, {"question_id": 118927, "snippet": "list(my_tuple)", "intent": "How to Copy the Cortage to the List", "rewritten_intent": "Transform'my_tuple' to list"}, {"question_id": 50821, "snippet": "param = '-n' if platform.system().lower()=='windows' else '-c'\\n\ncommand = ['ping', param, '1', host]\\n\nprint(subprocess.call(command) == 0)\\n", "intent": "Ping the range of networks", "rewritten_intent": "Purchasing `host' website"}, {"question_id": 78160, "snippet": "def Get(event):\\n\n\\ti = event.widget.curselection()\\n\n\nl.bind(\"<<ListboxSelect>>\", Get)\\n", "intent": "Listbox Selection Index", "rewritten_intent": "Receive the index `i' of the selected element tkinter sheetbox `l'"}, {"question_id": 175425, "snippet": "os.environ('username').decode(my_encode)", "intent": "Codes of the variables of the environment", "rewritten_intent": "Set the coder `my_encode' for user environment variables `username'"}, {"question_id": 70512, "snippet": "MyForm(instance=user)\n", "intent": "Automatic filling-in of form in Django Temple", "rewritten_intent": "Fill out the Django `MyForm' form with user data `user'"}, {"question_id": 141157, "snippet": "my_var = my_func()", "intent": "Applying the variable result of a function", "rewritten_intent": "Assign the variable `my_var' output of the function `my_fund'"}, {"question_id": 209059, "snippet": "re.sub(' +', my_symbol, my_string_string)", "intent": "Routine to replace the spaces by a decimal place", "rewritten_intent": "Replace the gaps in the row `my_string' with the symbol `my_symbol'"}, {"question_id": 256777, "snippet": "words=dict(zip(old_data, new_data))\\n\nfor word in words:\\n\n\\ts = re.sub(r\"\\b{}\\b\".format(word), words[word], s)\\n", "intent": "Replacement in the list of words file", "rewritten_intent": "Replace the list of words `old_words' with the list of words `new_words' in the row `s'"}, {"question_id": 112581, "snippet": "def search(root,key):\\n\n     \n\\tif root is None or root.val == key:\\n\n\\t\\treturn root\n \n\\tif root.val < key:\\n\n\\t\\treturn search(root.right,key)\\n\n   \n\\treturn search(root.left,key)\n\nsearch(root,val)", "intent": "Searching for an element in a binary tree", "rewritten_intent": "Find a node equal to `val' in the binary tree `tree'"}, {"question_id": 186169, "snippet": "l = len(a)\\n\nfor k in range(l-1): \\n\n\\tfor i in range(l-1):\\n\n\\t\\tif a[i][i] < a[i+1][i+1]:\\n\n\\t\\t\\ta[i][i],a[i+1][i+1] = a[i+1][i+1],a[i][i]\\n", "intent": "Python Splitting Matrix Elements", "rewritten_intent": "Select elements on the main diagonal of the square matrix `a' by loss"}, {"question_id": 186169, "snippet": "l = len(a)\\n\nitems = [a[i][i] for i in range(l)]\\n\nitems.sort(reverse=True)\\n\nfor i in range(l):\\n\n\\ta[i][i] = items[i]\\n", "intent": "Python Splitting Matrix Elements", "rewritten_intent": "Select elements on the main diagonal of the square matrix `a' by loss"}, {"question_id": 189166, "snippet": "os.popen(cmd, 'r', 1)", "intent": "Python launch of console program", "rewritten_intent": "Run console command `cmd'"}, {"question_id": 189166, "snippet": "PIPE = subprocess.PIPE\nsubprocess.Popen(cmd, shell = True)", "intent": "Python launch of console program", "rewritten_intent": "Run console command `cmd'"}, {"question_id": 168100, "snippet": "from turtle import *\\n\nspeed(\"fastest\")\\n\n\ndef sierpinski(l,n):\\n\n\\tif n==0:\\n\n\\t\\tfor i in range(0,3):\\n\n\\t\\t\\tfd(l)\\n\n\\t\\t\\tleft(120)\\n\n\\telse:\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tfd(l/2)\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tbk(l/2)\\n\n\\t\\tleft(60)\\n\n\\t\\tfd(l/2)\\n\n\\t\\tright(60)\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tleft(60)\\n\n\\t\\tbk(l/2)\\n\n\\t\\tright(60)\\n\n\nsierpinski(l, n)\\n", "intent": "Python Triangles", "rewritten_intent": "Draw `n' fractal triangles with side `l'"}, {"question_id": 291044, "snippet": "btn.bind(\"<Button-1>\", lambda event: win.destroy())", "intent": "Close Mode window on event", "rewritten_intent": "Close the model window `win' by pressing the `btn' button on Tkinter"}, {"question_id": 215979, "snippet": "win.withdraw()", "intent": "Tkinter: How to create a daughter's window and hide a parent's?", "rewritten_intent": "Hide Thinter `win' window"}, {"question_id": 160158, "snippet": "cursor.execute('insert into {table1} select * from {table2}')", "intent": "Copying all entries from one table to another", "rewritten_intent": "Copy the data from table `table1' to table `table2' from the database with `cursor'"}, {"question_id": 298270, "snippet": "s.encode('unicode_escape')", "intent": "How do you screen specials when you create a catalog?", "rewritten_intent": "Screen specifics in row `s'"}, {"question_id": 189042, "snippet": "\\tdef closeEvent(self, event):\\n\n\\t\\tif self.check_box.isChecked():\\n\n\\t\\t\\tevent.ignore()\\n\n\\t\\t\\tself.hide()\\n\n\\t\\t\\tself.tray_icon.showMessage(\n                \"Tray Program\",\n                \"Application was minimized to Tray\",\n                QSystemTrayIcon.Information,\n                2000\n            )\\n\n", "intent": "How to move the program to three without being displayed in the taskbar", "rewritten_intent": "Remove PyQt `win' window to three by pressing the cross"}, {"question_id": 108618, "snippet": "t = Text(root)\nt.pack()\nt.insert(END, s)", "intent": "Building seal at Tkinter.Text()", "rewritten_intent": "Print the row `s' on Tkinter in the window `Root'"}, {"question_id": 72284, "snippet": "list(filter(f, my_list))", "intent": "Python, remove element from array", "rewritten_intent": "Get elements of the list `my_list' that satisfy functions `f'"}, {"question_id": 83341, "snippet": "dicts.sort(key=lambda x: x[key])", "intent": "Sorting objects", "rewritten_intent": "Select the list of dictionaries `dicts' by key `key'"}, {"question_id": 280734, "snippet": "data = open(filepath, 'rb').read(24)\nprint(struct.unpack('<I', data[4:8]))", "intent": "Distribution of dbf files using Python", "rewritten_intent": "Unload dbf file `filepath'"}, {"question_id": 30683, "snippet": "with open(filepath) as f:\\n\n\\tlines = f.readlines()[1::2]", "intent": "How do you get the odd lines out of the file?", "rewritten_intent": "Get a list of odd lines of `lines' file `filepath'"}, {"question_id": 30683, "snippet": "with open(filepath) as file:\\n\n\\tlines = [i.rstrip() for i in itertools.islice(file, 0, None, 2)]", "intent": "How do you get the odd lines out of the file?", "rewritten_intent": "Get a list of odd lines of `lines' file `filepath'"}, {"question_id": 241337, "snippet": "urllib.parse.quote(s)", "intent": "How do you process cyrillic symbols in urllib.request.urlopen()?", "rewritten_intent": "Transform the cyrillic line `s' into a row of special features for http request"}, {"question_id": 241337, "snippet": "urllib.parse.quote_plus(s)", "intent": "How do you process cyrillic symbols in urllib.request.urlopen()?", "rewritten_intent": "Transform the cyrillic line `s' into a row of special features for http request"}, {"question_id": 64496, "snippet": "(pub, priv) = rsa.newkeys(512)", "intent": "Open Key Identifier", "rewritten_intent": "Generate public key `pub' and private key `priv' for RSA encryption"}, {"question_id": 124756, "snippet": "proxyDict = {\\n\n\\t'http': proxy # \"212.254.22.52:80\"\\n\n}\\n\n\nr = requests.get('http://icanhazip.com/', proxies=proxyDict)\\n\n\nif r.status_code == 200:\\n\n\\tif r.text != \"restricted to vpn\":\\n\n\\t\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n\n\\telse:\\n\n\\t\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n\nelse:\\n\n\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n", "intent": "How do you check proxies for performance?", "rewritten_intent": "Check if Proxi'proxy's working."}, {"question_id": 121512, "snippet": "my_dict[key]  ==  my_var", "intent": "How to compare the value of a dictionary to a variable.", "rewritten_intent": "Check whether the value of the dictionary element `my_dict' with the key `key' value in the variable `my_var'"}, {"question_id": 119187, "snippet": "wallpaper = bytes(wallpaper_path, 'utf-8')\\n\nctypes.windll.user32.SystemParametersInfoA(20, 0, wallpaper, 3)\\n", "intent": "Installation of Python wallpapers", "rewritten_intent": "Set the image of `wallpaper_path' as desktop wallpaper"}, {"question_id": 13119, "snippet": "\npop3server = poplib.POP3_SSL('pop.gmail.com')  # open connection\\n\nprint(pop3server.getwelcome())  # show welcome message\\n\npop3server.user(username)\\n\npop3server.pass_(password)\\n\npop3info = pop3server.stat()  # access mailbox status\\n\nmailcount = pop3info[0]  # toral email\\n\nmessages = []\\n\nfor i in range(mailcount):\\n\n\\tfor message in pop3server.retr(i + 1)[1]:\\n\n\\t\\tmessages.append(message)\\n\npop3server.quit()\\n", "intent": "Python and poplib problem with receiving letters", "rewritten_intent": "Get e-mails from the gmail server with the logic `username' and the password `password'"}, {"question_id": 78491, "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "intent": "How do you download the file to the website via Python?", "rewritten_intent": "Upload file `file_path' to server `url'"}, {"question_id": 196630, "snippet": "my_com_port = serial.Serial(com, speed, dsrdtr = 1, timeout = 0)", "intent": "How can you convey the value of the variable \"x\" arduino?", "rewritten_intent": "Connect to serial port `com' at `speed'"}, {"question_id": 71961, "snippet": "win32api.SetCursorPos(coord)", "intent": "How do you fake the key pressing and the movement of a mouse?", "rewritten_intent": "Move mouse navigator to coordinates `coord'"}, {"question_id": 316065, "snippet": "(n & (n-1) == 0) and n != 0", "intent": "How to verify that the variable is......................................................", "rewritten_intent": "Check whether the number `n' is 2"}, {"question_id": 280539, "snippet": "pass = getpass.getpass(prompt='Password: ', stream=None)", "intent": "Hiding Python 3 console input", "rewritten_intent": "Enter password `pass' from keyboard"}, {"question_id": 73158, "snippet": "def Get(event):\\n\n\\ti = event.widget.curselection()\\n\n\nl.bind(\"<<ListboxSelect>>\", Get)\\n", "intent": "How do you define the selected item from the list at Tkinter.ListBox?", "rewritten_intent": "Receive the index `i' of the selected element tkinter sheetbox `l'"}, {"question_id": 205664, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "How to unload html with Python standard tools?", "rewritten_intent": "Spare HTML page code `code' by reference `url'"}, {"question_id": 300767, "snippet": "strings_dict = dict([x[0].strip().split(sep) for x in strings])", "intent": "Transform the string array to the dictionary", "rewritten_intent": "Transform the string array `strings' to the dictionary `strings_dict' by the divider `sep'"}, {"question_id": 127208, "snippet": "with open(filepath, 'r') as f:\\n\n\\tlines = [i for i in f.readlines() if not i.startswith('[')]\\n\n\\tp = re.compile('(?P<key>\\S*(?==))\\S*(?P<znah>(?<==)\\S*)')\\n\n\\tres = {}\\n\n\\tfor line in lines:\\n\n\\t\\tparsed = re.findall(p, line)[0]\\n\n\\t\\tres[parsed[0]] = parsed[1]\\n", "intent": "Python regexp: Parsing ini-file", "rewritten_intent": "Open the ini file `filepath' into the dictionary `res'"}, {"question_id": 316488, "snippet": "with open(filepath) as f:\\n\n\\tnums = list(map(int, f.read().split()))\\n", "intent": "Python: How do you convert lines when you import them from a file?", "rewritten_intent": "Read the list of numbers `nums' from the file `filepath'"}, {"question_id": 77855, "snippet": "res = requests.post(url, json=data)", "intent": "Working with web form post", "rewritten_intent": "Send POST request `res' with JSON data `data' to `url'"}, {"question_id": 25811, "snippet": "for a in arrs:\\n\n\\tprint(a)\\n", "intent": "Conclusion of values from a two-dimensional array", "rewritten_intent": "Bring the 2D array 'arrs' to the screen"}, {"question_id": 25811, "snippet": "for a in arrs:\\n\n\\tfor i in a:\\n\n\\t\\tprint(i, end=\" \")\\n\n\\tprint()\\n", "intent": "Conclusion of values from a two-dimensional array", "rewritten_intent": "Bring the 2D array 'arrs' to the screen"}, {"question_id": 54032, "snippet": "num = random.randint(num_start, num_end)", "intent": "How do you get a random number in the interval?", "rewritten_intent": "Receive random numbers `num' between `num_start' and `num_end'"}, {"question_id": 124837, "snippet": "win32api.keybd_event(ord(key), 0, 0,0)", "intent": "How do you make a key-press simulation?", "rewritten_intent": "Press key `key'"}, {"question_id": 124837, "snippet": "pyautogui.press('s')", "intent": "How do you make a key-press simulation?", "rewritten_intent": "Press key `key'"}, {"question_id": 71878, "snippet": "x = list(enumerate(l))\\n\nrandom.shuffle(x)\\n\nindices, l = zip(*x)\\n", "intent": "How do you mix the list by keeping the indices?", "rewritten_intent": "Mix list 'l' by saving the reference indices `indices'"}, {"question_id": 87835, "snippet": "for out_i, item in enumerate(a):\\n\n\\tfor inner_i, sub_item in enumerate(item):\\n\n\\t\\tif sub_item in my_dict:\\n\n\\t\\t\\ta[out_i][inner_i] = my_dict[sub_item]\\n", "intent": "Substitution of array elements by array", "rewritten_intent": "Replace the attached lists of the list `a' by the dictionary `my_dict'"}, {"question_id": 306126, "snippet": "pattern = r\"^[-\\w\\.]+@([-\\w]+\\.)+[-\\w]{2,4}$\"\n\nif re.match(pattern, email) is not None:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\")\nelse:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\"", "intent": "Email validation at Python", "rewritten_intent": "Check whether the line `email' is e-mail"}, {"question_id": 306126, "snippet": "pattern = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n\nif re.match(pattern, email) is not None:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\")\nelse:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\"", "intent": "Email validation at Python", "rewritten_intent": "Check whether the line `email' is e-mail"}, {"question_id": 82882, "snippet": "root = Tkinter.Tk()\nfonts = list(tkFont.families())", "intent": "Python fonts", "rewritten_intent": "Get a list of fonts available in the system"}, {"question_id": 93534, "snippet": "nums = np.arange(n1, n2, base_nums[1] - base_nums[0])", "intent": "Maps at Matplotlib using Linspace", "rewritten_intent": "Generate the number list `nums' between `n1' and `n2' with the same step in the number `base_nums'"}, {"question_id": 197093, "snippet": "my_total = -1\\n\nwhile my_total != total:\\n\n\\tnums = [random.randint(0,total) for _ in range(n)]\\n\n\\tmy_total = sum(nums)\\n", "intent": "Unforeseen numerals", "rewritten_intent": "Regenerate `n' random numbers `nums' whose sum is `total'"}, {"question_id": 295537, "snippet": "my_obj = globals()[class_name]", "intent": "Creation of an object with a class name", "rewritten_intent": "Create an object of class `my_obj' by name in the row `class_name'"}, {"question_id": 240287, "snippet": "my_dict = dict(tupels)", "intent": "A dictionary from the motorcade to Python", "rewritten_intent": "Transform the cortex key value `tupels' into the dictionary `my_dict'"}, {"question_id": 3726, "snippet": "\nwb = openpyxl.load_workbook(bookpath, data_only = True)\\n\nsh = wb[sheet]\\n\ncolor_in_hex = sh[cell_index].fill.start_color.index\\n ", "intent": "How does Python define the background of the cell at Excel?", "rewritten_intent": "Receive color `color_in_hex' cells `cell_index' xlsx-file `bookpath' tables `sheet'"}, {"question_id": 172669, "snippet": "doc = docx.Document()\\n\np = doc.add_paragraph()\\n\n\nrunner = p.add_run(s)\\n\nrunner.bold = True\\n\n\ndoc.save(filepath)", "intent": "How do you write a line fat in a Word file?", "rewritten_intent": "Write the row `s' in doxx file `file_path' fat"}, {"question_id": 53872, "snippet": "def say(self):\\n\n\\tself.lbl[\"text\"] = s\\n\n\nself.btn[\"command\"] = self.say", "intent": "Tkinter and print command to console", "rewritten_intent": "When pressing tkinter `btn', delete text `s' in the 'lbl' field"}, {"question_id": 26594, "snippet": "url = re.findall(r\"\\[url=(.*)\\]\", s)[0]", "intent": "Regular expression to receive BBCode URL", "rewritten_intent": "Get link `url' from BBCode line `s'"}, {"question_id": 262974, "snippet": "`re.sub(pattern, r\"\\1{}\".format(s), text) ", "intent": "Box empty line after selected regular expression", "rewritten_intent": "Insert the row `s' after the line in the row `pattern' in the row `text'"}, {"question_id": 83802, "snippet": "def progress():\\n\n\\tdef callback(block):\\n\n\\t\\tcallback.uploaded += len(block)\\n\n\\t\\tprint('Uploaded %d bytes' % callback.uploaded)\\n\n\\tcallback.uploaded = 0\\n\n\\treturn callback\\n\n\nftp.storbinary(\"STOR \" + file, open(file, \"rb\"), 1024, progress())", "intent": "Progress in downloading a file to ftp", "rewritten_intent": "Load file `file' on ftp with bar progress"}, {"question_id": 178993, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "Automatic parsing from websites", "rewritten_intent": "Spare HTML page code `code' by reference `url'"}, {"question_id": 50259, "snippet": "print(\"{:.{}f}\".format(num, f)\")", "intent": "Accuracy of numbers", "rewritten_intent": "Select the number `num' with precision to `f' characters"}, {"question_id": 121752, "snippet": "tree = lxml.etree.parse(filepath)", "intent": "Loading object from xml", "rewritten_intent": "Unload xml file `filepath' to object `tree'"}, {"question_id": 27963, "snippet": "for a in zip(a1, a2):\\n\n\\tprint(*a)\\n", "intent": "Conclusion of the result with two columns", "rewritten_intent": "Delete list elements `a1' and `a2' in pairs"}, {"question_id": 54149, "snippet": "frame.grid(column=0, row=0, sticky=(N, W))", "intent": "Tkinter Widget Equalization", "rewritten_intent": "Fix Tkinter 'frame' on the left from the top"}, {"question_id": 61709, "snippet": "delta_nums = [abs(target_num - i) for i in nums]\nnum = nums[delta_nums.index(min(delta_nums))]", "intent": "Search for the nearest objects on the list", "rewritten_intent": "Find the closest number `n' to `target_num' in the list `nums'"}, {"question_id": 160598, "snippet": "cursor.columns(table=sheet)\n", "intent": "Collection of the number and list of fields of the table", "rewritten_intent": "Get a list of fields of the table `sheet' sql database with `cursor'"}, {"question_id": 111347, "snippet": "if os.access(filepath, os.R_OK):\\n\n\\tprint(\"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\")\\n\nelse:\\n\n\\tprint(\"\u041d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\")\\n", "intent": "How do you know the rights to the folder, the file?", "rewritten_intent": "Check the reading rights of the file `filepath'"}, {"question_id": 37423, "snippet": "root = etree.HTML(html)", "intent": "How to choose from the line?", "rewritten_intent": "Unload html line `html' into tree `Root'"}, {"question_id": 93346, "snippet": "with urllib.request.urlopen(utl) as Response:\\n\n\\tLength = Response.getheader('content-length')\\n\n\\tBlockSize = 1000000  # default value\\n\n\n\\tif Length:\\t\n\\t\\tLength = int(Length)\\n\n\\t\\tBlockSize = max(4096, Length // 20)\\n\n\n\\tprint(\"UrlLib len, blocksize: \", Length, BlockSize)\\n\n\n\\tBufferAll = io.BytesIO()\\n\n\\tSize = 0\\n\n        while True:\n            BufferNow = Response.read(BlockSize)\n            if not BufferNow:\n                break\n            BufferAll.write(BufferNow)\n            Size += len(BufferNow)\n            if Length:\n                Percent = int((Size / Length)*100)\n                print('download: {Percent}% {Url}')\n\n        print(\"Buffer All len:\", len(BufferAll.getvalue()))", "intent": "Progressbar + downloading file with url", "rewritten_intent": "download the file from the `url' website showing progressbar"}, {"question_id": 319702, "snippet": "dicts = [json.dumps(i) for i in dicts]\\n\ndicts = [json.loads(i) for i in set(dicts)]\\n", "intent": "Iteration of the list of dictionaries, removal of the same values", "rewritten_intent": "Remove the same dictionaries from the list of dictionaries `dicts'"}, {"question_id": 78494, "snippet": "\\tdef closeEvent(self, event):\\n\n\\t\\tif self.check_box.isChecked():\\n\n\\t\\t\\tevent.ignore()\\n\n\\t\\t\\tself.hide()\\n\n\\t\\t\\tself.tray_icon.showMessage(\n                \"Tray Program\",\n                \"Application was minimized to Tray\",\n                QSystemTrayIcon.Information,\n                2000\n            )\\n\n", "intent": "Python: 3rd Programme (Linux)", "rewritten_intent": "Remove PyQt `win' window to three by pressing the cross"}, {"question_id": 167202, "snippet": "hwnd = win32gui.FindWindow(None, title)\\n\n\\tcoord = win32gui.GetWindowRect(hwnd)[0:2]\\n\n\\tprint(coord)\\n", "intent": "Getting the window coordinates", "rewritten_intent": "Get the coordinates of the `coords' window with the title `title'"}, {"question_id": 151936, "snippet": "parsed_url = urlparse(url)\\n\nquery = parsed_url(parsed_url.query)\\n", "intent": "Python and Parsing URL", "rewritten_intent": "Open the get parameters of the url `url' request to the dictionary `query'"}, {"question_id": 306957, "snippet": "os.replace(filepath, newfilepath)", "intent": "Cannot rename file", "rewritten_intent": "Rename file `filepath' to `newfilepath'"}, {"question_id": 249773, "snippet": "r = range(min(a), max(a) + 1)\\\nnums = sorted(list(set(r) - set(a)))\\n", "intent": "Free number algorithm", "rewritten_intent": "Find missing numbers `nums' in the list `a'"}, {"question_id": 2653, "snippet": "objects.filter(children__isnull=True)", "intent": "Jango Filter", "rewritten_intent": "Select django objects without progeny"}, {"question_id": 122711, "snippet": "subprocess.check_output(['g++', filepath])", "intent": "System calls in python", "rewritten_intent": "Compiling c++ file `filepath'"}, {"question_id": 249444, "snippet": "list_s = s.split()\\n\nlist_base = base_s.split()\\n\nif set(list_s) & set(list_base):\\n\n\\tprint(\"\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442\")\\n\nelse:\\n\n\\tprint(\"\u041d\u0435 \u0441\u043e\u0434\u0435\u0440\u0434\u0436\u0438\u0442\"\\n", "intent": "How can we know if one line contains a word from another?", "rewritten_intent": "Check whether the line `s' contains words from the line `base_s'"}, {"question_id": 30398, "snippet": "try:\\n\n\\tf()\\n\nexcept KeyboardInterrupt:\\n\n\\tprint(\"Catched KeyboardInterrupt exception\")\\n", "intent": "How do we get out of one function and continue to perform in another?", "rewritten_intent": "Complete the `f' function when CTRL+C keys are pressed"}, {"question_id": 89883, "snippet": "def paintEvent(self, event):\\n\n\\tpainter = QPainter(self)\\n\n\\tpts = self.pts\\n\n\\tpainter.setPen(QPen(QColor(Qt.darkGreen), 3))\\n\n\\tpainter.drawPolyline(self.poly(pts))\\n\n\\tpainter.setBrush(QBrush(QColor(255, 0, 0)))\\n\n\\tpainter.setPen(QPen(QColor(Qt.black), 1))\\n\n\\tfor x, y in pts:\\n\n\\t\\tpainter.drawEllipse(QRectF(x - 4, y - 4, 8, 8))\\n", "intent": "How to simulate a wave using QPainter() in PySide/PyQt4", "rewritten_intent": "Draw wave using PyQt4"}, {"question_id": 9273, "snippet": "def on_click(x, y, button, pressed):\\n\n\\tcoords = (x, y)\\n\n\nwith pynput.mouse.Listener(on_click=on_click) as listener:\\n\n\\tlistener.join()\\n", "intent": "How does Python intercept a MouseClick system event?", "rewritten_intent": "Get Mouse 'Cords' coordinates."}, {"question_id": 234414, "snippet": "driver.get(url)\nscreenshot = driver.save_screenshot(filepath)", "intent": "Selenium: receive downloaded image", "rewritten_intent": "Make a screen shot of the website `url' as an image of `filepath' using selenium drift `driver'"}, {"question_id": 210480, "snippet": "with open(filepath) as f:\\n\n\\tlines = f.readlines()\\n\n\\tline_values = collections.Counter(lines)\\n", "intent": "Counting and output of the most repeatable lines", "rewritten_intent": "Count the rows in the file 'filepath' in the lin_counts dictionary"}, {"question_id": 51160, "snippet": "\nx = sympy.symbols('x')\\n\nprint(sympy.integrate(f, (x, n, sympy.oo)))\\n", "intent": "Calculation of the non-own integral using SymPy", "rewritten_intent": "Calculate the non-own integral of a given function `f' from the number `n' to infinity"}, {"question_id": 560, "snippet": "for key in dict2:\\n\n\\tif key in dict1:\\n\n\\t\\tdel dict1[key]\\n", "intent": "Two dictionarys, Python", "rewritten_intent": "Remove from the dictionary `dict1' the keys that are in the dictionary `dict2'"}, {"question_id": 18892, "snippet": "with open(filepath,\"r\", encoding=\"utf-8\") as f:\\n\n\\tpass", "intent": "Compute encoding when creating a file", "rewritten_intent": "Create 'filepath' file with utf-8 encoding"}, {"question_id": 242841, "snippet": "getattr(obj, name)()", "intent": "How do you run the function inside the class?", "rewritten_intent": "Start the method with the name `name' of the object `obj'"}, {"question_id": 21336, "snippet": "from django.contrib.auth.models import User, Group\\n\nadmin.site.unregister(User)\\n\nadmin.site.unregister(Group)\\n", "intent": "How to remove the admin on the outside app (Django admin)", "rewritten_intent": "Remove the User and Group from the Django Administrator &apos; s panel"}, {"question_id": 57046, "snippet": "win32api.keybd_event(ord(key), 0, 0,0)", "intent": "How do you get the program to press keys?", "rewritten_intent": "Press key `key'"}, {"question_id": 57046, "snippet": "pyautogui.press('s')", "intent": "How do you get the program to press keys?", "rewritten_intent": "Press key `key'"}, {"question_id": 265219, "snippet": "word_dict = dict(zip(old_data, new_data))\\n\nfor word in word_dict:\\n\n\\ts = re.sub(r\"\\b{}\\b\".format(word), word_dict[word], s)\\n", "intent": "Replacement of the list of words in the text", "rewritten_intent": "Replace in line `s' the words in the list `old_words' with the words in the list `new_words'"}, {"question_id": 106280, "snippet": "with open(imgpath, 'wb') as img :\n  img_obj = base64.b64decode(img_as_s,'!-')\n  img.write(img_obj)", "intent": "How do you turn a line into an image?", "rewritten_intent": "Transform the 64th line view of the image `img_as_s' to `imgpath'"}, {"question_id": 14314, "snippet": "\nresponse = urllib.request.urlopen(url)\\n\nheaders = response.headers\\n", "intent": "Python urllib Headings", "rewritten_intent": "Get a dictionary of the headings `headers' from `url'"}, {"question_id": 25915, "snippet": "s.encode('unicode_escape')", "intent": "Tell me the screen function.", "rewritten_intent": "Screen specifics in row `s'"}, {"question_id": 76183, "snippet": "p = 1 << (len(s)-1)\nl = []\nfor i in range(1, p):\n\\tdef rf(first, sec):\n\\t\\tc = first[0]\n\\t\\ts1 = sec\n\\t\\tif c & i > 0 :\n\\t\\t\\ts1 = sign+s1\n\\t\\treturn (c >> 1, first[1]+s1)\n\\tl.append(functools.reduce(rf, s[1:], (p >> 1, s[0]))[1])", "intent": "Python String Format", "rewritten_intent": "Select all possible ways to place the sign `sign' in the row `s' as in the bit number"}]