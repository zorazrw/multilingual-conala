[{"question_id": 37146, "snippet": "arr[:, 0]", "intent": "We're going to talk about the meaning of x_train[, 1], and y_train.", "rewritten_intent": "We're going to take the first element of the 2-dimensional array, and we're going to take the first value from the 1-dimensional array that's the element of the 2-dimensional array."}, {"question_id": 25263, "snippet": "df.to_dict()", "intent": "Please tell me how to convert from the Pondas data frame in Python to a given dictionary type.", "rewritten_intent": "Convert data frame to dictionary type object"}, {"question_id": 28178, "snippet": "soup.find('tbody').find_all('tr')", "intent": "So let's take a look at this.", "rewritten_intent": "Get each row from the HTML table"}, {"question_id": 21638, "snippet": "labels[n].set_color('red')", "intent": "So let's go ahead and change the color of the y axis.", "rewritten_intent": "I'm going to change the color of the y-axis to red."}, {"question_id": 34517, "snippet": "nonlocal a", "intent": "Change the value of local variables in a function from a set function", "rewritten_intent": "I'm going to show you how to do this."}, {"question_id": 8656, "snippet": "class handler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        os.environ['REQUEST_METHOD'] = 'POST'\n        form = cgi.FieldStorage(self.rfile, self.headers)", "intent": "You can't get any data from the post in Python cgi.FieldStage.", "rewritten_intent": "I'm going to go ahead and get the post data in cgi.FieldStage."}, {"question_id": 9836, "snippet": "random.choice(li)", "intent": "So let's ask ourselves, what do we do if we want a single element to be randomly selected from the list?", "rewritten_intent": "Select an element randomly from the list at random"}, {"question_id": 1589, "snippet": "X = np.array(d, dtype='float32')\nX.tofile('binaryVec.bin')", "intent": "I'd like to change the result of the text mode in word 2vec to the output in binary mode in Python.", "rewritten_intent": "I'm going to add a list of all the elements that we're going to store as a list of numbers."}, {"question_id": 16807, "snippet": "doc.toxml(encoding='sjis'))", "intent": "An error with XML operations in python causes character ghosts", "rewritten_intent": "Let's go ahead and see how this works."}, {"question_id": 38532, "snippet": "f.close()", "intent": "Is it possible to write and load files in \"jupyter notebook\" in a series of lines?", "rewritten_intent": "Close Open File 'f'"}, {"question_id": 37696, "snippet": "requests.post(url, files=files, data=data)", "intent": "We're going to talk a little bit more about what we're going to talk about.", "rewritten_intent": "I'm going to do the same thing over here. I'm going to do the same thing over here. I'm going to do the same thing over here. I'm going to do the same thing over here. I'm going to do the same thing over here. I'm going to do the same thing over here. I'm going to do the same thing over here. I'm going to do the same thing over here."}, {"question_id": 29368, "snippet": "sss = StratifiedShuffleSplit()\nsss.get_n_splits(X, y)", "intent": "Let's take a look at the data.", "rewritten_intent": "Split data with class ratios"}, {"question_id": 40699, "snippet": "plt.yticks(range(low,high))", "intent": "I'm going to show you a couple of examples of how to do this.", "rewritten_intent": "Set the plot range of the y-axis to the lower bound"}, {"question_id": 11011, "snippet": "fig.canvas.mpl_connect('pick_event', onclick)", "intent": "Get coordinates on the 3D graph of the Mattlotlib", "rewritten_intent": "Show coordinates of the data selected on the graph"}, {"question_id": 42344, "snippet": "re.compile('[\u3041-\u3093\u30a1-\u30f3\u4e00-\u9fa5]+')", "intent": "I want to remove elements other than Japanese from the list", "rewritten_intent": "Get a regular expression that identifies the Japanese word katana, kamikan, kanji."}, {"question_id": 17145, "snippet": "br.submit().read()", "intent": "Automated \"Enter Password and Download\"", "rewritten_intent": "Let's go ahead and look at this."}, {"question_id": 38824, "snippet": "[print(*i) for i in data]", "intent": "I want to print python 3 tuples in blank space.", "rewritten_intent": "Show tupledura in blank space"}, {"question_id": 38824, "snippet": "for i in data:\n     print(' '.join(str(j) for j in i))", "intent": "I want to print python 3 tuples in blank space.", "rewritten_intent": "Show tupledura in blank space"}, {"question_id": 38824, "snippet": "for i in data:\n     print(' '.join(map(str, i)))", "intent": "I want to print python 3 tuples in blank space.", "rewritten_intent": "Show tupledura in blank space"}, {"question_id": 35299, "snippet": "z = tf.constant(0, shape=[n, n], dtype=tf.int32)\nabs = tf.maximum(t, z)\nresult = tf.reduce_sum(abs)", "intent": "We want to compute the sum of more than 0 of the elements of the tsorflow.", "rewritten_intent": "We're going to compute the sum of over 0 of the elements of n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n plus n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n times n."}, {"question_id": 40370, "snippet": "button.clicked.connect(self.w.close)", "intent": "I want to create a button to close only subwindows with pyqt5", "rewritten_intent": "When the button is clicked, only the appropriate window will be closed"}, {"question_id": 27830, "snippet": "hashlib.sha1(f.read()).hexdigest()", "intent": "The data and request.data will be empty for the files uploaded in Floask.", "rewritten_intent": "I'm going to go ahead and try to find the hash value."}, {"question_id": 41677, "snippet": "db.execute('insert into img_table values(?)', [blob])", "intent": "So let's go back to Python 3+SQLite.", "rewritten_intent": "Let's see how this works."}, {"question_id": 33970, "snippet": "print(settings.DATABASES)\n", "intent": "We're going to talk about database settings for Django.", "rewritten_intent": "Show database settings"}, {"question_id": 38328, "snippet": "df.x.str.extract(pat)", "intent": "I want to get out the numbers in the string that are included in the datamark", "rewritten_intent": "I'm going to show you how to do this."}, {"question_id": 37418, "snippet": "open(file, 'w')", "intent": "I can't write to CSV. Tell me.", "rewritten_intent": "Open file  all in overwrite mode"}, {"question_id": 41200, "snippet": "plt.plot(x_list, y_list)", "intent": "Sets the start point of the graph for the Mattlotlib", "rewritten_intent": "I'm going to show you how to do this."}, {"question_id": 43255, "snippet": "btn.setEnabled(False)", "intent": "I want to make sure that I don't hit the button with pyqt5.", "rewritten_intent": "Do not push button 'btn'"}, {"question_id": 43369, "snippet": "pd.DataFrame([a, b])", "intent": "So let's look at how this works.", "rewritten_intent": "We're going to do this in a different way."}, {"question_id": 24438, "snippet": "f = codecs.open(file, 'r', 'utf-8')", "intent": "(Python'ascii's code can't uncode characters in position 0-1: local not in range)", "rewritten_intent": "Open a file with the character code specified in utf-8"}, {"question_id": 10215, "snippet": "with open(file, 'rb') as f:\n    data = f.read()", "intent": "Do you want to change the encoding for reading text files?", "rewritten_intent": "Opens a binary data"}, {"question_id": 28982, "snippet": "pprint.pprint(li)", "intent": "Can't you easily view the content of the list that's been attached to?", "rewritten_intent": "Let's see if we can do that."}, {"question_id": 18992, "snippet": "pickle.dump(x, open('hoge.pkl', 'wb'))", "intent": "File mode in Python Pickle (binary necessity)", "rewritten_intent": "Saves the object's object x's in the file'joge. pklc '"}, {"question_id": 38400, "snippet": "df.replace(change_dict)", "intent": "Pandas String Replacement", "rewritten_intent": "So we're going to have to replace the different elements of the data frame, each of which is a different element, according to the pair of elements of the dictionary object_decision and the key of the element."}, {"question_id": 17321, "snippet": "b.save()", "intent": "I want to put data in Django's database from outside.", "rewritten_intent": "Let's go ahead and see how this works."}, {"question_id": 35793, "snippet": "data = []\ni = 0\nwhile(i<100):\n    data.append(pd.read_csv('file_%d.csv'%i))\n    i+=1", "intent": "I'd like to bring in the csvs in the pandas.", "rewritten_intent": "Add 100 CSV files 'file_%d' to the list"}, {"question_id": 20549, "snippet": "numpy.save('my_vector', vectorized.toarray()", "intent": "I'm going to give you an example of how to do this.", "rewritten_intent": "Save the learning data vector in the file'my_vector.nc '"}, {"question_id": 9518, "snippet": "for i, name in enumerate(li):\n    print(i, name)", "intent": "Python: I'd like to return index in the Etterator class", "rewritten_intent": "Show the index and element of the list 'li' over and over again"}, {"question_id": 19144, "snippet": "f = open('test.html', 'w')\nf.write(text.encode('utf-8'))", "intent": "I'm going to show you how to do that.", "rewritten_intent": "Open HTML file'test. html 'and save text'text in utf-8"}, {"question_id": 39740, "snippet": "path = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0]\nsys.path.append(path)", "intent": "I want to emport modules higher than the hierarchy that runs the program in Python.", "rewritten_intent": "We're going to go to the running program, and we're going to add this class module that's above the running program."}, {"question_id": 38760, "snippet": "print(arr[arr > n].sum())\nprint(numpy.sum(arr > n))", "intent": "Isn't there a Numpy array, a sumif, or a count, like Excell?", "rewritten_intent": "I'm going to show you the total number of elements that are greater than the number of elements that are greater than the number of values that are greater than the number of elements in the list than the length of the list."}, {"question_id": 35102, "snippet": "results = {}\nfor item in data:\n    results[item.find('areacode').text] = item.find('prefecture').text", "intent": "Create 2D array in loop", "rewritten_intent": "We're going to go through each of these elements, and we're going to go through each of these elements, and we're going to go through each of these elements, and we're going to go through each of these elements, and we're going to go through each of these elements, and we're going to look through each of these elements."}, {"question_id": 41440, "snippet": "np.stack(arr_list)", "intent": "I'm going to give you an example of how to do this.", "rewritten_intent": "So let's take a look at how this works."}, {"question_id": 35741, "snippet": "soup.find_all('p')", "intent": "I'm going to give you an example of how to do this.", "rewritten_intent": "Let's go ahead and see what we can do."}, {"question_id": 40444, "snippet": "df.groupby([c_lable]).last()", "intent": "Organize CSV data in Python", "rewritten_intent": "Let's take a look at this."}, {"question_id": 39240, "snippet": "print([i for i in b_list if i in a_list])", "intent": "Extracting value of list from Python list", "rewritten_intent": "Let's see how this works."}, {"question_id": 39375, "snippet": "datetime.strptime(dt_s,'%d%b%Y')", "intent": "A string conversion of the date containing the English name month", "rewritten_intent": "The date format containing the English name month '%d%b%Y' transforms the string string's_sss' to the \"s\" type"}, {"question_id": 37638, "snippet": "ppt.slide_width = X\nppt.slide_height = Y", "intent": "I want to change the size of the slide with Python-pptx", "rewritten_intent": "I'm going to change the size of the presentation object by specifying the size of the presentation object."}, {"question_id": 38960, "snippet": "li = [int(c) for c in n]", "intent": "The division of numbers in Python 3", "rewritten_intent": "We're going to have to break it down into a list."}, {"question_id": 33908, "snippet": "options = Options()\noptions.set_preference('javascript.enabled', False)\ndriver = webdriver.Firefox(options=options", "intent": "Disable janscripts in Python selenium", "rewritten_intent": "Disable java scripts on seleniumt for firefox specifications"}, {"question_id": 33908, "snippet": "profile = webdriver.FirefoxProfile()\nprofile.DEFAULT_PREFERENCES['frozen']['javascript.enabled'] = False\nprofile.set_preference(\"app.update.auto\", False)\nprofile.set_preference(\"app.update.enabled\", False)\nprofile.update_preferences()", "intent": "Disable janscripts in Python selenium", "rewritten_intent": "Disable java scripts on seleniumt for firefox specifications"}, {"question_id": 33908, "snippet": "profile = webdriver.FirefoxProfile()\nprofile.set_preference(\"javascript.enabled\", False)\ndriver = webdriver.Firefox(profile)", "intent": "Disable janscripts in Python selenium", "rewritten_intent": "Disable java scripts on seleniumt for firefox specifications"}, {"question_id": 19770, "snippet": "s.isnumeric()", "intent": "I'm going to give you an example of what we're going to do.", "rewritten_intent": "Let's see if we can do that."}, {"question_id": 29614, "snippet": "original_socket = socket.socket", "intent": "We're using PySocks. We're using \"Webscrew\" via \"Tool.\"", "rewritten_intent": "Save socket information"}, {"question_id": 41032, "snippet": "os.listdir(dir)", "intent": "Fetching last filename in folder", "rewritten_intent": "Fetch a list of files in directory"}, {"question_id": 37709, "snippet": "img is None", "intent": "I'm going to show you an example of how this works.", "rewritten_intent": "Check whether the image is empty"}, {"question_id": 39516, "snippet": "cupy.concatenate((a_1,a_2),axis=0)", "intent": "Let's go ahead and see how this works.", "rewritten_intent": "I'm going to do it in a different color, and I'm going to do it in a different color."}, {"question_id": 29331, "snippet": "stream.filter(track=[u'\u4e2d\u56fd', ], languages=['zh'])", "intent": "I'd like to use Twitter from Python to get a Chinese twitter.", "rewritten_intent": "I'm going to show you a couple of examples."}, {"question_id": 35881, "snippet": "cnn.saver.restore(cnn.sess, 'model.ckpt')", "intent": "You can't use class and sauerver.save together in tensorflow.", "rewritten_intent": "Let's take a look at how this works."}, {"question_id": 33677, "snippet": "p = Poly(f, x)\np.coeffs()", "intent": "Let me ask you a question.", "rewritten_intent": "Let's take a look at what's going on here."}, {"question_id": 37449, "snippet": "a & b", "intent": "Why is \"if 1 & 5\" true?", "rewritten_intent": "A bit of a variable and a bit of a variable"}, {"question_id": 42442, "snippet": "globals()", "intent": "I'm going to ask you a few questions.", "rewritten_intent": "Get a list of global variables"}, {"question_id": 40830, "snippet": "for line in stdin:\n    a = line.rstrip().split(' ')\n    print(a)", "intent": "What do you want to do when you're running a game program in Python, until the end of multiple lines of input?", "rewritten_intent": "Show a space-separated input"}, {"question_id": 40830, "snippet": "l = []\nfor line in stdin:\n  a = line.rstrip().split(' ')\n  l.append(a)\nprint(l)", "intent": "What do you want to do when you're running a game program in Python, until the end of multiple lines of input?", "rewritten_intent": "Show a space-separated input"}, {"question_id": 38030, "snippet": "Counter(word_list)", "intent": "In Python, I want to get sentences out of a file and search for how many times the words I search for come out. Could you make a list for each sentence using a list of sentences, such as for searching from one sentence?", "rewritten_intent": "Counts the words that appear in the list wordlist"}, {"question_id": 38878, "snippet": "search = api.search(q=word)", "intent": "I'm going to show you a couple of examples of how to do this.", "rewritten_intent": "We're going to go through each of these steps. We're going to go through each of these. We're going to go through each of these. We're going to go through each of these. We're going to go through each of these. We're going to go through each of these. We're going to go through each of these. We're going to go through each of these. We're going to go through each of these."}, {"question_id": 38724, "snippet": "def add_functions(f, g):\n    return lambda x: f(x) + g(x)", "intent": "I want to create a function that takes a function and returns a function in Python.", "rewritten_intent": "We're going to define a procedure that takes the function f (f) and g (g) and computes the sum of each of these functions."}, {"question_id": 22439, "snippet": "type(obj)", "intent": "Can you get class objects in Python?", "rewritten_intent": "I'm going to get the class of the object."}, {"question_id": 22439, "snippet": "obj.__class__", "intent": "Can you get class objects in Python?", "rewritten_intent": "I'm going to get the class of the object."}, {"question_id": 39340, "snippet": "with urllib.request.urlopen(url) as r:\n    print(r.read())", "intent": "I want to show the contents of the given URL", "rewritten_intent": "Show the contents of the specified URL"}, {"question_id": 17418, "snippet": "cv2.drawKeypoints(img, kp, img2, color=(0,255,0), flags=0)", "intent": "Let's go back to Python 2.7", "rewritten_intent": "I'm going to show you how to do this."}, {"question_id": 39589, "snippet": "os.path.join(foldername, filename)", "intent": "Let's go ahead and try this out.", "rewritten_intent": "Finds the path with the folder name's name 'and the filename'"}, {"question_id": 23577, "snippet": "ax.set_xlim(l, h)", "intent": "I'm going to give you an example of how to do this.", "rewritten_intent": "I'm going to give you an example of how to do this."}, {"question_id": 41087, "snippet": "int(math.ceil(src/float(range)) * range)", "intent": "So let's see how this works.", "rewritten_intent": "I'm going to do it in a different color. I'm going to do it in a different color. I'm going to do it in a different color."}, {"question_id": 41087, "snippet": "src if src % range == 0 else src + range - src % range", "intent": "So let's see how this works.", "rewritten_intent": "I'm going to do it in a different color. I'm going to do it in a different color. I'm going to do it in a different color."}, {"question_id": 40711, "snippet": "random_numbers = np.random.rand(n)\nanswer = N * random_numbers / np.sum(random_numbers)", "intent": "In Numpy, I want to generate random vectors in n-dimensional space under a constraint where the sum of the number of elements is n and the sum of the elements is n.", "rewritten_intent": "We're going to define a random vector in the n-dimensional space where the sum of the elements is equal to the sum of the elements is equal to the sum of the elements."}, {"question_id": 40711, "snippet": "answer = np.random.dirichlet(np.ones(n)) * N", "intent": "In Numpy, I want to generate random vectors in n-dimensional space under a constraint where the sum of the number of elements is n and the sum of the elements is n.", "rewritten_intent": "We're going to define a random vector in the n-dimensional space where the sum of the elements is equal to the sum of the elements is equal to the sum of the elements."}, {"question_id": 31924, "snippet": "random.shuffle(li)", "intent": "Sets a random range of elements to extract from the list", "rewritten_intent": "We're going to have to reorder the list at random."}, {"question_id": 40343, "snippet": "itertools.product(a,b)", "intent": "Program to calculate combinations of sentences", "rewritten_intent": "We're going to add a list of elements. We're going to add a list of elements. We're going to add a list of elements."}, {"question_id": 36217, "snippet": "df['a'].str.extract(reg, expand=True)", "intent": "How do you write a new column of data that you've taken out of the column data by regular expressions?", "rewritten_intent": "I'm going to show you what I mean by that."}, {"question_id": 27871, "snippet": "d = {f+s : cost for ((f,s), cost) in zip(product(factories,shops), costs)}", "intent": "How to store a generated string in tuples", "rewritten_intent": "We're going to create a dictionary type of object with 2 lists: the combination of the elements of the two lists, and the combination of the elements of the tuples."}, {"question_id": 27871, "snippet": "root = [''.join((x, y)) for x, y in itertools.product(factories, shops)]\nd = dict(zip(root, cost))", "intent": "How to store a generated string in tuples", "rewritten_intent": "We're going to create a dictionary type of object with 2 lists: the combination of the elements of the two lists, and the combination of the elements of the tuples."}, {"question_id": 40676, "snippet": "sop.find_all(attrs={\"data-locate\": \"address\"})", "intent": "Get content of a particular li using BeautySelection", "rewritten_intent": "We're going to go through all of the elements of the object, and we're going to go through the object's name and search through the object's name."}, {"question_id": 42256, "snippet": "s = ''.join(i[0] for i in li)", "intent": "I want to connect the initials in the list.", "rewritten_intent": "Here's how it works."}, {"question_id": 42256, "snippet": "s = ''\nfor line in li:\n    s += v[0]", "intent": "I want to connect the initials in the list.", "rewritten_intent": "Here's how it works."}, {"question_id": 18967, "snippet": "if i not in li:", "intent": "Let's do another one.", "rewritten_intent": "I'm going to add a list of elements that I'm going to add to the list."}, {"question_id": 37648, "snippet": "json.dumps(req_data).encode('utf-8'))", "intent": "Error in interactive program using DocomoAPI:", "rewritten_intent": "I'm going to do this in a different color, and I'm going to do this in a different color."}, {"question_id": 22991, "snippet": "cmd = 'du -b /var/hoge'\nint(subprocess.check_output(cmd, shell=True).split()[0])", "intent": "I want to keep the directory size as a result of output with subprocess check_call", "rewritten_intent": "Use Linux's \"du\" command to get the size of the directory"}, {"question_id": 39502, "snippet": "re.sub('([\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc])\\s+((?=[\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc]))',r'\\1\\2', str)", "intent": "Space Remove in Japanese in Python", "rewritten_intent": "Remove the space in Japanese in the string"}, {"question_id": 16805, "snippet": "u'{0}{1}'.format(s, n)", "intent": "An error with XML operations in python causes character ghosts", "rewritten_intent": "I'm going to do it in a different color. I'm going to do it in a different color. I'm going to do it in a different color."}, {"question_id": 40978, "snippet": "[x+1 for x in range(M) for y in range(N)]", "intent": "I want to create a list like 1, 1, 2, 3, 4, 4.", "rewritten_intent": "One is a list of n's, two is a list of n's, two is a list of n's, and one is a list of n's."}, {"question_id": 40978, "snippet": "[i // n + 1 for i in range(N * M)]", "intent": "I want to create a list like 1, 1, 2, 3, 4, 4.", "rewritten_intent": "One is a list of n's, two is a list of n's, two is a list of n's, and one is a list of n's."}, {"question_id": 39379, "snippet": "[h.get_height() for h in sns.distplot(x).patches]", "intent": "I want to know where the pins are on the graph.", "rewritten_intent": "Let's take a look at this."}, {"question_id": 38415, "snippet": "ax=plt.subplot(aspect='equal')", "intent": "How to change the shape of the graph with the dataplotlib.", "rewritten_intent": "Draw a square of the graph"}, {"question_id": 37757, "snippet": "locals()[string]", "intent": "How to change a string into an instance in Python", "rewritten_intent": "The value of a string type variable is evaluated as an instance variable of the number type"}, {"question_id": 37757, "snippet": "eval(string)", "intent": "How to change a string into an instance in Python", "rewritten_intent": "The value of a string type variable is evaluated as an instance variable of the number type"}, {"question_id": 34422, "snippet": "d = json.loads(s_json)", "intent": "So let's see if we can figure out what's going on here.", "rewritten_intent": "I'm going to use the word \"jSON\" to refer to the string \"JSON.\""}, {"question_id": 27686, "snippet": "soup.get('a_id')", "intent": "I want to get an im: id attrilee with a feed parser. We're parsing XML for iOS running data on Apple.", "rewritten_intent": "Let's go ahead and see how this works."}, {"question_id": 41054, "snippet": "[os.rename(f, f.replace('.dat', '.gui')) for f in os.listdir('.') if not f.startswith('.')]", "intent": "I want to rewrite the extension of a file in a specific folder.", "rewritten_intent": "I'm going to show you an example of how to do this."}, {"question_id": 43303, "snippet": "df2 = df.reset_index(drop=True)", "intent": "About DataFame Bonds", "rewritten_intent": "I'm going to add a new data frame that resets the index of the data frame."}, {"question_id": 43322, "snippet": "df.resample('1min').ffill()", "intent": "Interval and extension of data frame", "rewritten_intent": "Resamp the data frame in the time sequence every minute, while the value in between is satisfied by the previous value."}, {"question_id": 35683, "snippet": "z.real", "intent": "How to set a complex number (a+jb+c+jd; a, b, c,d: real)", "rewritten_intent": "We're going to do the same thing for z, and we're going to do the same thing for z, and we're going to do the same thing for z."}, {"question_id": 41058, "snippet": "list(itertools.combinations(iter, r))", "intent": "I want you to tell me how to display the combination of 0, 1, 2, and 1.", "rewritten_intent": "It's going to be a list of all the elements in the list."}, {"question_id": 42573, "snippet": "sheet.cell_value(row, col))", "intent": "I want to call the value of an excell cell.", "rewritten_intent": "I'm going to give you an example of how to do this."}, {"question_id": 30539, "snippet": "__builtins__.eval = lambda x: 'eval is not allowed'", "intent": "How to output errors by standard function used in methods", "rewritten_intent": "Let's go ahead and see how this works."}, {"question_id": 40361, "snippet": "func(*args)", "intent": "How to use list contents as arguments", "rewritten_intent": "We're going to have to do it in a way that allows us to do it in a way that allows us to do it in a way that allows us to do it in a way that allows us to do it in a way that allows us to do it in a way that allows us to do it in a way that allows us to do it in a way that we don't want to do it in a way that we don't want to do."}, {"question_id": 43333, "snippet": "d = {'range': r, 'result': l}\ndf = pd.DataFrame(data=d)", "intent": "I'm going to show you how to do this.", "rewritten_intent": "We're going to make a data frame with the element of the column, the element of the column, the element of the column, and the element of the column."}, {"question_id": 6972, "snippet": "try:\n    hoge()\nexcept:\n    traceback.print_exc()", "intent": "I want to catch all exceptions in python and have them print out details.", "rewritten_intent": "Show exception error details"}, {"question_id": 6972, "snippet": "try:\n    hoge()\nexcept:\n    print(sys.exc_info())", "intent": "I want to catch all exceptions in python and have them print out details.", "rewritten_intent": "Show exception error details"}, {"question_id": 6972, "snippet": "try:\n    hoge()\nexcept Exception as e:\n    print('Error:', e.args)\n    fuga()", "intent": "I want to catch all exceptions in python and have them print out details.", "rewritten_intent": "Show exception error details"}, {"question_id": 11582, "snippet": "f = open(r'C:\\Users\\Documents\\python programs', 'r', encoding='utf-8')", "intent": "We're going to call open_error_error_error () and we're going to call open_error_error_error ().", "rewritten_intent": "File C: \\\\Users\\Documents\\programs open"}, {"question_id": 12174, "snippet": "print(sys.path)", "intent": "PYTHPATH", "rewritten_intent": "Show PYTHPATH"}, {"question_id": 4616, "snippet": "fetchone()", "intent": "I'm going to give you an example of an error in Python.", "rewritten_intent": "Get next line sequence of query results"}, {"question_id": 20536, "snippet": "print(os.getcwd())", "intent": "IOErder: [Erno2] No such file or directory, and it's a dead end.", "rewritten_intent": "Show current working directory"}, {"question_id": 6225, "snippet": "sum(1 for line in open('myfile.txt'))", "intent": "I want to get a number of lines of text in python", "rewritten_intent": "Gets the number of lines in text files"}, {"question_id": 6225, "snippet": "len(open('myfile.txt').readlines())", "intent": "I want to get a number of lines of text in python", "rewritten_intent": "Gets the number of lines in text files"}, {"question_id": 24508, "snippet": "t=threading.Timer(interval, function)\nt.start()", "intent": "Here's a sample of what we're going to do.", "rewritten_intent": "Let's do a couple more of these."}, {"question_id": 47199, "snippet": "if a is not None:\n    print(a)", "intent": "We're going to have to make sure that we're dealing with a variable in the \"if\" part.", "rewritten_intent": "Show variables if the variable is not None"}, {"question_id": 23332, "snippet": "for r in data:\n    list.append(', '.join(r))\nprint(\"\\n\".join(list))", "intent": "I'm going to print out all of them.", "rewritten_intent": "I'm going to show you what I'm going to show you."}, {"question_id": 34431, "snippet": "f = open('all_names.csv', 'w', encoding='UTF-8') ", "intent": "Python error: 'cp93'", "rewritten_intent": "Character Code"}, {"question_id": 33700, "snippet": "newlist = []\nif any(s.endswith('string') for s in list):\n    newl.append('string')", "intent": "How to search in Python list with partial matches", "rewritten_intent": "We're going to take a list of elements that correspond to the string we're looking for, and we're going to take a list of elements that correspond to the string we're looking for, and then we're going to take a list of elements that correspond to the string we're looking for."}, {"question_id": 33700, "snippet": "newlist = []\nfor s in list:\n    if 'string' in s:\n        newlist.append(s)", "intent": "How to search in Python list with partial matches", "rewritten_intent": "We're going to take a list of elements that correspond to the string we're looking for, and we're going to take a list of elements that correspond to the string we're looking for, and then we're going to take a list of elements that correspond to the string we're looking for."}, {"question_id": 27556, "snippet": "plt.figure() ", "intent": "I'm not going to do that. I'm not going to do that. I don't want to do that.", "rewritten_intent": "Show graphs"}, {"question_id": 37060, "snippet": "display(data_frame)", "intent": "TypeError:'module' object is not called", "rewritten_intent": "Show data frame"}, {"question_id": 31537, "snippet": "cv2.imshow('image', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()", "intent": "Even as cv2.imshow in Python, no images are shown.", "rewritten_intent": "Show image irrevocable: Wait so the window does not close immediately"}, {"question_id": 12310, "snippet": "table = Texttable()\nprint(table.draw())", "intent": "I'm going to give you an example of how to do this.", "rewritten_intent": "Show face & face (s) on screen)"}, {"question_id": 19311, "snippet": "df = pd.read_csv('arena.txt', header=None, delim_whitespace=True, decimal=',')", "intent": "Here's how it works.", "rewritten_intent": "Load the file with commas on a minority point"}, {"question_id": 42268, "snippet": "json_str = json.dumps(json_data)", "intent": "The Python object with string string with string can't be returned with json.loads", "rewritten_intent": "Let's go ahead and see what we can do."}, {"question_id": 51387, "snippet": "data = np.genfromtxt('file.csv')", "intent": "ValueError: too many values to unpack (expeded 2) solutions to Python 3.7)", "rewritten_intent": "Read Cst file"}, {"question_id": 38598, "snippet": "df.drop(df.index[df.row == \"condition\"], inplace=True)", "intent": "How do we remove lines that meet certain conditions?", "rewritten_intent": "Remove the line that meets the conditions"}, {"question_id": 20094, "snippet": "print list[x][y]", "intent": "Remove any value from the entry in the list", "rewritten_intent": "The element inside the 2D list."}, {"question_id": 18780, "snippet": "for i in range(x):\n  for j in range(y):\n    exec(\"list_\" + str(i) + \"_\" + str(j) + \"= [i, j]\")", "intent": "I want to change the name of the list automatically while I'm looping in Python.", "rewritten_intent": "We're going to go through all the elements in the list."}, {"question_id": 19552, "snippet": "now = datetime.datetime.now()\nfile_name = 'file_{0:%Y%m%d-%H%M%S}.txt'.format(now)", "intent": "I want to put a date in the name of the Python text file", "rewritten_intent": "Enter the current date in the filename"}, {"question_id": 38755, "snippet": "a, b = np.polyfit(x, y, 1)\nlinear = a * x + b\n\nax.plot(x, linear,color=\"black\")", "intent": "How to add a linear regression line to the scatter plot drawn in Mattlotlib", "rewritten_intent": "Add a linear regression line to the graph"}, {"question_id": 4556, "snippet": "class Foo:\n    def whoAmI(self):\n        print( \"I am \" + self.__class__.__name__)\n\nFoo().whoAmI()", "intent": "How to get class names from the memba function", "rewritten_intent": "Get class names from the memba function"}, {"question_id": 4556, "snippet": "class Foo(object):\n    def __init__(self):\n        print(self.__class__.__name__) # >>> Foo\n\na = Foo()\nprint(a.__class__.__name__) # >>> Foo", "intent": "How to get class names from the memba function", "rewritten_intent": "Get class names from the memba function"}, {"question_id": 30895, "snippet": "try:\n    driver.find_element(By.XPATH, element)\nexcept:\n    process_if_the_element_does_not_exist", "intent": "How to identify element in XPath", "rewritten_intent": "We're going to go through all the elements in the list, and we're going to use XPath."}, {"question_id": 27922, "snippet": "headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0\"}", "intent": "I'd like to Webscrew at Python 3 but I can't open the existing URL.", "rewritten_intent": "Change user agent to Firefox"}, {"question_id": 42850, "snippet": "chdir('/path/to') ", "intent": "Let's go ahead and see how this works.", "rewritten_intent": "Change the current working directory to  Byte"}, {"question_id": 11182, "snippet": "guess = chardet.detect(data)\nunicode_data = data.decode(guess['encoding'])", "intent": "We've done the html fetching from our web site in python, but it's going to be a character ghost.", "rewritten_intent": "Let's see if we can figure out how to do this."}, {"question_id": 35394, "snippet": "pd.read_csv(file, sep='\\s+')", "intent": "A space-separated problem when dealing with CSVs in Pondas.", "rewritten_intent": "Load blank-separated CSV file"}, {"question_id": 35394, "snippet": "pd.read_csv(file, delim_whitespace=True)", "intent": "A space-separated problem when dealing with CSVs in Pondas.", "rewritten_intent": "Load blank-separated CSV file"}, {"question_id": 37591, "snippet": "variable = value if variable is None else v", "intent": "If the variable doesn't contain a value, can't you assign a value to it and make the process easier when it doesn't?", "rewritten_intent": "We're going to return the value of this variable."}, {"question_id": 37591, "snippet": "variable = value if variable is None else variable", "intent": "If the variable doesn't contain a value, can't you assign a value to it and make the process easier when it doesn't?", "rewritten_intent": "We're going to return the value of this variable."}, {"question_id": 11601, "snippet": "os.startfile('C:\\Program Files\\....\\app.exe')", "intent": "I'm going to show you an example of how to open a file in Python.", "rewritten_intent": "Let's go ahead and run this."}, {"question_id": 26837, "snippet": "num_list = []\nwhile numer != 0:\n  num.append(number % 10)\n  n /= 10\nnum_list.reverse()", "intent": "So let's do that.", "rewritten_intent": "Let's take a look at this."}, {"question_id": 26837, "snippet": "num_list = map(int, str(number))", "intent": "So let's do that.", "rewritten_intent": "Let's take a look at this."}, {"question_id": 59780, "snippet": "hello  = tf.constant(\"Hello\")\nf = tf.function(example)\nprint(eval(f([], hello)))", "intent": "Attribute", "rewritten_intent": "Show constant evaluation results"}, {"question_id": 38276, "snippet": "pattern=r\"([0-9]*)\"\nlist=re.findall(pattern,text)", "intent": "So let's look at the code that we've been working on so far.", "rewritten_intent": "I'm going to use the regular expression to extract just the numbers from the string, and then I'm going to add them to the list at the end of the string."}, {"question_id": 49558, "snippet": "rp = sns.regplot(x, y, data=df, order=1, line_kws={\"color\":\"indianred\"})\nrp.axes.set_ylim(0,)", "intent": "The lower limit for the ylim of the Mattlotlib and the upper limit should be automatic", "rewritten_intent": "Set a lower bound on the y-axis, and make the upper bound automatic"}, {"question_id": 65284, "snippet": "tmp1 = word[:h]\nword = word[h:]\nword.extend(tmp1)", "intent": "Normal Type'object is not subscriptable error handling", "rewritten_intent": "Replaces the string's string's string's string's string's string's string's string's string's string's string's string's string's string's string's string's string's string '."}, {"question_id": 31916, "snippet": "for i, attribute in enumerate(attributes):\n    attributes[i] = attribute-1", "intent": "I'd like to change the value of the variable in the list with a \"for\" statement.", "rewritten_intent": "We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here."}, {"question_id": 31916, "snippet": "for i in range(len(attributes)):\n    attributes[i] = attributes[i]-1", "intent": "I'd like to change the value of the variable in the list with a \"for\" statement.", "rewritten_intent": "We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here."}, {"question_id": 31916, "snippet": "attributes = [attribute-1 for attribute in attributes]", "intent": "I'd like to change the value of the variable in the list with a \"for\" statement.", "rewritten_intent": "We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here. We're going to do the same thing over here."}, {"question_id": 21171, "snippet": "c = Counter(map(tuple, list))", "intent": "I'm going to show you how to extract elements that match the conditions in the 2-dimensional list in Python.", "rewritten_intent": "We're going to have to extract the elements from the 2D list."}, {"question_id": 45204, "snippet": "data = [None] * num_of_file\nfor i in range(num_of_file):\n    with open('data{}.txt'.format(i + 1), mode=\"r\", encoding=\"utf-8\") as f:\n        data[i] = f.read()", "intent": "It's like reading multiple txt files in Python at once.", "rewritten_intent": "I'm going to read a series of numbers of txt files.txttt."}, {"question_id": 24786, "snippet": "urllib.parse.urlencode('string').encode('ascii')", "intent": "I can't run it because I'm out of TypeError.", "rewritten_intent": "Let's see if we can figure out how to do this."}, {"question_id": 5822, "snippet": "pca = PCA()\npca.fit(imgAry)\npca_res = pca.transform(imgAry)\nrestoredImgAry = pca.inverse_transform(pca_res)", "intent": "I want to recover the original image data from the result of primary component analysis (PCA) using squaft-learn.", "rewritten_intent": "Main ingredient analysis."}, {"question_id": 42516, "snippet": "plt.savefig(fnameF, dpi=200, bbox_inches=\"tight\", pad_inches=0.1)", "intent": "Do not show axis labels for diagrams drawn in the Mattlotlib", "rewritten_intent": "Adjust and save graph size"}, {"question_id": 18685, "snippet": "list = [x for x in list if x]", "intent": "I want to delete the list of 2D arrays.", "rewritten_intent": "Remove the empty element from the 2D list"}, {"question_id": 18685, "snippet": "for i in range(len(list) - 1, -1, -1):\n  if not list[i]:\n    del list[i]", "intent": "I want to delete the list of 2D arrays.", "rewritten_intent": "Remove the empty element from the 2D list"}, {"question_id": 8532, "snippet": "while True:\n   if ser.inWaiting() > 0\n      data = ser.read(ser.inWaiting())\n      print(data)", "intent": "Character comparison of data read in pyserial", "rewritten_intent": "Show the received string's string's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text's text'."}, {"question_id": 34692, "snippet": "json_obj = json.loads(json_string)", "intent": "I'm going to give you an example of how to get a value from Jason in Python three.", "rewritten_intent": "The first thing I want to do is I'm going to write this function on my own."}, {"question_id": 35864, "snippet": "gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\nplt.imshow(gray_img)\nplt.gray()\nplt.show()", "intent": "If you show a grayscale image in OpenCv, the white will turn yellow.", "rewritten_intent": "Show color image in grayscale"}, {"question_id": 49478, "snippet": "plt.xticks(range(0, len(labels), ticks), labels[::ticks])", "intent": "When you do savefig with plot of the Mattlotlib, too many labels on the x-axis will add to the label.", "rewritten_intent": "Let's take a look at how this works."}, {"question_id": 16769, "snippet": "book_list = []\nfor n in range(1, num_of_file + 1):\n    file_name = 'excel_file%d.xls' % (n)\n    book_list.append(xlrd.open_workbook(file_name))", "intent": "It's like reading a file from csv or Excelle at the same time in Python.", "rewritten_intent": "We're going to go through all of the elements in the list."}, {"question_id": 24388, "snippet": "data=np.genfromtxt('file.csv', delimiter=',')", "intent": "I'm going to show you an example of how to do this.", "rewritten_intent": "Read comma-separated CSV file?\". csv.\""}, {"question_id": 2220, "snippet": "dt.timestamp()", "intent": "Let's go ahead and look at this.", "rewritten_intent": "We're going to go through each of these data points and see if we can figure out what's going on."}, {"question_id": 44723, "snippet": "df[df['col_name'].str.contains('string')]", "intent": "I'd like to ask you how to extract a line that contains a particular string.", "rewritten_intent": "I'm going to show you how to do this."}, {"question_id": 39007, "snippet": "from .. import file.py", "intent": "In Python, I don't know much about the mport system. I also have an error.", "rewritten_intent": "Import modules from upper directory"}, {"question_id": 46711, "snippet": "list[-n:]", "intent": "I want to extract n at the end of the list", "rewritten_intent": "I'm going to add a list of elements to the list, and I'm going to remove the elements from the end of the list at the end of the list."}, {"question_id": 17648, "snippet": "b_string.decode('unicode-escape')", "intent": "Python character conversion: UTF-16 to UTF-8", "rewritten_intent": "Convert Unicode escaped byte string b_string to string"}, {"question_id": 9633, "snippet": "str.replace(old_s, new_s)", "intent": "For example, I would like to edit text files from Python, but is there any better way to do this than write them one line at a time when they are saved?", "rewritten_intent": "Here's how it works."}, {"question_id": 37327, "snippet": "while True:\n  try:\n    line = input()\n    if line == '':\n        break\n    else:\n        yield line\n    except EOFError:\n        break", "intent": "In Python 3 we want to determine an empty line input to input, but no EOFEror can occur.", "rewritten_intent": "Accept standard input until empty lines are entered"}, {"question_id": 37831, "snippet": "model.fit(X, Y, epochs=200, batch_size=1, verbose=0)", "intent": "How not to print a log during calculation using Keras", "rewritten_intent": "Do model learning without printing a log"}, {"question_id": 53340, "snippet": "str.encode('utf-8')", "intent": "How to fix Attribute Editor", "rewritten_intent": "Byte array"}, {"question_id": 45120, "snippet": "for i in range(n):\n    df[i] = pd.DataFrame()", "intent": "I want to change the name of DataFame automatically in for loops in Python.", "rewritten_intent": "So let's look at the data frame and see what we can do about it."}, {"question_id": 24987, "snippet": "re.sub('[\\u3000]{2,}', '\\u3000', str)", "intent": "I want to replace a continuous full-angle space with one full-angle space.", "rewritten_intent": "I'm going to do this in a different color, and I'm going to do this in a different color."}, {"question_id": 33012, "snippet": "from . import file.py", "intent": "Let's go ahead and read it.", "rewritten_intent": "Emport modules from directorys of the same family"}, {"question_id": 50500, "snippet": "cv2.imwrite('file.jpg', img)", "intent": "p, li {white-space: pre-wrap;} p, li {white-space: pre-wrap;} p, li {white-space: pre-wrap;} p, li {white-space: pre-wrap;} p, li {white-space: pre-wrap;} p, li {white-space: pre-wrap;} p, li {white-space: pre-wrap;} p, li {white-space: pre-wrap;}", "rewritten_intent": "Save the image as the file name."}, {"question_id": 41336, "snippet": "np.dot(a, b)", "intent": "What's the broadcast of Python numpy?", "rewritten_intent": "We're going to compute the product of the matrix A and the matrix B."}, {"question_id": 48742, "snippet": "df = pd.read_table('file.txt', header=None, delim_whitespace=True)\ndf.to_csv('new_file.csv', index=False, header=False)", "intent": "I want to convert. txt file to. csv file", "rewritten_intent": "Convert space-separated text files to comma-separated csv file_file. csv"}, {"question_id": 35271, "snippet": "str(n)", "intent": "Is it possible to set a variable with the open function in Python?", "rewritten_intent": "Converts len to a string"}, {"question_id": 30337, "snippet": "chainer.functions.concat([x1, x2], axis=1)", "intent": "So let's take a look at how this works.", "rewritten_intent": "I'm going to show you how to do this."}, {"question_id": 49825, "snippet": "@profile \ndef function():\n    #function_code", "intent": "Memory error in \"jupyter notebook.\"", "rewritten_intent": "Let's take a look at how much memory we can use for this function."}, {"question_id": 53030, "snippet": "a,b,c = map(int,input().split())", "intent": "I want to get multiple numbers in a single line in the input.", "rewritten_intent": "Get multiple integers in input"}, {"question_id": 20048, "snippet": "c = Counter(tuple(x) for x in li)\n[list(k) for k,v in c.items() if v >=2]", "intent": "Using Python to extract duplicate arrays from 2D arrays", "rewritten_intent": "I'm going to do it in a different color. I'm going to do it in a different color."}, {"question_id": 21070, "snippet": "list(filter(lambda x:x not in li2, li))", "intent": "I'm going to show you how to do that.", "rewritten_intent": "Let's take a look at how this works."}, {"question_id": 19098, "snippet": "li.sort()\nM = len(li) - 1\nfor i, e in enumerate(li):\n    j = i + 1\n    k = M\n    while k > j:\n        s = li[i] + li[j] + li[k]\n        if s == 0:\n            print(li[i], li[j], li[k])\n            k -= 1\n        elif s > 0:\n            k -= 1\n        else:\n            j += 1", "intent": "So let's see if we can figure out what the sum of the three integers that we've taken out of the list is equal to 0.", "rewritten_intent": "It's going to be a list of integers, and it's going to be a list of integers, and it's going to be a list of integers, and it's going to be a list of integers, and it's going to be a list of integers, and it's going to be a list of integers, and it's going to be a list of integers, and it's going to be a list of integers, and it's going to be a list of integers."}, {"question_id": 42804, "snippet": "mecab = MeCab.Tagger('-Ochasen')\ninfo = mecab.dictionary_info()\nprint(info.charset)", "intent": "I'd like to use MeCab in Python 3.", "rewritten_intent": "Show dictionary data character code"}, {"question_id": 29214, "snippet": "model = word2vec.Word2Vec.load('old_model')\nmodel.train(sentences)", "intent": "I'm going to show you how to do that.", "rewritten_intent": "We're going to build a new model by reading an existing model 'old_model' and using the data lexer' to learn it."}, {"question_id": 36377, "snippet": "print(np.array2string(ary, separator=', ', formatter={'float_kind': lambda x: '{: .4f}'.format(x)}))", "intent": "How to print each element in the NumPy array with commas", "rewritten_intent": "I'm going to put a comma on each element of the sequence, and then I'm going to put a comma on each element of the string, and I'm going to show you how far it's going to go."}, {"question_id": 23839, "snippet": "contents = subprocess.check_output('cat file', shell=True)", "intent": "How to execute an external command in Python and add it to its output.", "rewritten_intent": "I'm going to call the external process"}, {"question_id": 34981, "snippet": "img = cv2.imread('file.png', 0)", "intent": "Error. I want to automatically set the image to two values. The big algorithm.", "rewritten_intent": "Load image 'file. png' on grayscale"}, {"question_id": 25412, "snippet": "print(sess.run(W))\nprint(sess.run(b))", "intent": "I'm going to give you an example of how to do this.", "rewritten_intent": "Let's see if we can do that."}, {"question_id": 33506, "snippet": "base64.b64decode(s).decode()", "intent": "Decoding Gmail UTF-8 mail with Python 3.6.0 failed", "rewritten_intent": "Here's how it works."}, {"question_id": 24190, "snippet": "plt.scatter(x, y)", "intent": "Let's talk about an error in x and y must be the same size.", "rewritten_intent": "Show the chart of the array's x's, x's', and y's"}, {"question_id": 40646, "snippet": "soup = bs4.BeautifulSoup(html, 'lxml')\nunorder_list = soup.find_all('ul', id='front')\nnew_list = []\nfor ul_tag in unorder_list:\n    for li in ul_tag.find_all('li'):\n        new_list.append(li.text)\nprint(new_list)", "intent": "How do you store the contents of the \"L\" as a list using the \"BeautifulSchool\"?", "rewritten_intent": "We're going to add a list of HTML files, and we're going to add a list of all the strings in the HTML file."}, {"question_id": 41775, "snippet": "df[df.duplicated(subset=col_lable)]", "intent": "Let's take a look at how this works.", "rewritten_intent": "The column in the data frame is a row where the column in the data frame is combined with the column in the data frame."}, {"question_id": 33034, "snippet": "pandas.crosstab(df[col_1], df[col_2]).plot(kind='bar',stacked=True)", "intent": "I want to build up a bar graph from the pandas data frame.", "rewritten_intent": "We're going to do a cross-counting of the data, and then we're going to graph it."}, {"question_id": 23246, "snippet": "ans = []\nfor index, value in enumerate(li):\n    if value == v:\n        ans.append(index)", "intent": "double element search in the python list", "rewritten_intent": "I'm going to show you the index of the element that matches the value v that we're searching for from the list  all of the elements that we're looking for, and we're going to show it."}, {"question_id": 23246, "snippet": "ans = [ i for i, value in enumerate(li) if value == v]", "intent": "double element search in the python list", "rewritten_intent": "I'm going to show you the index of the element that matches the value v that we're searching for from the list  all of the elements that we're looking for, and we're going to show it."}, {"question_id": 30088, "snippet": "d.pop(k, None) ", "intent": "Remove keys that may not exist in Python", "rewritten_intent": "Remove the key in the dictionary type, which may not exist in the dictionary object."}, {"question_id": 41700, "snippet": "df.drop_duplicates(subset=col_lable)", "intent": "Compare Two Data Frames", "rewritten_intent": "Remove a row that is duplicated in the data frame"}, {"question_id": 30824, "snippet": "today = datetime.date.today()\nprevious_month = today - dateutil.relativedelta.relativedelta(months=1)", "intent": "I want to get the last month of Python Dettime.", "rewritten_intent": "Gets a date a month from today."}, {"question_id": 30882, "snippet": "bluetooth.byte_to_signed_int()", "intent": "I want to use Python to get bluetooth's RSSI values.", "rewritten_intent": "Get bluetooth's RSSI values"}, {"question_id": 42011, "snippet": "str.strip()", "intent": "How to prevent a new line from being changed in Python's inputs)", "rewritten_intent": "Removes a space and a line from a string"}, {"question_id": 23218, "snippet": "f,t,Sxx = signal.spectrogram(data, fs)\nplt.pcolormesh(t, f, Sxx)", "intent": "I want to print out data that can be drawn in pyb.", "rewritten_intent": "Let's take a look at what's going on here."}, {"question_id": 39255, "snippet": "sjis_str.decode('shift-jis')", "intent": "Converting to a string of utf-8s from Shift-jis type in Python", "rewritten_intent": "Decoding strings with Shift_JIS"}, {"question_id": 41519, "snippet": "df[col] = df[col].astype(str)", "intent": "For data type conversion of CSV file: dtype will not change", "rewritten_intent": "Let's go ahead and change this to a string type."}]