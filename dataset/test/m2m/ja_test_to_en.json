[{"question_id": 37146, "snippet": "arr[:, 0]", "intent": "about the meaning of mglearn.discrete_scatter (X_train[:, 0], X_train[:, 1], y_train)", "rewritten_intent": "The element of the two-dimensional sequence 'arr' is the one-dimensional sequence that exceeds only the initial value."}, {"question_id": 25263, "snippet": "df.to_dict()", "intent": "In Python\u2019s Pandas data frame, let me know how to convert it to the specified dictionary type.", "rewritten_intent": "Convert the data frame into a dictionary object."}, {"question_id": 28178, "snippet": "soup.find('tbody').find_all('tr')", "intent": "I want to use beautifulsoup to write a regular 20 rows 24 rows of horse racing data table in the CSV.", "rewritten_intent": "Get each line from the HTML table."}, {"question_id": 21638, "snippet": "labels[n].set_color('red')", "intent": "Matplotlib changes the specific color of the y axis.", "rewritten_intent": "Changes the color of a specific eye\u2019n\u2019s y axis to red."}, {"question_id": 34517, "snippet": "nonlocal a", "intent": "Change the value of the local variable within the function from the assigned function.", "rewritten_intent": "See and change the variable 'a' defined by the external function from the assigned function."}, {"question_id": 8656, "snippet": "class handler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        os.environ['REQUEST_METHOD'] = 'POST'\n        form = cgi.FieldStorage(self.rfile, self.headers)", "intent": "You can't receive the data sent by POST in Python's cgi.FieldStrage.", "rewritten_intent": "Get POST data with cgi.FieldStrage"}, {"question_id": 9836, "snippet": "random.choice(li)", "intent": "What should I do if I want to randomly select one element from the list? (python)", "rewritten_intent": "Select one element randomly from the list`li`."}, {"question_id": 1589, "snippet": "X = np.array(d, dtype='float32')\nX.tofile('binaryVec.bin')", "intent": "I want to convert the output in word2vec in text mode to output in binary mode in Python.", "rewritten_intent": "The element saves the number list data`d` as binary data`binaryVrc.bin`"}, {"question_id": 16807, "snippet": "doc.toxml(encoding='sjis'))", "intent": "In Python, XML errors occur and write.", "rewritten_intent": "Pass the xml document 'doc' with the letter code 'sjis'"}, {"question_id": 38532, "snippet": "f.close()", "intent": "Is it possible to write and download files on a jupyter notebook?", "rewritten_intent": "Open the 'f' file."}, {"question_id": 37696, "snippet": "requests.post(url, files=files, data=data)", "intent": "Multipart Requests.", "rewritten_intent": "In a multipart request, a number of data 'files' and 'data' are posted to 'url'."}, {"question_id": 29368, "snippet": "sss = StratifiedShuffleSplit()\nsss.get_n_splits(X, y)", "intent": "In Scikit-learn I want to divide the data taking into account the number of classes.", "rewritten_intent": "Divide the data by keeping the ratio of class numbers."}, {"question_id": 40699, "snippet": "plt.yticks(range(low,high))", "intent": "About the problem that the axis numbers are not displayed when using matplotlib", "rewritten_intent": "Set the frame range of the y axis to 'low', 'high' and 'low'."}, {"question_id": 11011, "snippet": "fig.canvas.mpl_connect('pick_event', onclick)", "intent": "Get the coordinates on the 3D graph of matplotlib", "rewritten_intent": "Show the coordinates of the selected data on the chart."}, {"question_id": 42344, "snippet": "re.compile('[\u3041-\u3093\u30a1-\u30f3\u4e00-\u9fa5]+')", "intent": "I want to remove elements other than Japanese from the list.", "rewritten_intent": "You can get a regular expression to identify the language of Japanese (no, katakana, kanji)."}, {"question_id": 17145, "snippet": "br.submit().read()", "intent": "Enter and download your password automatically.", "rewritten_intent": "Read the return value when submitted from the browser object`br`"}, {"question_id": 38824, "snippet": "[print(*i) for i in data]", "intent": "I want to get Python 3 out of the empty section.", "rewritten_intent": "Show the 'data' tab in a vacuum section."}, {"question_id": 38824, "snippet": "for i in data:\n     print(' '.join(str(j) for j in i))", "intent": "I want to get Python 3 out of the empty section.", "rewritten_intent": "Show the 'data' tab in a vacuum section."}, {"question_id": 38824, "snippet": "for i in data:\n     print(' '.join(map(str, i)))", "intent": "I want to get Python 3 out of the empty section.", "rewritten_intent": "Show the 'data' tab in a vacuum section."}, {"question_id": 35299, "snippet": "z = tf.constant(0, shape=[n, n], dtype=tf.int32)\nabs = tf.maximum(t, z)\nresult = tf.reduce_sum(abs)", "intent": "In Tensorflow, I want to calculate the equity of more than 0 of the Tensor elements.", "rewritten_intent": "Calculate the value of more than 0 of the tensol elements in 'n' \u00d7 'n'"}, {"question_id": 40370, "snippet": "button.clicked.connect(self.w.close)", "intent": "I want to create a button to close only the subwindow in pyqt5.", "rewritten_intent": "When the 'button' button is clicked, it only closes the relevant window."}, {"question_id": 27830, "snippet": "hashlib.sha1(f.read()).hexdigest()", "intent": "The data of the file uploaded in Flask, Request.data, will be empty.", "rewritten_intent": "File 'f' requires the sha1 hash value."}, {"question_id": 41677, "snippet": "db.execute('insert into img_table values(?)', [blob])", "intent": "How to INSERT PDF Data in Python3+SQlite", "rewritten_intent": "Insert the image data in 'img_table' in the DB."}, {"question_id": 33970, "snippet": "print(settings.DATABASES)\n", "intent": "The database of Django.", "rewritten_intent": "Show the setup of the database."}, {"question_id": 38328, "snippet": "df.x.str.extract(pat)", "intent": "I want to extract the numbers in the letter line that are included in dataframe.", "rewritten_intent": "Apply the formal expression 'pat' to the data of each line of the 'x' column label in the 'df' data frame."}, {"question_id": 37418, "snippet": "open(file, 'w')", "intent": "I can't write to CSV, please tell me.", "rewritten_intent": "Open the 'file' file in the mode."}, {"question_id": 41200, "snippet": "plt.plot(x_list, y_list)", "intent": "Identify the starting point of the graph in matplotlib.", "rewritten_intent": "To design a graph of data`x_list` and`y_list`"}, {"question_id": 43255, "snippet": "btn.setEnabled(False)", "intent": "I don\u2019t want to press the button on Pyqt 5.", "rewritten_intent": "Try not to press the \u2018btn\u2019 button."}, {"question_id": 43369, "snippet": "pd.DataFrame([a, b])", "intent": "The link to the pandas series.", "rewritten_intent": "Connect two data frame \u2018a\u2019 and \u2018b\u2019 in a direction."}, {"question_id": 24438, "snippet": "f = codecs.open(file, 'r', 'utf-8')", "intent": "Ascii' codec can't encode characters in position 0-1: ordinal not in range (128).", "rewritten_intent": "Select the font code to utf-8 and open the file`file`."}, {"question_id": 10215, "snippet": "with open(file, 'rb') as f:\n    data = f.read()", "intent": "Does the encoding of the text file change by itself?", "rewritten_intent": "Open the 'file' file as binary data."}, {"question_id": 28982, "snippet": "pprint.pprint(li)", "intent": "Can you easily see the content of the list?", "rewritten_intent": "The list 'li' is easily displayed."}, {"question_id": 18992, "snippet": "pickle.dump(x, open('hoge.pkl', 'wb'))", "intent": "Python Pickle File Mode (Binary Mode Needs)", "rewritten_intent": "Save the object 'x' in the file 'hoge.pkl'"}, {"question_id": 38400, "snippet": "df.replace(change_dict)", "intent": "Replacement of Pandas.", "rewritten_intent": "Replace multiple different elements in the 'df' data frame according to the keys and the pair of elements in the 'change_dict' dictionary object"}, {"question_id": 17321, "snippet": "b.save()", "intent": "I want to enter data from the outside in Django\u2019s database.", "rewritten_intent": "Insert or update the object 'a' in the DB and save it."}, {"question_id": 35793, "snippet": "data = []\ni = 0\nwhile(i<100):\n    data.append(pd.read_csv('file_%d.csv'%i))\n    i+=1", "intent": "I want to get a CSV and get it in.", "rewritten_intent": "Incorporate 100 CSV files 'file_%d' in the list."}, {"question_id": 20549, "snippet": "numpy.save('my_vector', vectorized.toarray()", "intent": "About the TfidfVectorizer.", "rewritten_intent": "Save the vector 'vectorized' in the 'my_vector.npy' file"}, {"question_id": 9518, "snippet": "for i, name in enumerate(li):\n    print(i, name)", "intent": "Python: I want to return the index in the Ethereum class", "rewritten_intent": "Repeat the index and element in the list'li' and display it."}, {"question_id": 19144, "snippet": "f = open('test.html', 'w')\nf.write(text.encode('utf-8'))", "intent": "Speaking in Python in PDF.", "rewritten_intent": "Open the HTML file 'test.html' and save the text object 'text' in utf-8"}, {"question_id": 39740, "snippet": "path = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0]\nsys.path.append(path)", "intent": "I want to import modules above the layers that run the program in Python.", "rewritten_intent": "To import upper layer modules from the run program, add the corresponding Path to Python's Path."}, {"question_id": 38760, "snippet": "print(arr[arr > n].sum())\nprint(numpy.sum(arr > n))", "intent": "Is there no sumif, countif function like Excel in the Numpy sequence?", "rewritten_intent": "Numpy series`arr` requires the total and number of elements greater than the number`n`"}, {"question_id": 35102, "snippet": "results = {}\nfor item in data:\n    results[item.find('areacode').text] = item.find('prefecture').text", "intent": "Create a two-dimensional rope.", "rewritten_intent": "Search the letters 'area_code' and 'prefecture' from the 'data' element and create the dictionary 'results' each with the key and the element."}, {"question_id": 41440, "snippet": "np.stack(arr_list)", "intent": "Conversion from list to np.array", "rewritten_intent": "The element converts the list`arr_list` of the NumPy series into a two-dimensional NumPy series."}, {"question_id": 35741, "snippet": "soup.find_all('p')", "intent": "Python 3 and Beautifulsoup 4", "rewritten_intent": "Find all tags`p` from the object`soup` that has passed HTML"}, {"question_id": 40444, "snippet": "df.groupby([c_lable]).last()", "intent": "Setting CSV data in Python.", "rewritten_intent": "Remove the last line of the data collected in the groupby with the column 'c_label' in the 'df' data frame."}, {"question_id": 39240, "snippet": "print([i for i in b_list if i in a_list])", "intent": "Extract the value of the list from the Python list.", "rewritten_intent": "Showing what matches the element in the list`a_list` in the list`a_list`"}, {"question_id": 39375, "snippet": "datetime.strptime(dt_s,'%d%b%Y')", "intent": "Conversion of dates including the English name of the month", "rewritten_intent": "Convert the date format '%d%b%Y' string`dt_s` into datetime type"}, {"question_id": 37638, "snippet": "ppt.slide_width = X\nppt.slide_height = Y", "intent": "I want to change the size of the slide with python-pptx.", "rewritten_intent": "Change the size of the presentation object`ppt` to the width`X` and the width`Y` in English Metric Unit."}, {"question_id": 38960, "snippet": "li = [int(c) for c in n]", "intent": "Distribution of numbers in Python 3.", "rewritten_intent": "Divide the number 'n' and store it on the list."}, {"question_id": 33908, "snippet": "options = Options()\noptions.set_preference('javascript.enabled', False)\ndriver = webdriver.Firefox(options=options", "intent": "Disable JavaScript with Python Selenium.", "rewritten_intent": "Delete JavaScript in seleniumt for Firefox specifications."}, {"question_id": 33908, "snippet": "profile = webdriver.FirefoxProfile()\nprofile.DEFAULT_PREFERENCES['frozen']['javascript.enabled'] = False\nprofile.set_preference(\"app.update.auto\", False)\nprofile.set_preference(\"app.update.enabled\", False)\nprofile.update_preferences()", "intent": "Disable JavaScript with Python Selenium.", "rewritten_intent": "Delete JavaScript in seleniumt for Firefox specifications."}, {"question_id": 33908, "snippet": "profile = webdriver.FirefoxProfile()\nprofile.set_preference(\"javascript.enabled\", False)\ndriver = webdriver.Firefox(profile)", "intent": "Disable JavaScript with Python Selenium.", "rewritten_intent": "Delete JavaScript in seleniumt for Firefox specifications."}, {"question_id": 19770, "snippet": "s.isnumeric()", "intent": "About isnumeric.", "rewritten_intent": "To determine whether the letter 's' represents the number."}, {"question_id": 29614, "snippet": "original_socket = socket.socket", "intent": "Use PySocks to scrap web through Tor", "rewritten_intent": "Save the Socket information."}, {"question_id": 41032, "snippet": "os.listdir(dir)", "intent": "Get the last file name in the folder.", "rewritten_intent": "Get a list of files in the directory`dir`."}, {"question_id": 37709, "snippet": "img is None", "intent": "about the error in files = os.listdir('./data/' + d)", "rewritten_intent": "Find out if the image 'img' is empty."}, {"question_id": 39516, "snippet": "cupy.concatenate((a_1,a_2),axis=0)", "intent": "Combination in cupy processing.", "rewritten_intent": "Connect a_1 and a_2"}, {"question_id": 29331, "snippet": "stream.filter(track=[u'\u4e2d\u56fd', ], languages=['zh'])", "intent": "I want to use Twitter from Python to get Chinese tweet.", "rewritten_intent": "From the Stream Object 'stream' the language leaves out only Chinese tweet"}, {"question_id": 35881, "snippet": "cnn.saver.restore(cnn.sess, 'model.ckpt')", "intent": "In tensorflow, class and saver.save cannot be used together.", "rewritten_intent": "Download the defined class `cnn` learned model `mode.ckpt`"}, {"question_id": 33677, "snippet": "p = Poly(f, x)\np.coeffs()", "intent": "Tell me how to use the sympy coeff.", "rewritten_intent": "A list of the multi-point 'f' for 'x' for each sequence."}, {"question_id": 37449, "snippet": "a & b", "intent": "Why is \u201cif 1 & 5\u201d True?", "rewritten_intent": "The variable \u2018a\u2019 and \u2018b\u2019 is a bit."}, {"question_id": 42442, "snippet": "globals()", "intent": "What is the Global Method used for?", "rewritten_intent": "Get a list of global variables."}, {"question_id": 40830, "snippet": "for line in stdin:\n    a = line.rstrip().split(' ')\n    print(a)", "intent": "What should I do when I run a competition program in Python, when I enter a number of rows (up to the end of the input) and data in one row with a spacecraft?", "rewritten_intent": "Storage and display the 'stdin' input divided in space in the variable."}, {"question_id": 40830, "snippet": "l = []\nfor line in stdin:\n  a = line.rstrip().split(' ')\n  l.append(a)\nprint(l)", "intent": "What should I do when I run a competition program in Python, when I enter a number of rows (up to the end of the input) and data in one row with a spacecraft?", "rewritten_intent": "Storage and display the 'stdin' input divided in space in the variable."}, {"question_id": 38030, "snippet": "Counter(word_list)", "intent": "In Python, you want to draw text from the file and create something like searching for which word you search and how many times it comes out. Can you create a list for each phrase and use for and so on to create a list for each phrase when searching there?", "rewritten_intent": "Number the words that appear in the 'word_list' list."}, {"question_id": 38878, "snippet": "search = api.search(q=word)", "intent": "Use Tweepy to learn a tweet containing a string in a certain interval and tweet the text contained in that tweet.", "rewritten_intent": "Use the tweepy instance`api` to search for tweets containing a string`word` and get the results as a list."}, {"question_id": 38724, "snippet": "def add_functions(f, g):\n    return lambda x: f(x) + g(x)", "intent": "In python, I want to use lambda to create the function \"Receive and return the function\".", "rewritten_intent": "Define the function 'add_functions' to obtain 'f' and 'g' and calculate the equation between the functions."}, {"question_id": 22439, "snippet": "type(obj)", "intent": "Can I get Class Objects in Python?", "rewritten_intent": "Get Object 'obj' class."}, {"question_id": 22439, "snippet": "obj.__class__", "intent": "Can I get Class Objects in Python?", "rewritten_intent": "Get Object 'obj' class."}, {"question_id": 39340, "snippet": "with urllib.request.urlopen(url) as r:\n    print(r.read())", "intent": "I want to see the URLs that you specified.", "rewritten_intent": "Show the URL\u2019s that you\u2019ve specified."}, {"question_id": 17418, "snippet": "cv2.drawKeypoints(img, kp, img2, color=(0,255,0), flags=0)", "intent": "Python 2.7 Opencv3.0 is an open source.", "rewritten_intent": "The input image is 'img' and the output image is 'img2' and the characteristic point 'kp' is drawn."}, {"question_id": 39589, "snippet": "os.path.join(foldername, filename)", "intent": "There is an error in os.walk(), shutilcopy().", "rewritten_intent": "Get a pass linking the folder name 'foldername' and the file name 'filename'"}, {"question_id": 23577, "snippet": "ax.set_xlim(l, h)", "intent": "Data processing in python pandas.", "rewritten_intent": "Set the range of the X axis to the lower 'l' and the upper 'h'"}, {"question_id": 41087, "snippet": "int(math.ceil(src/float(range)) * range)", "intent": "Cut and Cut in Python.", "rewritten_intent": "Cut the whole number 'src' in the multiplication of a specific range 'range'."}, {"question_id": 41087, "snippet": "src if src % range == 0 else src + range - src % range", "intent": "Cut and Cut in Python.", "rewritten_intent": "Cut the whole number 'src' in the multiplication of a specific range 'range'."}, {"question_id": 40711, "snippet": "random_numbers = np.random.rand(n)\nanswer = N * random_numbers / np.sum(random_numbers)", "intent": "In Numpy, under the limit that the total number of elements becomes N, the n-dimensional random vector is produced.", "rewritten_intent": "Under the limit that the total number of elements becomes 'N', the 'n' dimensional random vector 'answer' is generated."}, {"question_id": 40711, "snippet": "answer = np.random.dirichlet(np.ones(n)) * N", "intent": "In Numpy, under the limit that the total number of elements becomes N, the n-dimensional random vector is produced.", "rewritten_intent": "Under the limit that the total number of elements becomes 'N', the 'n' dimensional random vector 'answer' is generated."}, {"question_id": 31924, "snippet": "random.shuffle(li)", "intent": "Identify the range of elements that are removed from the list and combine them randomly.", "rewritten_intent": "Replace the list 'li' to random."}, {"question_id": 40343, "snippet": "itertools.product(a,b)", "intent": "A program to calculate the combination of texts.", "rewritten_intent": "Generate a number of lists 'a' and 'b' and get the result of the combination of elements."}, {"question_id": 36217, "snippet": "df['a'].str.extract(reg, expand=True)", "intent": "How do I write the data extracted from the column data in a regular expression into a new column?", "rewritten_intent": "Extract the column 'a' in the 'df' data frame with a regular expression 'reg'"}, {"question_id": 27871, "snippet": "d = {f+s : cost for ((f,s), cost) in zip(product(factories,shops), costs)}", "intent": "How to store the line of letters generated in for\u6587", "rewritten_intent": "Key to the combination of the two list 'factories' and 'shops' elements and create a dictionary-like object with each element 'costs' in the tables."}, {"question_id": 27871, "snippet": "root = [''.join((x, y)) for x, y in itertools.product(factories, shops)]\nd = dict(zip(root, cost))", "intent": "How to store the line of letters generated in for\u6587", "rewritten_intent": "Key to the combination of the two list 'factories' and 'shops' elements and create a dictionary-like object with each element 'costs' in the tables."}, {"question_id": 40676, "snippet": "sop.find_all(attrs={\"data-locate\": \"address\"})", "intent": "Obtaining specific li content using BeautifulSoup", "rewritten_intent": "Search for HTML5\u2019s data-properties, such as \u2018data-locel\u2019 corresponding to \u2018address\u2019 from the object \u2018soup\u2019"}, {"question_id": 42256, "snippet": "s = ''.join(i[0] for i in li)", "intent": "I want to link the headlines in the list.", "rewritten_intent": "Give the list's head letters associated with the element's string's."}, {"question_id": 42256, "snippet": "s = ''\nfor line in li:\n    s += v[0]", "intent": "I want to link the headlines in the list.", "rewritten_intent": "Give the list's head letters associated with the element's string's."}, {"question_id": 18967, "snippet": "if i not in li:", "intent": "I want to use the list of conditions in Python's forrupt text.", "rewritten_intent": "In the list`li` does not include the element`i`."}, {"question_id": 37648, "snippet": "json.dumps(req_data).encode('utf-8'))", "intent": "POST data should be bytes or an iterable of bytes.", "rewritten_intent": "Symbolize the 'req_data' data to the server with UTF-8."}, {"question_id": 22991, "snippet": "cmd = 'du -b /var/hoge'\nint(subprocess.check_output(cmd, shell=True).split()[0])", "intent": "I want to keep the directory size as an output result in the subprocess check_call.", "rewritten_intent": "Use the Linux du command to get the size of the directory`/var/hoge`"}, {"question_id": 39502, "snippet": "re.sub('([\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc])\\s+((?=[\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc]))',r'\\1\\2', str)", "intent": "Delete the gap between Japanese in Python", "rewritten_intent": "Remove the empty empty empty empty empty empty empty empty"}, {"question_id": 16805, "snippet": "u'{0}{1}'.format(s, n)", "intent": "In Python, XML errors occur and write.", "rewritten_intent": "Convert the variables`s` and`n` to UTF-8 and connect them."}, {"question_id": 40978, "snippet": "[x+1 for x in range(M) for y in range(N)]", "intent": "I want to create a list like [1,1,1,2,2,3,3,3,4,4]", "rewritten_intent": "1 is 'N' and 2 is 'N', ... and 'M' generates a list of 'N' and 'N'."}, {"question_id": 40978, "snippet": "[i // n + 1 for i in range(N * M)]", "intent": "I want to create a list like [1,1,1,2,2,3,3,3,4,4]", "rewritten_intent": "1 is 'N' and 2 is 'N', ... and 'M' generates a list of 'N' and 'N'."}, {"question_id": 39379, "snippet": "[h.get_height() for h in sns.distplot(x).patches]", "intent": "I want to know the location of the pins on the graph displayed in seaborn's distplot.", "rewritten_intent": "Get the height of the pins on the histogram on the data`x` displayed in distplot as a list."}, {"question_id": 38415, "snippet": "ax=plt.subplot(aspect='equal')", "intent": "How to change the shape of the graph in matplotlib", "rewritten_intent": "Make the graph's drawing range 'ax' square."}, {"question_id": 37757, "snippet": "locals()[string]", "intent": "How to change a string into an instance in Python", "rewritten_intent": "Assess the value of the string variable as a numerical instance variable."}, {"question_id": 37757, "snippet": "eval(string)", "intent": "How to change a string into an instance in Python", "rewritten_intent": "Assess the value of the string variable as a numerical instance variable."}, {"question_id": 34422, "snippet": "d = json.loads(s_json)", "intent": "What are the elements in the element?", "rewritten_intent": "Get a dictionary object`d` from the letter 's_json` to represent JSON."}, {"question_id": 27686, "snippet": "soup.get('a_id')", "intent": "I want to get the attribute of im:id in the feedparser and I analyze the XML of Apple\u2019s iOS ranking data.)", "rewritten_intent": "Get the attribut value of 'a_id' in the HTML pas object`soup` in the HTML tag"}, {"question_id": 41054, "snippet": "[os.rename(f, f.replace('.dat', '.gui')) for f in os.listdir('.') if not f.startswith('.')]", "intent": "I want to replace the file extension in a specific folder.", "rewritten_intent": "Convert all file extensions with a specific extension `.dat` in the Calendar Directory to `.gui`"}, {"question_id": 43303, "snippet": "df2 = df.reset_index(drop=True)", "intent": "The connection of DataFrame.", "rewritten_intent": "Get a new 'df2' data frame that has restored the index of the 'df' data frame."}, {"question_id": 43322, "snippet": "df.resample('1min').ffill()", "intent": "Extension and Supplement of Data Framework.", "rewritten_intent": "Repeat the 'df' data frame contained in the time series data every 1 minute, and the inter-value is supplemented with the prior value."}, {"question_id": 35683, "snippet": "z.real", "intent": "How to set output formats for the calculation of multiple numbers (a+jb+c+jd; a,b,c,d:real)", "rewritten_intent": "You only get the real number of \u2018z\u2019."}, {"question_id": 41058, "snippet": "list(itertools.combinations(iter, r))", "intent": "I would like to tell you how to show a combination up to 0, 1, 2, and a (b+1)", "rewritten_intent": "Get the combination of the 'r' elements of the intolerable object 'iter' as a list."}, {"question_id": 42573, "snippet": "sheet.cell_value(row, col))", "intent": "I want to call the value of the cell in Excel.", "rewritten_intent": "Excel Sheet Object`sheet` receives the value of the cell in the line`row` and column`col`"}, {"question_id": 30539, "snippet": "__builtins__.eval = lambda x: 'eval is not allowed'", "intent": "How to make errors by the standard function used in the method", "rewritten_intent": "The integrated function 'eval' shows an error when called."}, {"question_id": 40361, "snippet": "func(*args)", "intent": "How to keep the list in a list.", "rewritten_intent": "Pack 'args' and send it to 'func'."}, {"question_id": 43333, "snippet": "d = {'range': r, 'result': l}\ndf = pd.DataFrame(data=d)", "intent": "Repeat about the construction of DataFrame.", "rewritten_intent": "Create a list of 'range' elements and a list of 'result' elements as a list of 'l' data frame."}, {"question_id": 6972, "snippet": "try:\n    hoge()\nexcept:\n    traceback.print_exc()", "intent": "I want to catch all the exceptions in Python and show details.", "rewritten_intent": "Show details of exceptional errors."}, {"question_id": 6972, "snippet": "try:\n    hoge()\nexcept:\n    print(sys.exc_info())", "intent": "I want to catch all the exceptions in Python and show details.", "rewritten_intent": "Show details of exceptional errors."}, {"question_id": 6972, "snippet": "try:\n    hoge()\nexcept Exception as e:\n    print('Error:', e.args)\n    fuga()", "intent": "I want to catch all the exceptions in Python and show details.", "rewritten_intent": "Show details of exceptional errors."}, {"question_id": 11582, "snippet": "f = open(r'C:\\Users\\Documents\\python programs', 'r', encoding='utf-8')", "intent": "If you use the open function, there will be an unicode error.", "rewritten_intent": "Open the file`C:\\Users\\Documents\\python programs`"}, {"question_id": 12174, "snippet": "print(sys.path)", "intent": "with Pythonpath.", "rewritten_intent": "Showing PythonPath"}, {"question_id": 4616, "snippet": "fetchone()", "intent": "'NoneType' object has no attribute '__getitem__'' error in Python", "rewritten_intent": "Get the next line sequence of the query results."}, {"question_id": 20536, "snippet": "print(os.getcwd())", "intent": "IOError: [Errno 2] No such file or directory is displayed in python.", "rewritten_intent": "Show the current work directory."}, {"question_id": 6225, "snippet": "sum(1 for line in open('myfile.txt'))", "intent": "I want to get the number of lines in Python.", "rewritten_intent": "Get the number of lines in the text file`myfile.txt`"}, {"question_id": 6225, "snippet": "len(open('myfile.txt').readlines())", "intent": "I want to get the number of lines in Python.", "rewritten_intent": "Get the number of lines in the text file`myfile.txt`"}, {"question_id": 24508, "snippet": "t=threading.Timer(interval, function)\nt.start()", "intent": "Examples that call processing regularly in Python\u2019s Threading.Timer", "rewritten_intent": "Run the slide 't' regularly."}, {"question_id": 47199, "snippet": "if a is not None:\n    print(a)", "intent": "In Python, None is determined and if not None, the variable is processed in if.", "rewritten_intent": "If the variable 'a' is not None, the variable is displayed."}, {"question_id": 23332, "snippet": "for r in data:\n    list.append(', '.join(r))\nprint(\"\\n\".join(list))", "intent": "In Python, the print is missed, but it\u2019s all like it.", "rewritten_intent": "All in the two-dimensional list 'list'"}, {"question_id": 34431, "snippet": "f = open('all_names.csv', 'w', encoding='UTF-8') ", "intent": "Python error'cp932' codec can't encode character", "rewritten_intent": "The letter code."}, {"question_id": 33700, "snippet": "newlist = []\nif any(s.endswith('string') for s in list):\n    newl.append('string')", "intent": "How to Search Partly in a Python List", "rewritten_intent": "Remove the element that is partially consistent with the string that is conditioned from the list`list` and create a new list`newlist`."}, {"question_id": 33700, "snippet": "newlist = []\nfor s in list:\n    if 'string' in s:\n        newlist.append(s)", "intent": "How to Search Partly in a Python List", "rewritten_intent": "Remove the element that is partially consistent with the string that is conditioned from the list`list` and create a new list`newlist`."}, {"question_id": 27556, "snippet": "plt.figure() ", "intent": "I want the graph to be displayed, I want to stop.", "rewritten_intent": "Showing the graph."}, {"question_id": 37060, "snippet": "display(data_frame)", "intent": "TypeError: 'module' object is not callable", "rewritten_intent": "Show the 'data_frame' data frame."}, {"question_id": 31537, "snippet": "cv2.imshow('image', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()", "intent": "In Python, cv2.imshow does not display any images.", "rewritten_intent": "View the image`image`: Wait so that the window does not end immediately."}, {"question_id": 12310, "snippet": "table = Texttable()\nprint(table.draw())", "intent": "What is the best way to create a table in Python?", "rewritten_intent": "Show the 'table' table on the screen (texttable)"}, {"question_id": 19311, "snippet": "df = pd.read_csv('arena.txt', header=None, delim_whitespace=True, decimal=',')", "intent": "In Python 3, use Numpy to make a mistake.", "rewritten_intent": "Download the file`arena.txt` which is used by the comma in a few points."}, {"question_id": 42268, "snippet": "json_str = json.dumps(json_data)", "intent": "It is not possible to return Python objects in str() in json.loads.", "rewritten_intent": "Convert the object`json_data` to the JSON string`json_str`"}, {"question_id": 51387, "snippet": "data = np.genfromtxt('file.csv')", "intent": "ValueError: Too many values to unpack (expected 2)", "rewritten_intent": "Download the CSV file 'file.csv' to 'data'"}, {"question_id": 38598, "snippet": "df.drop(df.index[df.row == \"condition\"], inplace=True)", "intent": "To remove only the lines that meet certain conditions?", "rewritten_intent": "Remove the line that meets the condition."}, {"question_id": 20094, "snippet": "print list[x][y]", "intent": "Remove any value from the list entrance.", "rewritten_intent": "Element in the two-dimensional list 'list'"}, {"question_id": 18780, "snippet": "for i in range(x):\n  for j in range(y):\n    exec(\"list_\" + str(i) + \"_\" + str(j) + \"= [i, j]\")", "intent": "I want to automatically change the name of the list in python for loop.", "rewritten_intent": "Generate a two-dimensional list `list` with numbers attached to the rub."}, {"question_id": 19552, "snippet": "now = datetime.datetime.now()\nfile_name = 'file_{0:%Y%m%d-%H%M%S}.txt'.format(now)", "intent": "I want to enter a date in the name of the Python text file.", "rewritten_intent": "Enter the current date in the file name."}, {"question_id": 38755, "snippet": "a, b = np.polyfit(x, y, 1)\nlinear = a * x + b\n\nax.plot(x, linear,color=\"black\")", "intent": "How to add a linear return straight line to the distribution chart drawn in matplotlib", "rewritten_intent": "Add a linear return line to the graph."}, {"question_id": 4556, "snippet": "class Foo:\n    def whoAmI(self):\n        print( \"I am \" + self.__class__.__name__)\n\nFoo().whoAmI()", "intent": "How to get a class name from a member function.", "rewritten_intent": "Get the name of the class from the member function."}, {"question_id": 4556, "snippet": "class Foo(object):\n    def __init__(self):\n        print(self.__class__.__name__) # >>> Foo\n\na = Foo()\nprint(a.__class__.__name__) # >>> Foo", "intent": "How to get a class name from a member function.", "rewritten_intent": "Get the name of the class from the member function."}, {"question_id": 30895, "snippet": "try:\n    driver.find_element(By.XPATH, element)\nexcept:\n    process_if_the_element_does_not_exist", "intent": "How to verify the existence of elements in XPath", "rewritten_intent": "Use XPath to perform the processing as a condition of the element\u2019s existence."}, {"question_id": 27922, "snippet": "headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0\"}", "intent": "I want to scrap the web in Python 3, but I can't open the existing URL.", "rewritten_intent": "Change the user agent to Firefox."}, {"question_id": 42850, "snippet": "chdir('/path/to') ", "intent": "There will be FileNotFoundError.", "rewritten_intent": "Change the current work directory to 'path/to'"}, {"question_id": 11182, "snippet": "guess = chardet.detect(data)\nunicode_data = data.decode(guess['encoding'])", "intent": "I've got HTML from my website in Python, but I'm writing it.", "rewritten_intent": "Identify the letter code from data and convert it to Unicode."}, {"question_id": 35394, "snippet": "pd.read_csv(file, sep='\\s+')", "intent": "Problems with spacecraft when dealing with CSV with Pandas", "rewritten_intent": "Download the CSV file 'file' divided into empty."}, {"question_id": 35394, "snippet": "pd.read_csv(file, delim_whitespace=True)", "intent": "Problems with spacecraft when dealing with CSV with Pandas", "rewritten_intent": "Download the CSV file 'file' divided into empty."}, {"question_id": 37591, "snippet": "variable = value if variable is None else v", "intent": "If there is no value in the variable, can you replace the value, and if you are in, can you make the processing smart without doing anything?", "rewritten_intent": "Only if there is no value in the variable 'variable', the value will be replaced."}, {"question_id": 37591, "snippet": "variable = value if variable is None else variable", "intent": "If there is no value in the variable, can you replace the value, and if you are in, can you make the processing smart without doing anything?", "rewritten_intent": "Only if there is no value in the variable 'variable', the value will be replaced."}, {"question_id": 11601, "snippet": "os.startfile('C:\\Program Files\\....\\app.exe')", "intent": "When you open the file in Python, there was an error called PermissionError: Permission denied.", "rewritten_intent": "Run the app on Windows."}, {"question_id": 26837, "snippet": "num_list = []\nwhile numer != 0:\n  num.append(number % 10)\n  n /= 10\nnum_list.reverse()", "intent": "In Python, you can get a number of numbers.", "rewritten_intent": "Get the number 'number' by one figure and make the list 'num_list'."}, {"question_id": 26837, "snippet": "num_list = map(int, str(number))", "intent": "In Python, you can get a number of numbers.", "rewritten_intent": "Get the number 'number' by one figure and make the list 'num_list'."}, {"question_id": 59780, "snippet": "hello  = tf.constant(\"Hello\")\nf = tf.function(example)\nprint(eval(f([], hello)))", "intent": "AttributeError: module 'tensorflow' has no attribute 'Session'", "rewritten_intent": "Showing the results of the assessment."}, {"question_id": 38276, "snippet": "pattern=r\"([0-9]*)\"\nlist=re.findall(pattern,text)", "intent": "I want to extract the numbers from the line and sum the numbers.", "rewritten_intent": "In a regular expression, extract only the numbers from the 'text' string and make the 'list' list."}, {"question_id": 49558, "snippet": "rp = sns.regplot(x, y, data=df, order=1, line_kws={\"color\":\"indianred\"})\nrp.axes.set_ylim(0,)", "intent": "Matplotlib\u2019s ylim is a low limit, the upper limit is automatic.", "rewritten_intent": "It sets the lower limit of the y axis, and the upper limit is automatically set."}, {"question_id": 65284, "snippet": "tmp1 = word[:h]\nword = word[h:]\nword.extend(tmp1)", "intent": "NoneType' object is not subscriptable", "rewritten_intent": "Replace the order of the 'word' line with 'h'."}, {"question_id": 31916, "snippet": "for i, attribute in enumerate(attributes):\n    attributes[i] = attribute-1", "intent": "I want to change the value of the variables included in the list.", "rewritten_intent": "The number of all the elements in the list`attributes` is minus 1."}, {"question_id": 31916, "snippet": "for i in range(len(attributes)):\n    attributes[i] = attributes[i]-1", "intent": "I want to change the value of the variables included in the list.", "rewritten_intent": "The number of all the elements in the list`attributes` is minus 1."}, {"question_id": 31916, "snippet": "attributes = [attribute-1 for attribute in attributes]", "intent": "I want to change the value of the variables included in the list.", "rewritten_intent": "The number of all the elements in the list`attributes` is minus 1."}, {"question_id": 21171, "snippet": "c = Counter(map(tuple, list))", "intent": "Extract the elements that match the two-dimensional list conditions in Python.", "rewritten_intent": "Extract only duplicated elements from the two-dimensional list."}, {"question_id": 45204, "snippet": "data = [None] * num_of_file\nfor i in range(num_of_file):\n    with open('data{}.txt'.format(i + 1), mode=\"r\", encoding=\"utf-8\") as f:\n        data[i] = f.read()", "intent": "I want to download multiple txt files at a time in Python.", "rewritten_intent": "Download the number number`num_of_file` to the txt file`data{}.txt`"}, {"question_id": 24786, "snippet": "urllib.parse.urlencode('string').encode('ascii')", "intent": "TypeError comes out and can\u2019t run.", "rewritten_intent": "String byte byte."}, {"question_id": 5822, "snippet": "pca = PCA()\npca.fit(imgAry)\npca_res = pca.transform(imgAry)\nrestoredImgAry = pca.inverse_transform(pca_res)", "intent": "I want to use scikit-learn to restore the original image data from the results of the main component analysis (PCA)", "rewritten_intent": "Main component analysis."}, {"question_id": 42516, "snippet": "plt.savefig(fnameF, dpi=200, bbox_inches=\"tight\", pad_inches=0.1)", "intent": "The axle labels of the graphs drawn in matplotlib are not displayed", "rewritten_intent": "Adjust the graph size and save it."}, {"question_id": 18685, "snippet": "list = [x for x in list if x]", "intent": "I want to remove the list of two-dimensional series.", "rewritten_intent": "Remove the empty elements from the \u2018list\u2019 list."}, {"question_id": 18685, "snippet": "for i in range(len(list) - 1, -1, -1):\n  if not list[i]:\n    del list[i]", "intent": "I want to remove the list of two-dimensional series.", "rewritten_intent": "Remove the empty elements from the \u2018list\u2019 list."}, {"question_id": 8532, "snippet": "while True:\n   if ser.inWaiting() > 0\n      data = ser.read(ser.inWaiting())\n      print(data)", "intent": "Comparison of data read in pyserial.", "rewritten_intent": "The received letter 'ser' is downloaded and displayed."}, {"question_id": 34692, "snippet": "json_obj = json.loads(json_string)", "intent": "How to Get Values from Json in Python 3", "rewritten_intent": "Download the JSON string `json_string` to the object `json_obj` (json)"}, {"question_id": 35864, "snippet": "gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\nplt.imshow(gray_img)\nplt.gray()\nplt.show()", "intent": "When you display a grace scale image in OpenCv, the white becomes yellow.", "rewritten_intent": "Show the colour image 'img' in a grace scale."}, {"question_id": 49478, "snippet": "plt.xticks(range(0, len(labels), ticks), labels[::ticks])", "intent": "When you savefig with matplotlib\u2019s pyplot, if the number of labels in the x axis is too much, the labels will be weaker.", "rewritten_intent": "Make the X axis interval to 'ticks' and label to 'labels'."}, {"question_id": 16769, "snippet": "book_list = []\nfor n in range(1, num_of_file + 1):\n    file_name = 'excel_file%d.xls' % (n)\n    book_list.append(xlrd.open_workbook(file_name))", "intent": "I want to download CSV and Excel files at a time in Python.", "rewritten_intent": "Download the 'num_of_file' Excel file to the list."}, {"question_id": 24388, "snippet": "data=np.genfromtxt('file.csv', delimiter=',')", "intent": "IndexError: Too many indices for array", "rewritten_intent": "Download the CSV file`file.csv`"}, {"question_id": 2220, "snippet": "dt.timestamp()", "intent": "Ask for Unix Time from Python\u2019s datetime object.", "rewritten_intent": "Ask for Unix Time from the 'dt' datetime object."}, {"question_id": 44723, "snippet": "df[df['col_name'].str.contains('string')]", "intent": "I want to ask how to extract only the lines that contain a specific line of letters.", "rewritten_intent": "Extract a line containing a specific string in the 'col_name' line from the 'df' data frame."}, {"question_id": 39007, "snippet": "from .. import file.py", "intent": "ImportError: No module named 'config'", "rewritten_intent": "Import the module file`file.py` from the top directory."}, {"question_id": 46711, "snippet": "list[-n:]", "intent": "I want to get the end of the list.", "rewritten_intent": "Remove the 'n' element from the end of the list."}, {"question_id": 17648, "snippet": "b_string.decode('unicode-escape')", "intent": "Python font code conversion: conversion from UTF-16 to UTF-8", "rewritten_intent": "Convert the Unicode scaped byte string `b_string` into a string."}, {"question_id": 9633, "snippet": "str.replace(old_s, new_s)", "intent": "For example, if you want to edit a text file from Python, there is a good way to write one line in a temporary file when saved.", "rewritten_intent": "Replace the target string `old_s` in the string `str` with another string `new_s`"}, {"question_id": 37327, "snippet": "while True:\n  try:\n    line = input()\n    if line == '':\n        break\n    else:\n        yield line\n    except EOFError:\n        break", "intent": "I want to determine the empty line input to input in python 3, but there is no EOFError.", "rewritten_intent": "Accept the standard entrance until the airway is entered."}, {"question_id": 37831, "snippet": "model.fit(X, Y, epochs=200, batch_size=1, verbose=0)", "intent": "How to avoid logging when using Keras during calculation", "rewritten_intent": "Learn a model without logging out."}, {"question_id": 53340, "snippet": "str.encode('utf-8')", "intent": "Correction of Attribute Error", "rewritten_intent": "Write the letter 'str' to the workline."}, {"question_id": 45120, "snippet": "for i in range(n):\n    df[i] = pd.DataFrame()", "intent": "I want to change the name of the dataframe automatically in python.", "rewritten_intent": "It is a data frame that makes a list of elements`n`."}, {"question_id": 24987, "snippet": "re.sub('[\\u3000]{2,}', '\\u3000', str)", "intent": "I want to replace the whole corner empty with one whole corner empty.", "rewritten_intent": "Replace multiple full-country emptiness in the string 'str' with one full-country emptiness."}, {"question_id": 33012, "snippet": "from . import file.py", "intent": "I want to download the variables defined in an external file in forms.py.", "rewritten_intent": "Import the module file`file.py` from the same layer directory."}, {"question_id": 50500, "snippet": "cv2.imwrite('file.jpg', img)", "intent": "Python image preservation", "rewritten_intent": "Save the image 'img' as the file name 'file.jpg'"}, {"question_id": 41336, "snippet": "np.dot(a, b)", "intent": "What is Python Numpy?", "rewritten_intent": "Calculate the number of lines 'a' and 'b'"}, {"question_id": 48742, "snippet": "df = pd.read_table('file.txt', header=None, delim_whitespace=True)\ndf.to_csv('new_file.csv', index=False, header=False)", "intent": "I want to convert a .txt file to a .csv file.", "rewritten_intent": "Convert the 'file.txt' text file to 'new_file.csv' text file"}, {"question_id": 35271, "snippet": "str(n)", "intent": "Can I set a variable to the argument of the with open function in python?", "rewritten_intent": "Convert the number 'n' into a string."}, {"question_id": 30337, "snippet": "chainer.functions.concat([x1, x2], axis=1)", "intent": "How do we synthesize data on the way through the network with Chainer?", "rewritten_intent": "Connect the multi-dimensional series 'x1' and 'x2'"}, {"question_id": 49825, "snippet": "@profile \ndef function():\n    #function_code", "intent": "Memory errors on the jupyter notebook.", "rewritten_intent": "Check the function\u2019s memory use."}, {"question_id": 53030, "snippet": "a,b,c = map(int,input().split())", "intent": "I want to get multiple numbers in one line.", "rewritten_intent": "Get multiple total values by input."}, {"question_id": 20048, "snippet": "c = Counter(tuple(x) for x in li)\n[list(k) for k,v in c.items() if v >=2]", "intent": "Use Python to extract duplicate sequence from a two-dimensional sequence.", "rewritten_intent": "Remove the duplicated elements in the two-dimensional list`li`"}, {"question_id": 21070, "snippet": "list(filter(lambda x:x not in li2, li))", "intent": "Compare one-dimensional lists in Python and remove the same element.", "rewritten_intent": "Compare two list`li` and`li2` and remove the repeated elements."}, {"question_id": 19098, "snippet": "li.sort()\nM = len(li) - 1\nfor i, e in enumerate(li):\n    j = i + 1\n    k = M\n    while k > j:\n        s = li[i] + li[j] + li[k]\n        if s == 0:\n            print(li[i], li[j], li[k])\n            k -= 1\n        elif s > 0:\n            k -= 1\n        else:\n            j += 1", "intent": "The total of three total numbers that are extracted from the list is 0.", "rewritten_intent": "From the list 'li' that has a whole number to the element, the total number is 0 and the three whole numbers are required."}, {"question_id": 42804, "snippet": "mecab = MeCab.Tagger('-Ochasen')\ninfo = mecab.dictionary_info()\nprint(info.charset)", "intent": "I want to use MeCab in Python 3, but the 'utf-8' codec can't decode 'utf-8' codec can't decode.", "rewritten_intent": "Show the letter code of the dictionary data."}, {"question_id": 29214, "snippet": "model = word2vec.Word2Vec.load('old_model')\nmodel.train(sentences)", "intent": "Additional Learning in Word2vec", "rewritten_intent": "Download the existing 'old_model' and use the data 'sentences' to learn and create a new model."}, {"question_id": 36377, "snippet": "print(np.array2string(ary, separator=', ', formatter={'float_kind': lambda x: '{: .4f}'.format(x)}))", "intent": "How to put a chamber on each element in the NumPy series", "rewritten_intent": "Add a comma to each element in the 'ary' series and display a small number of points up to four digits."}, {"question_id": 23839, "snippet": "contents = subprocess.check_output('cat file', shell=True)", "intent": "How to run an external command in python and add processing to its output", "rewritten_intent": "Call out the external process`cat` and download the file`file` inside."}, {"question_id": 34981, "snippet": "img = cv2.imread('file.png', 0)", "intent": "I want to automatically determine the error image and value it to two. - Algorithm of Daesh", "rewritten_intent": "Download the image 'file.png' in a grace scale."}, {"question_id": 25412, "snippet": "print(sess.run(W))\nprint(sess.run(b))", "intent": "About TensorFlow", "rewritten_intent": "Weight shows variables such as 'W' and 'B'"}, {"question_id": 33506, "snippet": "base64.b64decode(s).decode()", "intent": "Python 3.6.0 fails to decode Gmail\u2019s UTF-8 emails", "rewritten_intent": "Decode the 's' string symbolized by base64."}, {"question_id": 24190, "snippet": "plt.scatter(x, y)", "intent": "x and y must be the same size error.", "rewritten_intent": "Show the distribution chart of 'x' and 'y'"}, {"question_id": 40646, "snippet": "soup = bs4.BeautifulSoup(html, 'lxml')\nunorder_list = soup.find_all('ul', id='front')\nnew_list = []\nfor ul_tag in unorder_list:\n    for li in ul_tag.find_all('li'):\n        new_list.append(li.text)\nprint(new_list)", "intent": "How do I use BeautifulSoup to save the content of <li> as a list?", "rewritten_intent": "Enter a list without order in the HTML file`html` as a list of Python"}, {"question_id": 41775, "snippet": "df[df.duplicated(subset=col_lable)]", "intent": "Compare two CSV files in Python and extract the value that is duplicated.", "rewritten_intent": "Extract the line in which the column `col_label` is repeated in the 'df` data frame (pandas)"}, {"question_id": 33034, "snippet": "pandas.crosstab(df[col_1], df[col_2]).plot(kind='bar',stacked=True)", "intent": "I want to make a recording tape graph from the pandas\u2019 data frame.", "rewritten_intent": "The data frame`df`s columns`col_1` and`col_2` have cross-collared the results to be accumulated in a graph"}, {"question_id": 23246, "snippet": "ans = []\nfor index, value in enumerate(li):\n    if value == v:\n        ans.append(index)", "intent": "Repeat elements in the Python list.", "rewritten_intent": "Get and display all the index of the elements that match the value `v` to be searched from the list`li`"}, {"question_id": 23246, "snippet": "ans = [ i for i, value in enumerate(li) if value == v]", "intent": "Repeat elements in the Python list.", "rewritten_intent": "Get and display all the index of the elements that match the value `v` to be searched from the list`li`"}, {"question_id": 30088, "snippet": "d.pop(k, None) ", "intent": "Remove keys that may not exist from the dict in Python", "rewritten_intent": "Remove the keys`k` that may not exist within the dictionary object`d`"}, {"question_id": 41700, "snippet": "df.drop_duplicates(subset=col_lable)", "intent": "Comparison of two data frameworks.", "rewritten_intent": "Remove the line in which the column `col_label` is repeated in the 'df` data frame (pandas)"}, {"question_id": 30824, "snippet": "today = datetime.date.today()\nprevious_month = today - dateutil.relativedelta.relativedelta(months=1)", "intent": "I wanted to get Python Datetime last month.", "rewritten_intent": "Get the date a month ago from today."}, {"question_id": 30882, "snippet": "bluetooth.byte_to_signed_int()", "intent": "I want to use Python to obtain Bluetooth\u2019s RSSI value.", "rewritten_intent": "Get the Bluetooth RSSI value."}, {"question_id": 42011, "snippet": "str.strip()", "intent": "How to do this in Python\u2019s input()", "rewritten_intent": "Remove emptiness and modification from the 'str' letter."}, {"question_id": 23218, "snippet": "f,t,Sxx = signal.spectrogram(data, fs)\nplt.pcolormesh(t, f, Sxx)", "intent": "I want to extract a spectral program that can be drawn with pylab.", "rewritten_intent": "Signal data`data` analyze frequency with sample frequency`fs` and display spectrum."}, {"question_id": 39255, "snippet": "sjis_str.decode('shift-jis')", "intent": "Conversion of shift-jis bytes in python from utf-8 to string", "rewritten_intent": "Decode the shift_JIS symbolized string`sjis_str`"}, {"question_id": 41519, "snippet": "df[col] = df[col].astype(str)", "intent": "About data-type conversion in CSV files: astype does not change dtype", "rewritten_intent": "Change the column 'col' in the 'df' data frame to a string type."}]