[{"question_id": 757454, "snippet": "math.modf(num)[0]", "intent": "Remove a small part of the positive number on Python", "rewritten_intent": "Separate the small part of the number 'num'"}, {"question_id": 757454, "snippet": "num % 1", "intent": "Remove a small part of the positive number on Python", "rewritten_intent": "Separate the small part of the number 'num'"}, {"question_id": 247377, "snippet": "100 / whole * part", "intent": "Python. function of work with interests", "rewritten_intent": "Calculate how much percentage is the number 'part' from the number 'whole'"}, {"question_id": 712792, "snippet": "s.title()", "intent": "Make the first letter of each word big (the main)", "rewritten_intent": "Make the first letter of each word in the 's' line."}, {"question_id": 775089, "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "intent": "How to detect the time of execution of each function and the total time of execution of the program", "rewritten_intent": "Measure the time of 'time_work' function 'func'"}, {"question_id": 157675, "snippet": "re.findall('(\\d+)', s)", "intent": "How to find a number in Python?", "rewritten_intent": "Find numbers in the 's' line"}, {"question_id": 567383, "snippet": "my_tupels = tuple(map(int, input().split(sep)))\n", "intent": "SyntaxError: Unexpected EOF while parsing", "rewritten_intent": "Enter 'my_tupels' numbers from the keyboard as a divider using 'sep'"}, {"question_id": 210870, "snippet": "file_1 = open(file_path, \"w\")\\n\nfile_1.write(str(num))\nfile_1.close()", "intent": "How to record the value of the integer type variables in a file", "rewritten_intent": "Write the number `nums` in the file `file_path`"}, {"question_id": 210870, "snippet": "with open(file_path, 'w') as f:\\n\n\\tprint(str(num))\\n", "intent": "How to record the value of the integer type variables in a file", "rewritten_intent": "Write the number `nums` in the file `file_path`"}, {"question_id": 681594, "snippet": "res = requests.post(url, json=data)", "intent": "Json post Python request", "rewritten_intent": "Send a POST query `res` to JSON data `data` to `url`"}, {"question_id": 584129, "snippet": "json.dumps(my_dict, ensure_ascii=False)", "intent": "Russian code of JSON objects", "rewritten_intent": "Convert the Russian dictionary 'my_dict' to JSON"}, {"question_id": 37137, "snippet": "count_values_l1 = Counter(my_list1)\\n\ncount_values_l2 = Counter(my_list2)\\n\nkeys1 = count_values_l1.keys()\\n\nkeys2 = count_values_l2.keys()\\n\ncommon_items = []\\n\nfor key in keys1:\\n\n\\tif key in keys2:\\n\n\\t\\tcommon_items += [key] * min(count_values_l1[key], count_values_l2[key])\n", "intent": "How to compare two lists?", "rewritten_intent": "Find common items `common_items` in the list `my_list1` and list `my_list2`"}, {"question_id": 37137, "snippet": "list(set(my_list1) & set(my_list2))", "intent": "How to compare two lists?", "rewritten_intent": "Find common items `common_items` in the list `my_list1` and list `my_list2`"}, {"question_id": 645227, "snippet": "factors = []\\n\nwhile n % 2 == 0:\\n\n\\tfactors.append(n)\\n\n\\tn = n / 2\\n\\n\n    \nfor i in range(3,int(math.sqrt(n))+1,2):\\n\n\\twhile (n % i == 0):\\n\n\\t\\tfactors.append(i)\\n\n\\t\\tn = n / i\\n\\n\n    \nif n > 2:\\n\n\\tfactors.append(n)", "intent": "Divide the number into simple multipliers.", "rewritten_intent": "Divide the number 'n' into simple multipliers 'factors'"}, {"question_id": 565846, "snippet": "my_list = [random.randint(val1, val2) for i in range(N)]", "intent": "How to create a list of random whole numbers using a list inclusion?", "rewritten_intent": "Generate 'my_list' lists of long 'N' random values in the range from 'val1' to 'val2'"}, {"question_id": 801094, "snippet": "os.path.join(os.path.abspath(os.curdir), file_path)", "intent": "Screenshots of \"\\\" in Python", "rewritten_intent": "Get the absolute path for the 'file_path' file"}, {"question_id": 925879, "snippet": "my_list[i], my_list[j] = my_list[j], my_list[i]", "intent": "How to change the list elements?", "rewritten_intent": "Change the locations of the 'my_list' list elements with the 'i' and 'j' indices"}, {"question_id": 140252, "snippet": "def auth_vk_password():\\n\n\\tsession = vk.AuthSession(app_id=APP_ID, user_login=LOGIN, user_password=PASS)\n\\tfile = open(\"auth_vk.ini\", 'w')\n\\tfile.writelines(session.access_token)\n\\treturn session\n\ntry:\\n\n\\tfile = open(\"auth_vk.ini\", 'r')\\n\nexcept IOError as e:\\n\n\\taccess_token = auth_vk_password().access_token\\n\nelse:\\n\n\\taccess_token = file.readline()\\n\n\nsession = vk.Session(access_token=access_token)\\n\nif session:\\n\n\\tprint('\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!')\\n\nelse:\\n\n\\tprint('\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c!')\\n", "intent": "Authorization of VK API and Python application", "rewritten_intent": "Authenticate in the VK application with the ID `APP_ID` with the login `LOGIN` and the password `PASS`"}, {"question_id": 649828, "snippet": "my_list = input().split()", "intent": "Write the list through the gap", "rewritten_intent": "Enter from the keyboard through the 'my_list' line list gap"}, {"question_id": 752179, "snippet": "my_key in my_dict", "intent": "How to check the key in the dictionary?", "rewritten_intent": "Check the key 'my_key' in the dictionary 'my_dict'"}, {"question_id": 752179, "snippet": "if my_key in my_dict:\\n\n\\tprint('\u041a\u043b\u044e\u0447 {my_key} \u0435\u0441\u043b\u0438 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435')\\n\nelse:\\n\n\\tprint('\u041a\u043b\u044e\u0447\u0430 {my_key} \u043d\u0435\u0442 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435')\\n", "intent": "How to check the key in the dictionary?", "rewritten_intent": "Check the key 'my_key' in the dictionary 'my_dict'"}, {"question_id": 540082, "snippet": "filename, file_extension = os.path.splitext(file_path)", "intent": "Definition of file extension in Python", "rewritten_intent": "Get the 'file_extension' file 'file_path' extension"}, {"question_id": 540082, "snippet": "file_extension= file_path.split('.')[-1]", "intent": "Definition of file extension in Python", "rewritten_intent": "Get the 'file_extension' file 'file_path' extension"}, {"question_id": 502573, "snippet": "s = s[:s.find(symbol)]", "intent": "Remove all the symbols after .replace(\", *, \"\")", "rewritten_intent": "Remove all symbols in 's' after 'symbol'"}, {"question_id": 502573, "snippet": "s = s.split(symbol)[0]", "intent": "Remove all the symbols after .replace(\", *, \"\")", "rewritten_intent": "Remove all symbols in 's' after 'symbol'"}, {"question_id": 452762, "snippet": "class A_heir(A):\\n\n\\tdef __init__(self):\\n\n\\t\\tsuper().__init__()\\n\n        \n\\tdef __call__(self, func_name=\"\", args=[], kwargs={}):\\n\n\\t\\treturn getattr(self, func_name)(*args, **kwargs)\\n\n\nclass B_heir(B):\\n\n\\tdef __init__(self):\\n\n\\t\\tsuper().__init__()\\n\n        \n\\tdef __call__(self, func_name=\"\", args=[], kwargs={}):\\n\n\\t\\treturn getattr(self, func_name)(*args, **kwargs)\\n\n            \na = A_heir()\\n\nb = B_heir()\\n\n\np1 = Process(target=a, kwargs={'func_name': method1})\\n\np2 = Process(target=b, kwargs={'func_name': method2})\\n\np1.start()\\n\np2.start()\\n\n\np1.join()\\n\np2.join()\\n", "intent": "Parallel performance of functions in different classes", "rewritten_intent": "Execute the method 'method1' class 'A' and the method 'method2' class B in parallel"}, {"question_id": 21825, "snippet": "count_values1 = Counter(my_list1)\\n\ncount_values2 = Counter(my_list2)\\n\n\nkeys1 = list(count_values1.keys())\\n\nkeys2 = list(count_values2.keys())\\n\n\ndiff_list = []\\n\nfor key in set(keys1 + keys2):\\n\n\\tif key in keys1 and key in keys2:\\n\n\\t\\tdiff_list += [key] * abs(count_values1[key] - count_values2[key])\\n\n\\telif key in keys1:\\n\n\\t\\tdiff_list += [key] * count_values1[key]\\n\n\\telif key in keys2:\\n\n\\t\\tdiff_list += [key] * count_values2[key]\\n", "intent": "Differences in Python", "rewritten_intent": "Find the difference between `diff_list` lists `my_list1` and `my_list2`"}, {"question_id": 21825, "snippet": "diff_list = list(set(my_list1)-set(my_list2)) + list(set(my_list2)-set(my_list1))", "intent": "Differences in Python", "rewritten_intent": "Find the difference between `diff_list` lists `my_list1` and `my_list2`"}, {"question_id": 384437, "snippet": "total = 0\\n\nwhile True:\\n\n\\tn = int(input())\\n\n\\tif n == end_sign:\\n\n\\t\\tbreak\\n\n\\ttotal += n\\n", "intent": "Cycle while \u201cSuma of sequence of numbers\u201d", "rewritten_intent": "Find the amount of 'total' numbers entered from the keyboard, the end sign of 'end_sign'"}, {"question_id": 513149, "snippet": " s.index(my_char)", "intent": "How to find a symbol index in a line?", "rewritten_intent": "Find the position of 'my_char' in the 's' line"}, {"question_id": 513149, "snippet": " s.find(my_char)", "intent": "How to find a symbol index in a line?", "rewritten_intent": "Find the position of 'my_char' in the 's' line"}, {"question_id": 934453, "snippet": "my_list = list(map(int, input().split()))", "intent": "Introduction of n elements into one line", "rewritten_intent": "Enter a number from the keyboard through a gap in the 'my_list' list"}, {"question_id": 934453, "snippet": "my_list = [int(a) for a in input().split()]", "intent": "Introduction of n elements into one line", "rewritten_intent": "Enter a number from the keyboard through a gap in the 'my_list' list"}, {"question_id": 515513, "snippet": "#python-docx-template\\n\ndoc = DocxTemplate(template_path)\\n\ndata = { 'var_name' : \"HELLO WORLD!\" }\\n\ndoc.render(data)\\n\ndoc.save(output_file_path)", "intent": "Python: Create Word documents by template", "rewritten_intent": "Screening the word document `output_file_path` to a template from the word file `template_path` with JSON data"}, {"question_id": 524081, "snippet": "if not my_list:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n\nelse:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n", "intent": "Empty lists in Python", "rewritten_intent": "Check if the 'my_list' list is empty"}, {"question_id": 524081, "snippet": "if length(my_list) == 0:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n\nelse:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n", "intent": "Empty lists in Python", "rewritten_intent": "Check if the 'my_list' list is empty"}, {"question_id": 766573, "snippet": "for i in range(1, num):\\n\n\\tprint(*range(i, i*num+1, i), sep='\\t')\\n", "intent": "Multiplication table in Python", "rewritten_intent": "Generate the multiplication table to the number `num`"}, {"question_id": 724582, "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, data=data, files=files)", "intent": "Python+requests: POST transmission of multipart/form-data into form", "rewritten_intent": "Send a POST query with JSON data `data` and file `file_path` to `url`"}, {"question_id": 735924, "snippet": "Counter(s)", "intent": "How to count how many times a symbol is found in a line?", "rewritten_intent": "Calculate the symbols in the 's' line"}, {"question_id": 735924, "snippet": "{c:s.count(c) for c in set(s)}", "intent": "How to count how many times a symbol is found in a line?", "rewritten_intent": "Calculate the symbols in the 's' line"}, {"question_id": 504426, "snippet": "my_dict[my_key]", "intent": "Fast search for the element in the python list", "rewritten_intent": "Get the meaning of the dictionary 'my_dict' by key 'my_key'"}, {"question_id": 387249, "snippet": "## -*- coding: utf-8 -*-", "intent": "Python 3 and Russian symbols: print('Hello!') leads to UnicodeEncodeError: 'ascii' codec can't encode... error", "rewritten_intent": "Set up the utf-8 coding for the file"}, {"question_id": 66490, "snippet": "s = sep.join(my_list)", "intent": "The breakthrough of Python", "rewritten_intent": "Convert the 'my_list' list to the 's' line with a 'sep' divider"}, {"question_id": 66490, "snippet": "s = sep.join(map(str, my_list))", "intent": "The breakthrough of Python", "rewritten_intent": "Convert the 'my_list' list to the 's' line with a 'sep' divider"}, {"question_id": 363427, "snippet": "re.sub(r'[^\\w\\s]+|[\\d]+', r'',s)", "intent": "Remove all numbers from the line.", "rewritten_intent": "Remove all numbers from the 's' line."}, {"question_id": 224298, "snippet": "for c in s:\\n\n\\tprint(ord(c))", "intent": "Presentation of a line as a number", "rewritten_intent": "Get the symbol codes of the 's' line"}, {"question_id": 182910, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "How to get a HTML page code with Python?", "rewritten_intent": "Separate the HTML code of the 'code' page by linking 'url'"}, {"question_id": 715809, "snippet": "def child_func():\\n\n\\tif something_went_wrong:\\n\n\\t\\traise Exception(\"Something went wrong\")\\n\n    \ndef parent_func():\\n\n\\t# ...\\n\n\\ttry:\\n\n\\t\\tchild_func()\\n\n\\texcept Exception as e:\\n\n\\t\\tprint(\"Error:\", e)\\n\n\\t\\treturn", "intent": "Python - How to interrupt the function from another function?", "rewritten_intent": "Stop performing 'parent_func' from 'child_func'"}, {"question_id": 850118, "snippet": "class ClassEncoder(json.JSONEncoder):\\n\n\\tdef default(self, obj):\\n\n\\tif isinstance(obj, My_class):\\n\n\\t\\treturn obj.__dict__\\n\n\\treturn json.JSONEncoder.default(self, obj)\\n\n        \njson.dumps(my_obj, cls=ClassEncoder)\\n", "intent": "TypeError: Object of type is not JSON serializable", "rewritten_intent": "Create the \u2018my_obj\u2019 class of \u2018my_class\u2019"}, {"question_id": 673692, "snippet": "words = s.split()", "intent": "Divide the line into words and draw them to print one by one.", "rewritten_intent": "Divide the line \u2018s\u2019 into the word \u2018words\u2019"}, {"question_id": 843929, "snippet": "isinstance(s, str)", "intent": "How to check the str type variable in Python 3?", "rewritten_intent": "Check if the 's' line is"}, {"question_id": 705331, "snippet": "my_set = set(my_list)", "intent": "How to convert the list into multiple and vice versa", "rewritten_intent": "Convert the 'my_list' list into a multitude of 'my_set'"}, {"question_id": 841014, "snippet": "keyboard.add_hotkey(my_key, my_func)", "intent": "Python 3 how to track the button", "rewritten_intent": "When you press the 'my_key' key to run the 'my_func' function"}, {"question_id": 589590, "snippet": "bot = telebot.TeleBot(TOKEN)\\n\n\n@bot.message_handler(commands=[cmd])\\n\ndef add(message):\\n\n\\tbot.send_message(message.chat.id, mess)", "intent": "pyTelegramBotAPI(telebot) processing and receipt of requests", "rewritten_intent": "Process the 'cmd' bots telegram with the 'TOKEN' token and send the 'mess' message."}, {"question_id": 262786, "snippet": "list(str(num))", "intent": "Broken a number into a list of numbers", "rewritten_intent": "Broke the number 'num' to the number"}, {"question_id": 262786, "snippet": "[int(i) for i in str(num)]", "intent": "Broken a number into a list of numbers", "rewritten_intent": "Broke the number 'num' to the number"}, {"question_id": 313184, "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "intent": "Timer in Python: recording events that time should be kept", "rewritten_intent": "Measure the time of 'time_work' function 'func'"}, {"question_id": 678639, "snippet": "any(map(str.isdigit, s))", "intent": "Check the lines for the availability of numbers", "rewritten_intent": "Check if there are numbers in the 's' line."}, {"question_id": 678639, "snippet": "re.search('\\d+', s)", "intent": "Check the lines for the availability of numbers", "rewritten_intent": "Check if there are numbers in the 's' line."}, {"question_id": 830473, "snippet": "num = int(input().strip())", "intent": "Error \"not all arguments converted during string formatting\"", "rewritten_intent": "Calculate the number from the keyboard to the variable 'num'"}, {"question_id": 307354, "snippet": "form = { # \u043f\u0440\u0438\u043c\u0435\u0440 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0441\u043b\u043e\u0432\u0430 \"\u043a\u043e\u0440\u043e\u0432\u0430\"\\n\n    \"11-14\": \"\u043a\u043e\u0440\u043e\u0432\",\\n\n    \"0,5-9\": \"\u043a\u043e\u0440\u043e\u0432\",\\n\n    \"1\": \"\u043a\u043e\u0440\u043e\u0432\u0430\",\\n\n    \"2-4\": \"\u043a\u043e\u0440\u043e\u0432\u044b\",\\n\n}\\n\n\nif n >= 11 and n <= 14:\\n\n\\tprint(n, form[\"11-14\"])\\n\nelse:\\n\n\\ttemp = n % 10\\n\n\\tif temp == 0 or (temp >= 5 and temp <= 9):\\n\n\\t\\tprint(n, form[\"0,5-9\"])\\n\n\\tif temp == 1:\\n\n\\t\\tprint(n, form[\"1\"])\\n\n\\tif temp >=2 and temp <=4:\\n\n\\t\\tprint(n, form[\"2-4\"])\\n", "intent": "Question: How many cows are in the shore?", "rewritten_intent": "Select the inclination of the word 'word' depending on the number 'n' by template"}, {"question_id": 773920, "snippet": "my_list = [random.randint(val1, val2) for i in range(N)]", "intent": "Filling the mass with random values", "rewritten_intent": "Generate 'my_list' lists of random values in the range from 'val1' to 'val2' long 'N'"}, {"question_id": 115592, "snippet": "splitted = [[]]\\n\nfor item in my_list:\\n\n\\tif item == sep:\\n\n\\t\\tsplitted.append([])\\n\n\\telse:\\n\n\\t\\tsplitted[-1].append(item)", "intent": "Python: Divide the list into the list, by element-divider", "rewritten_intent": "Break the 'my_list' list to the 'splitted' list by the 'sep' divider"}, {"question_id": 158145, "snippet": "my_list = [[val for _ in range(N)] for _ in range(M)]", "intent": "Multi-dimensional Python", "rewritten_intent": "Generate a list `my_list` size `M`x`N` filled with the value `val`"}, {"question_id": 592250, "snippet": "s = 0\\n\nfor x in range(1, n+ 1):\\n\n\\ts += f(x)\\n", "intent": "The calculator and cycles for and while (Python) need to write the calculator", "rewritten_intent": "Calculate the amount of 'n' of the members of the arithmetic progression with a member assigned by 'f(x)'"}, {"question_id": 592250, "snippet": "s = 0\\n\nx = 0\\n\nwhile True:\\n\n\\tx+= 1\\n\n\\ts += f(x)\\n\n\\tif x == n:\\n\n\\t\\tbreak\\n", "intent": "The calculator and cycles for and while (Python) need to write the calculator", "rewritten_intent": "Calculate the amount of 'n' of the members of the arithmetic progression with a member assigned by 'f(x)'"}, {"question_id": 419321, "snippet": "new_date = datetime.strptime(old_date, date_format)", "intent": "Conversion of date between linear representations", "rewritten_intent": "Convert 'old_date' line representation to 'new_date' line representation in 'date_format' format using the datetime library"}, {"question_id": 419321, "snippet": "locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')\\n\nnew_date = datetime.strptime(old_date, date_format).date()", "intent": "Conversion of date between linear representations", "rewritten_intent": "Convert 'old_date' line representation to 'new_date' line representation in 'date_format' format using the datetime library"}, {"question_id": 505510, "snippet": "try:\\n\n\\tpassexcept Exception as e:\\n\n\\tprint('\u041e\u0448\u0438\u0431\u043a\u0430:\\n', traceback.format_exc())\\n", "intent": "Python Error Removal and Stacktrace in Console", "rewritten_intent": "The name of the error in try-catch"}, {"question_id": 505510, "snippet": "try:\\n\n\\tpassexcept Exception as e:\\n\n\\tprint('\u041e\u0448\u0438\u0431\u043a\u0430:\\n', e)\\n", "intent": "Python Error Removal and Stacktrace in Console", "rewritten_intent": "The name of the error in try-catch"}, {"question_id": 654183, "snippet": "with open (file_path, 'r') as f:\\n\n\\told_data = f.read()\\n\n\nnew_data = old_data.replace(old_s, new_s)\\n\n\nwith open (file_path, 'w') as f:\\n\n\\tf.write(new_data)\\n", "intent": "How to replace a line in a .txt file through Python 3?", "rewritten_intent": "Replace 'old_s' to 'new_s' in the 'file_path' file"}, {"question_id": 404985, "snippet": "count = 0\\n\ni = -1\\n\nwhile True:\\n\n\\ti = s.find(sub, i+1)\\n\n\\tif i == -1:\\n\n\\t\\tbreak\\n\n\\tcount += 1", "intent": "Calculate the entrances of the covered substrate into the line", "rewritten_intent": "Find the number of covering entries `count` subtitles `sub` in the `s` line"}, {"question_id": 193764, "snippet": "# \u0414\u0430\u0439\u0442\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 https://myaccount.google.com/lesssecureapps\nport = 465  # For SSL\\n\nsmtp_server = \"smtp.gmail.com\"\\n\ncontext = ssl.create_default_context()\\n\nwith smtplib.SMTP_SSL(smtp_server, port, context=context) as server:\\n\n\\tserver.login(sender_email, password)\\n\n\\tserver.sendmail(sender_email, receiver_email, message)\\n", "intent": "How to send emails to Python", "rewritten_intent": "Send a message with 'message' to 'receiver_email' using a gmail account with the 'sender_email' login and password 'password'"}, {"question_id": 294557, "snippet": "colors = {\\n\n\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\": '\\u001b[31m',\\n\n\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\": '\\u001b[32m',\\n\n\"\u0441\u0438\u043d\u0438\u0439\": '\\u001b[34m',\\n\n\"\u0431\u0435\u043b\u044b\u0439\": '\\u001b[37m',\\n\n\"\u0447\u0435\u0440\u043d\u044b\u0439\": '\\u001b[30m',\\n\n\"\u0436\u0435\u043b\u0442\u044b\u0439\": '\\u001b[33m',\\n\n'reset': '\\033[0m'\\n\n}\\n\nprint('{ colors[color] }{ s }{ colors['reset'] }')", "intent": "Can I make the program output on Python color?", "rewritten_intent": "Enter the 's' line with the color 'color' to the terminal"}, {"question_id": 294557, "snippet": "#import colorama\n#from colorama import Fore\n#from colorama import Style\n\ncolors = {\\n\n\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\": 'RED'\\n,\n\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\": 'GREEN',\\n\n\"\u0441\u0438\u043d\u0438\u0439\": 'BLUE',\\n\n\"\u0431\u0435\u043b\u044b\u0439\": 'WHITE',\\n\n\"\u0447\u0435\u0440\u043d\u044b\u0439\": 'BLACK',\\n\n\"\u0436\u0435\u043b\u0442\u044b\u0439\": 'YELLOW'\\n\n}\\n\nprint(getattr(Fore, colors[color]) + Style.BRIGHT + s + Style.RESET_ALL)", "intent": "Can I make the program output on Python color?", "rewritten_intent": "Enter the 's' line with the color 'color' to the terminal"}, {"question_id": 427051, "snippet": "my_list.reverse()", "intent": "Function reversed() in Python", "rewritten_intent": "Turn the \u2018my_list\u2019 list"}, {"question_id": 427051, "snippet": "my_list = my_list[::-1]", "intent": "Function reversed() in Python", "rewritten_intent": "Turn the \u2018my_list\u2019 list"}, {"question_id": 427051, "snippet": "my_list = list(reversed(my_list))", "intent": "Function reversed() in Python", "rewritten_intent": "Turn the \u2018my_list\u2019 list"}, {"question_id": 789625, "snippet": "my_dict = dict(zip(list_key, list_value))", "intent": "How to make a dictionary from two lists?", "rewritten_intent": "Connect the list of keys `list_key` and the list of values `list_value` to the dictionary `my_dict`"}, {"question_id": 789625, "snippet": "my_dict = {list_key[i]: list_value[i] for i in range(len(list_key))}", "intent": "How to make a dictionary from two lists?", "rewritten_intent": "Connect the list of keys `list_key` and the list of values `list_value` to the dictionary `my_dict`"}, {"question_id": 1, "snippet": "basename = os.path.basename(file_path)\\n\n\n# Compose attachment\\n\npart = MIMEBase('application', \"octet-stream\")\\n\npart.set_payload(open(file_path ,\"rb\").read() )\\n\nencoders.encode_base64(part)\\n\npart.add_header('Content-Disposition', 'attachment; filename=\"%s\"' % basename)\\n\n\n# Compose message\\n\nmsg = MIMEMultipart()\\n\nmsg['From'] = sender_email\\n\nmsg['To'] = receiver_email\\n\nmsg.attach(part)\\n\n\n# Send mail\\n\nsmtp = SMTP_SSL(smtp_server)\\n\nsmtp.connect(smtp_server, 465)\\n\nsmtp.login(sender_email, password)\\n\nsmtp.sendmail(sender_email, receiver_email, msg.as_string())\\n\nsmtp.quit()\\n", "intent": "How to send a letter with a deposit from the script on Python?", "rewritten_intent": "Send a letter with the file 'file_path' to the address 'receiver_email' from the smtp server 'smtp_server' with the login 'sender_email' and the password 'password'"}, {"question_id": 477678, "snippet": "print(sep.join([s] * n))", "intent": "Delete a part of the sequence 1 2 2 3 3 4 4 4 5 5 5 5 on Python 3", "rewritten_intent": "Remove the 's' 'n' line once through the 'sep' divider"}, {"question_id": 635319, "snippet": "cols = df.iloc[:, indexes]", "intent": "How to choose the right columns?", "rewritten_intent": "Select the columns `cols` with the index `list_indexes` pandas data frame `df`"}, {"question_id": 1085344, "snippet": "total = sum(my_list)", "intent": "How to calculate the amount of items in the list using FOR IN", "rewritten_intent": "Find the amount of numbers `total` in the list `my_list`"}, {"question_id": 1085344, "snippet": "total = 0\\n\nfor i in my_list:\\n\n\\ttotal += i\\n", "intent": "How to calculate the amount of items in the list using FOR IN", "rewritten_intent": "Find the amount of numbers `total` in the list `my_list`"}, {"question_id": 759476, "snippet": "max_val = {x: y for x, y in filter(lambda x: my_list[x[0]] == max(my_list.values()), my_list.items())}\n", "intent": "Find the maximum value of the Python dictionary", "rewritten_intent": "Find the maximum knowledge of `max_value` in the dictionary `my_list`"}, {"question_id": 759476, "snippet": "max_val = max(my_list.values())", "intent": "Find the maximum value of the Python dictionary", "rewritten_intent": "Find the maximum knowledge of `max_value` in the dictionary `my_list`"}, {"question_id": 407127, "snippet": "print(*random.sample(set(my_list),n))", "intent": "Removing the list of words in random order without repetitions", "rewritten_intent": "Remove 'n' words from the 'my_list' list by chance without repeats"}, {"question_id": 526785, "snippet": "## -*- coding: utf-8 -*-", "intent": "Python: SyntaxError: (unicode error) 'utf-8' codec can't decode byte 0xd1", "rewritten_intent": "Set up the utf-8 coding for the file"}, {"question_id": 446920, "snippet": "my_list.extend(my_tuple)", "intent": "The assignment operator += for lists (added by place)", "rewritten_intent": "Add 'my_tuple' to the 'my_list' list"}, {"question_id": 103581, "snippet": "s[:i] + symbol + s[i + 1:]", "intent": "Function of Replace", "rewritten_intent": "Replace the 's' symbol in the 'i' position with 'symbol'"}, {"question_id": 28096, "snippet": "my_list = sorted(my_list)", "intent": "Sorting the list", "rewritten_intent": "Select the \u2018my_list\u2019 list"}, {"question_id": 28096, "snippet": "my_list.sort()", "intent": "Sorting the list", "rewritten_intent": "Select the \u2018my_list\u2019 list"}, {"question_id": 133137, "snippet": "conn = http.client.HTTPConnection(\"ifconfig.me\")\\n\nconn.request(\"GET\", \"/ip\")\\n\nmy_ip = conn.getresponse().read()\\n", "intent": "Find the IP address of your computer on the Internet in Python", "rewritten_intent": "Get the IP address 'my_ip' of your computer on the Internet"}, {"question_id": 134564, "snippet": "second_date - first_date", "intent": "Difference Between Two Dates in Seconds in Django", "rewritten_intent": "Find how much time has passed between dates in datetime `first_date` and `second_date`"}, {"question_id": 14349, "snippet": "img = Image.new('RGB', (256, 256 * 3), 'white')\\n\nfor point in points:\\n\n\\tdraw.point(point + img.size,color=\"red\")\\n\n\nimg.show()\\n\n", "intent": "Graphics (drawing by points) in Python", "rewritten_intent": "Generate the image by points with the 'points' list of coordinates"}, {"question_id": 236635, "snippet": "sys.argv", "intent": "How to accept parameters in the Python script", "rewritten_intent": "Get a list of 'params' parameters from the command line"}, {"question_id": 230436, "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "intent": "Timer on Python", "rewritten_intent": "Measure the time of 'time_work' function 'func'"}, {"question_id": 273613, "snippet": "\ntext = \"\"\nwith open(file_path, 'r') as f:\n    for line in f:\n        if not re.search(r\"^({})\".format(prefix), line):\n            text += line\n\nwith open(file_path, 'w') as f:\n    f.write(text)", "intent": "Remove selective lines from the file", "rewritten_intent": "Remove 'file_path' files that start with 'prefix' lines"}, {"question_id": 9096, "snippet": "Counter(s.split())", "intent": "Frequency of Words in Text", "rewritten_intent": "Number the words in the 's' line."}, {"question_id": 157783, "snippet": "new_num = int(str(num), base) ", "intent": "How does Python write the translation function from the k-ic system to the decimal?", "rewritten_intent": "Convert the number `num` in a calculation system based on `base` to the number `new_num` in a decimal calculation system"}, {"question_id": 224243, "snippet": "con = sqlite3.connect(db_path)\\n\ncur = con.cursor()\\n", "intent": "How to create a new database in Python and execute a script in it?", "rewritten_intent": "Create a database of sqlite3 `file_path`"}, {"question_id": 225896, "snippet": "result = os.popen(cmd, 'r', 1)", "intent": "Start bash from Python 2.7.3 script.", "rewritten_intent": "Get the flow of data output of the console command `cmd` to the file object `result`"}, {"question_id": 319317, "snippet": "my_dict = json.loads(s)", "intent": "\"ValueError: dictionary update sequence element #0 has length\"", "rewritten_intent": "Convert the 's' line into 'my_dict' dictionary"}, {"question_id": 319317, "snippet": "my_dict = dict(ast.literal_eval(s))", "intent": "\"ValueError: dictionary update sequence element #0 has length\"", "rewritten_intent": "Convert the 's' line into 'my_dict' dictionary"}, {"question_id": 235923, "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "intent": "Reading files to the variable is not the end.", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 235923, "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Reading files to the variable is not the end.", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 235923, "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Reading files to the variable is not the end.", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 44503, "snippet": "regexp = re.compile( \"\\s*(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?)\\s*;\", re.M )\\n\nnums = regexp.findall(s)\\n", "intent": "Reading from a text file of numbers", "rewritten_intent": "Get a list of numbers 'num' from the 's' line"}, {"question_id": 197142, "snippet": "split_regex = re.compile(r'[.|!|?|\u2026]')\\n\nsentences = list(filter(lambda t: t, [t.strip() for t in split_regex.split(s)]))", "intent": "How to divide the text into individual proposals?", "rewritten_intent": "Break the 's' line to the 'sentences' list"}, {"question_id": 166814, "snippet": "print(s, end=\" \")", "intent": "Python 2.7, the result in the same line", "rewritten_intent": "Take the 's' line on the screen without translating the line"}, {"question_id": 69121, "snippet": "exec(open(\"./file_path\").read())\\n\nf()\\n", "intent": "Other Python Screenshots", "rewritten_intent": "Call 'f' from the file 'file_path'"}, {"question_id": 75962, "snippet": "mixer.init()\\n\nmixer.music.load(file_path)\\n\nmixer.music.play()\\n", "intent": "Recovery of MP3 in Python", "rewritten_intent": "Repeat the audio file 'file_path'"}, {"question_id": 91763, "snippet": "keys = list(my_dict.keys()).copy()\\n\nfor i in keys:\\n\n    if my_key in my_dict:\n        del my_dict[my_key]\n", "intent": "How to remove the value from the dictionary during the cycle for", "rewritten_intent": "Remove the 'my_dict' dictionary with the 'my_key' key within the cycle for"}, {"question_id": 297129, "snippet": "str(num).encode()", "intent": "byto operations", "rewritten_intent": "Translate the number 'num' into a byte line"}, {"question_id": 19994, "snippet": "con = pymysql.connect(my_host, user, password, db_name)\\n \nwith con:\\n    \n\\tcur = con.cursor()\\n", "intent": "Interaction with BD in Python", "rewritten_intent": "Connect to the mysql database `db_name` on the host `my_host` under the user `user` and the password `password`"}, {"question_id": 55256, "snippet": "frm = ''.join([str(i) for i in my_dict.keys()])\\n\nto = ''.join([str(i) for i in my_dict.values()])\\n\ntrantab = str.maketrans(frm, to)\\n\ns = s.translate(trantab)\\n", "intent": "Replace the element of the line with the meaning of the dictionary", "rewritten_intent": "Replace the symbols in the 's' line with 'my_dict'"}, {"question_id": 55256, "snippet": "for i, symbol in enumerate(s):\\n\n\\tif symbol in my_dict:\\n\n\\t\\ts = s[:i] + str(my_dict[symbol]) + s[i+1:]\\n", "intent": "Replace the element of the line with the meaning of the dictionary", "rewritten_intent": "Replace the symbols in the 's' line with 'my_dict'"}, {"question_id": 105134, "snippet": "def get_upload_path(instance, filename):\\n\n    return os.path.join(\n      \"user_%d\" % instance.owner.id, \"car_%s\" % instance.slug, filename)", "intent": "Dynamic path to upload_to in the django model (models.FileField)", "rewritten_intent": "Generate the dynamic way to store files in Django upload_to"}, {"question_id": 185524, "snippet": "\" \".join(list(filter( lambda x : not x.endswith(suff), list(s.split()))))", "intent": "Removing elements from the list", "rewritten_intent": "From the 's' line to remove the words with the 'suff'"}, {"question_id": 294170, "snippet": "globs = globals().copy()\\n\nvar_name = list(filter(lambda x: id(globs[x]) == id(my_var), globs))[0]\\n\nif var_name in globals():\\n\n\\tprint('y')\\n\nelse:\\n\n\\tprint('n')\\n", "intent": "Verify the existence of the variable", "rewritten_intent": "Check the existence of the global variable 'my_var'"}, {"question_id": 205516, "snippet": "values_by_key  = [x[my_key] for x in dict_list if my_key in x] \n", "intent": "Get all the meanings of the dictionary.", "rewritten_intent": "Get a 'values_by_key' list of values from the 'dict_list' dictionary list to the 'my_key' key"}, {"question_id": 45499, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "Simple example of the htmp page parser", "rewritten_intent": "Separate the HTML code of the 'code' page by linking 'url'"}, {"question_id": 292305, "snippet": "os.popen(\"sudo -S %s\"%(command), 'w').write(cmd)", "intent": "How to use the commands to perform the command with sudo in Linux?", "rewritten_intent": "Run the 'cmd' command on behalf of the administrator in Linux"}, {"question_id": 58045, "snippet": "redirect(url)", "intent": "Django redirect", "rewritten_intent": "Transfer to the `url` address in Django"}, {"question_id": 19319, "snippet": "`x = (window.winfo_screenwidth() - window.winfo_reqwidth()) / 2\\n\ny = (window.winfo_screenheight() - window.winfo_reqheight()) / 2\\n\nwindow.wm_geometry(\"+%d+%d\" % (x, y))\\n\nwindow.mainloop()\\n", "intent": "Location of the window at Tkinter Center", "rewritten_intent": "Placing the Tkinter 'window' window in the center"}, {"question_id": 211668, "snippet": "book = xlwt.Workbook()\\n\nsheet1 = book.add_sheet(\"sheet1\")\\n\n\nfor row_index, row_values in enumerate(values):\\n\n\\trow = sheet1.row(row_index)\\n\n\\tfor col_index, col in enumerate(row_values):\\n\n\\t\\tvalue = row_values[col_index]\\n\n\\t\\trow.write(col_index, value)\\n\n\nbook.save(filename)", "intent": "Python in Excel", "rewritten_intent": "Save a list of values in the Excel file 'filename'"}, {"question_id": 163083, "snippet": "list(map(lambda x: x[0]+x[1], zip(my_list[0::2], my_list[1::2])))", "intent": "Massive and cycle for in Python", "rewritten_intent": "Connect the 'my_list' list elements in rows"}, {"question_id": 62533, "snippet": "s.encode()\n", "intent": "How to translate a line into bytes in Python 3.2?", "rewritten_intent": "Translate the 's' line into the byte"}, {"question_id": 215531, "snippet": "my_json = json.loads(s)\n", "intent": "by JSON Python", "rewritten_intent": "Convert the 's' line into the JSON object 'my_json'"}, {"question_id": 86126, "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "intent": "Download the file to the POST server", "rewritten_intent": "Send a POST query with the 'file_path' file to 'url'"}, {"question_id": 301251, "snippet": "def stable_running():\\n\n\\ttry:\\n\n\\t\\tmy_f()\\n\n\\texcept ValueError:\\n\n\\t\\tstable_running()\\n", "intent": "How to restart the function if there is an exception?", "rewritten_intent": "Repeat the 'my_f' function in case of error"}, {"question_id": 1666, "snippet": "hashlib.md5(s.unicode())", "intent": "Encryption on Python", "rewritten_intent": "Heck the 's' line using the MD5 algorithm"}, {"question_id": 151750, "snippet": "with open(file_path, 'r') as f:\\n\n\\tpass", "intent": "UnicodeEncodeError: 'charmap' codec can't encode character", "rewritten_intent": "Open the file 'file_path' with the UTF-8 encryption"}, {"question_id": 271764, "snippet": "strings.sort()", "intent": "Sorting by alphabet and length", "rewritten_intent": "Sort the list of 'strings' lines by alphabet and length"}, {"question_id": 103067, "snippet": "[math.dist(point, cur_point) for cur_point in points]", "intent": "How to quickly calculate the distance from one point to all the other points?", "rewritten_intent": "Find distances between the point with the 'point' coordinates and the point with the 'point' coordinates"}, {"question_id": 306224, "snippet": "l1 = map(lambda x: x.strip(), list(open('test1.txt')))\\n\nl2 = map(lambda x: x.strip(), list(open('test2.txt')))\\n\ndiff_list = list(zip(l1, l2))\\n\n\nfor i, line in enumerate(diff_list):\\n\n\\tif line[0] == line[1]:\\n\n\\t\\tprint('\u0421\u0442\u0440\u043e\u043a\u0438 { i} \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442')\\n\n\\telse:\\n\n\\tprint('\u0421\u0442\u0440\u043e\u043a\u0438 { i} \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442')\\n", "intent": "Comparison of files", "rewritten_intent": "Compare the 'file_path1' and 'file_path2' files"}, {"question_id": 306224, "snippet": "from difflib import ndiff\n\nt1 = open('test1.txt').read().splitlines(1)\nt2 = open('test2.txt').read().splitlines(1)\n\nprint ''.join(ndiff(t1, t2))", "intent": "Comparison of files", "rewritten_intent": "Compare the 'file_path1' and 'file_path2' files"}, {"question_id": 157647, "snippet": "s.replace(old_sub, new_sub, count)", "intent": "Replacement of Python", "rewritten_intent": "Replace the 'old_sub' on the 'new_sub' in the 's' 'count' line once"}, {"question_id": 303166, "snippet": "my_dict = dict([[x[1:-1] for x in s.split(sep)], ])", "intent": "How to convert lines into dictionaries?", "rewritten_intent": "Disperse the \u2018s\u2019 keyword line by \u2018sep\u2019 in the \u2018my_dict\u2019 dictionary."}, {"question_id": 80334, "snippet": "win32clipboard.OpenClipboard()\\n\ndata = win32clipboard.GetClipboardData()\\n\nwin32clipboard.CloseClipboard()\\n", "intent": "How to work with a Python exchange buffer?", "rewritten_intent": "Get data from the \u2018data exchange\u2019 buffer"}, {"question_id": 101677, "snippet": "num = str(num)\\n\n\nif \".\" in num:\\n\n\\tinteger, tail = num.split(\".\")\\n\n\\ttail = re.sub(r'[0]*$', '', tail)\\n\n\\tif not tail:\\n\n\\t\\tnum = integer\\n\n\\telse:\\n\n\\t\\tnum = float(integer + \".\" + tail)", "intent": "How to drop zero right?", "rewritten_intent": "Remove unimportant zero to the right."}, {"question_id": 135134, "snippet": "time.timezone // 3600", "intent": "How to get a timetable in Python", "rewritten_intent": "Get a time belt."}, {"question_id": 74955, "snippet": "re.sub(r'[^\\w\\s]', '', s)", "intent": "How to remove the point from the Unicode line?", "rewritten_intent": "Remove signals from the 's' line"}, {"question_id": 74955, "snippet": "for p in string.punctuation:\\n\n\\tif p in s:\\n\n\\t\\ts = s.replace(p, '')\\n", "intent": "How to remove the point from the Unicode line?", "rewritten_intent": "Remove signals from the 's' line"}, {"question_id": 91006, "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "intent": "Download the file via Python to the server", "rewritten_intent": "Send a POST query with the 'file_path' file to 'url'"}, {"question_id": 202621, "snippet": "result = os.popen(cmd, 'r', 1)", "intent": "Excerpting the python console", "rewritten_intent": "Get the flow of data output of the console command `cmd` to the file object `result`"}, {"question_id": 253869, "snippet": "def get_length_items_list(a):\\n\n\\treturn list(map(lambda x: 1 if isinstance(x, list) else 0, a))\\n\n\nlength_my_list = get_length_items_list(my_list)\\n\n\nwhile max(length_my_list) > 0:\\n\n\\tnew_list = []\\n\n\\tfor item in my_list:\\n\n\\t\\tif isinstance(item, list):\n\\t\\t\\tif len(item) > 0:\n\\t\\t\\t\\tnew_list += item\n\\t\\t\\telse:\n\\t\\t\\t\\tnew_list.append(item)\n\n\\tmy_list = new_list\n\\tlength_my_list = get_length_items_list(my_list)", "intent": "How to break the list into elements?", "rewritten_intent": "Convert a multi-dimensional 'my_list' list to one-dimensional"}, {"question_id": 300050, "snippet": "s = sep.join(my_list)", "intent": "How to turn the list into a line?", "rewritten_intent": "Convert the 'my_list' list to the 's' line with a 'sep' divider"}, {"question_id": 300050, "snippet": "s = \" \".join(map(str, my_list))", "intent": "How to turn the list into a line?", "rewritten_intent": "Convert the 'my_list' list to the 's' line with a 'sep' divider"}, {"question_id": 459170, "snippet": "sys.exit(code)", "intent": "Program completion in Python", "rewritten_intent": "Finish the program with the code 'c'"}, {"question_id": 459170, "snippet": "raise SystemExit(code)", "intent": "Program completion in Python", "rewritten_intent": "Finish the program with the code 'c'"}, {"question_id": 52873, "snippet": "chars = list(s)", "intent": "How to break the line into individual symbols?", "rewritten_intent": "Break the 's' line to the list of 'chars' symbols"}, {"question_id": 52873, "snippet": "chars = [c for c in s]", "intent": "How to break the line into individual symbols?", "rewritten_intent": "Break the 's' line to the list of 'chars' symbols"}, {"question_id": 648454, "snippet": "round(num, n)", "intent": "Fixed number of characters after spinning in Python", "rewritten_intent": "Circulate 'num' to 'n' signs after"}, {"question_id": 359110, "snippet": "s = s.replace(' ', '')", "intent": "How to remove all the faults from the line in Python?", "rewritten_intent": "Remove all the gap from the 's' line"}, {"question_id": 359110, "snippet": "s = ''.join(s.split())", "intent": "How to remove all the faults from the line in Python?", "rewritten_intent": "Remove all the gap from the 's' line"}, {"question_id": 418982, "snippet": "Counter(my_list)", "intent": "Number of repeated elements in the list", "rewritten_intent": "Calculate the items in the `my_list` list in `list_value_counts`"}, {"question_id": 418982, "snippet": "{i: array.count(i) for i in my_list}", "intent": "Number of repeated elements in the list", "rewritten_intent": "Calculate the items in the `my_list` list in `list_value_counts`"}, {"question_id": 575604, "snippet": "my_list = [el for el, _ in groupby(my_list)]", "intent": "Removal of the same elements in a sorted list (list)", "rewritten_intent": "Remove repeated elements in the sorted list `my_list`"}, {"question_id": 575604, "snippet": "my_list = list(set(my_list))", "intent": "Removal of the same elements in a sorted list (list)", "rewritten_intent": "Remove repeated elements in the sorted list `my_list`"}, {"question_id": 397222, "snippet": "math.sqrt(x)", "intent": "How to find a square root in Python?", "rewritten_intent": "Find the quarter root from 'num'"}, {"question_id": 459401, "snippet": "my_numbers = [int(item) for item in my_number_strs]", "intent": "Translate the list of lines into the list of numbers", "rewritten_intent": "Convert a list of 'my_number_strs' to a list of 'my_numbers'"}, {"question_id": 235938, "snippet": "re.search(sub_s, s)", "intent": "Searching in the line", "rewritten_intent": "Check if there is a 'my_subs' subset in the 's' line"}, {"question_id": 235938, "snippet": "sub_s in s", "intent": "Searching in the line", "rewritten_intent": "Check if there is a 'my_subs' subset in the 's' line"}, {"question_id": 235938, "snippet": " s.find(sub_s) != -1 ", "intent": "Searching in the line", "rewritten_intent": "Check if there is a 'my_subs' subset in the 's' line"}, {"question_id": 427942, "snippet": "count_values_l1 = Counter(my_list1)\\n\ncount_values_l2 = Counter(my_list2)\\n\nkeys1 = count_values_l1.keys()\\n\nkeys2 = count_values_l2.keys()\\n\ncommon_items = []\\n\nfor key in keys1:\\n\n\\tif key in keys2:\\n\n\\t\\tcommon_items += [key] * min(count_values_l1[key], count_values_l2[key])\n", "intent": "Comparison of two lists in Python", "rewritten_intent": "Find common items `common_items` in the list `my_list1` and list `my_list2`"}, {"question_id": 427942, "snippet": "list(set(my_list1) & set(my_list2))", "intent": "Comparison of two lists in Python", "rewritten_intent": "Find common items `common_items` in the list `my_list1` and list `my_list2`"}, {"question_id": 535318, "snippet": "os.getcwd()", "intent": "Current directory in Python", "rewritten_intent": "Get the current directory"}, {"question_id": 535318, "snippet": "os.path.abspath(os.curdir)", "intent": "Current directory in Python", "rewritten_intent": "Get the current directory"}, {"question_id": 535318, "snippet": "os.path.abspath(__file__)\n\n", "intent": "Current directory in Python", "rewritten_intent": "Get the current directory"}, {"question_id": 414593, "snippet": "os.path.exists(file_path)", "intent": "How to verify the file exists?", "rewritten_intent": "Check if there is a 'file_path' file"}, {"question_id": 50064, "snippet": "with open(path, \"w\") as file:\\n\n\\tprint(data, file=file)", "intent": "Write a list into a txt file in Python", "rewritten_intent": "Write the 'data' in the 'file_path' file"}, {"question_id": 50064, "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tprint(data, file=file)", "intent": "Write a list into a txt file in Python", "rewritten_intent": "Write the 'data' in the 'file_path' file"}, {"question_id": 507330, "snippet": "my_key = None\\n\nfor k, v in my_dict.items():\\n\n\\tif v == val:\\n\n\\t\\tmy_key = k\\n\n\\t\\tbreak", "intent": "Getting the key to value", "rewritten_intent": "Get the key 'my_key' from the dictionary 'my_dict' by means 'val'"}, {"question_id": 507330, "snippet": "reversed_dict = dict(zip(my_dict.values(), my_dict.keys()))\\n\nmy_key = reversed_dict[val]", "intent": "Getting the key to value", "rewritten_intent": "Get the key 'my_key' from the dictionary 'my_dict' by means 'val'"}, {"question_id": 30653, "snippet": "num % 2 == 0", "intent": "How to check the number for clarity?", "rewritten_intent": "Check the number 'num' for clarity"}, {"question_id": 299026, "snippet": "my_list.reverse()", "intent": "Turn the list", "rewritten_intent": "Turn the \u2018my_list\u2019 list"}, {"question_id": 299026, "snippet": "my_list = my_list[::-1]", "intent": "Turn the list", "rewritten_intent": "Turn the \u2018my_list\u2019 list"}, {"question_id": 299026, "snippet": "my_list = list(reversed(my_list))", "intent": "Turn the list", "rewritten_intent": "Turn the \u2018my_list\u2019 list"}, {"question_id": 81572, "snippet": "my_list.remove(item)", "intent": "How to remove the element of the massive in the piton?", "rewritten_intent": "Remove \u2018item\u2019 from the \u2018my_list\u2019 list"}, {"question_id": 81572, "snippet": "del my_list[my_list.index(item)]", "intent": "How to remove the element of the massive in the piton?", "rewritten_intent": "Remove \u2018item\u2019 from the \u2018my_list\u2019 list"}, {"question_id": 293, "snippet": "## -*- coding: utf-8 -*-", "intent": "Why does the script on Python not understand the Unicode?", "rewritten_intent": "Set up the utf-8 coding for the file"}, {"question_id": 592812, "snippet": "s_list = s.strip().split(sep)", "intent": "How to divide a line into a list of words divided by gap?", "rewritten_intent": "Divide the 's' line into the 's_list' list by the 'sep' divider"}, {"question_id": 506457, "snippet": "digits = [int(i) for i in str(num)]", "intent": "Break the number into the components.", "rewritten_intent": "Break the number 'num' into the list of numbers 'digits'"}, {"question_id": 597892, "snippet": "with open(file_path) as file:\\n\n\\tlines = [line.rstrip() for line in file.readlines()]", "intent": "How to remove a new line symbol (\\n) when reading a line from a file", "rewritten_intent": "Read lines from the 'file_path' file to 'lines' without moving the line"}, {"question_id": 251048, "snippet": "for x in my_list:\\n \n\\tprint(x)", "intent": "How to remove the full list of Python?", "rewritten_intent": "Remove the 'my_list' list"}, {"question_id": 251048, "snippet": "print('\\n'.join(my_list))", "intent": "How to remove the full list of Python?", "rewritten_intent": "Remove the 'my_list' list"}, {"question_id": 251048, "snippet": "print('\\n'.join(list(map(str, my_list))))", "intent": "How to remove the full list of Python?", "rewritten_intent": "Remove the 'my_list' list"}, {"question_id": 33868, "snippet": "f = codecs.open(file_path, \"r\", \"utf_8_sig\" )\ndata = f.read()\nf.close()", "intent": "Code error in Python: readline() when reading the utf-8 file fails: 'charmap' codec can't decode byte", "rewritten_intent": "Read the file 'file_path' with the coding utf-8 in 'data'"}, {"question_id": 33868, "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tdata = f.read()", "intent": "Code error in Python: readline() when reading the utf-8 file fails: 'charmap' codec can't decode byte", "rewritten_intent": "Read the file 'file_path' with the coding utf-8 in 'data'"}, {"question_id": 248267, "snippet": "s = ' '.join(s.split())", "intent": "Remove the excess gap from the line", "rewritten_intent": "Remove the excess gap from the 's' line"}, {"question_id": 607802, "snippet": "n = int(str(num), from_base)\\n\nalphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n\nnew_num = \"\"\\n\nwhile n > 0:\\n\n\\tn, m = divmod(n, to_base)\\n\n\\tnew_num += alphabet[m]\\n\nnum = new_num[::-1]", "intent": "Translation from any calculation system to any", "rewritten_intent": "Translate the number `num` from the numbering system `from_base` to the numbering system `to_base`"}, {"question_id": 585259, "snippet": "isinstance(num, int)", "intent": "Verification of the full number \u2013 the condition for verification of the data entered by the user", "rewritten_intent": "Check that the number 'num' is total."}, {"question_id": 446226, "snippet": "reg = re.compile('[^a-zA-Z ]')\\n\ns = reg.sub('', s))", "intent": "It is necessary to clean the line from foreign symbols", "rewritten_intent": "Clean the 's' line from the extra symbols"}, {"question_id": 446226, "snippet": "good_chars = (ascii_letters + whitespace).encode()\\n\njunk_chars = bytearray(set(range(0x100)) - set(good_chars))\\n\ns = s.encode('ascii', 'ignore').translate(None, junk_chars).decode()", "intent": "It is necessary to clean the line from foreign symbols", "rewritten_intent": "Clean the 's' line from the extra symbols"}, {"question_id": 542210, "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "intent": "Reading from the file and recording in the massive", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 542210, "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Reading from the file and recording in the massive", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 542210, "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Reading from the file and recording in the massive", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 60925, "snippet": "with urllib.request.urlopen(link) as url:\\n\n\\tdownloaded_file = url.read()\\n\n\\twith open(file_path, \"wb\") as f:\\n\n\\t\\tf.write(downloaded_file)", "intent": "Download the file via urllib", "rewritten_intent": "Download the file by link `link` to `file_path`"}, {"question_id": 274131, "snippet": "with open(file_path,'r') as f:\\n\n\\ttext = f.read()\\n\n\nif word in text:\\n\n\\tprint('\u0421\u043b\u043e\u0432\u043e { word } \u0435\u0441\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435')\\n\nelse:\\n\n\\tprint('\u0421\u043b\u043e\u0432\u0430 {word} \u043d\u0435\u0442 \u0432 \u0444\u0430\u0439\u043b\u0435')\\n", "intent": "Search for words in the file", "rewritten_intent": "Find the word 'word' in the file 'file_path'"}, {"question_id": 505115, "snippet": "words = s.split()\nwords.sort()", "intent": "Convert a line into a list with sorting in a lexicographic order", "rewritten_intent": "Convert the 's' line into the 'words' list and sort"}, {"question_id": 565252, "snippet": "my_symbol = chr(char_code)", "intent": "The Alphabet of Python", "rewritten_intent": "Get the symbol `my_symbol` by its code `char_code`"}, {"question_id": 509576, "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tpass", "intent": "UnicodeEncodeError: 'charmap' codec can't encode character '\\u039a'", "rewritten_intent": "Open the 'file_path' file to record with the coding utf-8 to the variable f"}, {"question_id": 509576, "snippet": "f = open(file_path,'a', encoding='utf-8')", "intent": "UnicodeEncodeError: 'charmap' codec can't encode character '\\u039a'", "rewritten_intent": "Open the 'file_path' file to record with the coding utf-8 to the variable f"}, {"question_id": 42621, "snippet": "sys.path.append(my_path)\n", "intent": "How can sys.path add relative pathways to modules?", "rewritten_intent": "Add 'my_path' to search for modules"}, {"question_id": 615741, "snippet": "re.search(r\"\\b{}\\b\".format(word), s)", "intent": "Searching for words in Python", "rewritten_intent": "Check if the word 's' is in the 's' line."}, {"question_id": 615741, "snippet": "word in s.split()", "intent": "Searching for words in Python", "rewritten_intent": "Check if the word 's' is in the 's' line."}, {"question_id": 500957, "snippet": "new_matrix = matrix.transpose()", "intent": "Transposing the Numpy Matrix in Python", "rewritten_intent": "Transpose 'matrix' to 'new_matrix'"}, {"question_id": 500957, "snippet": "new_matrix = matrix.T", "intent": "Transposing the Numpy Matrix in Python", "rewritten_intent": "Transpose 'matrix' to 'new_matrix'"}, {"question_id": 500957, "snippet": "new_matrix = []\\n\nfor i in range(len(matrix[0])):\\n\n\\tnew_matrix.append(list())\\n\n\\tfor j in range(len(matrix)):\\n\n\\t\\tnew_matrix[i].append(matrix[j][i])\\n", "intent": "Transposing the Numpy Matrix in Python", "rewritten_intent": "Transpose 'matrix' to 'new_matrix'"}, {"question_id": 116074, "snippet": "my_list = [[input() for _ in range(cols)] for i in range(rows)]", "intent": "Introduction and extraction of the two-dimensional massive (VOD)", "rewritten_intent": "Complete the two-dimensional `my_list` from the `rows` line and `cols` column from the keyboard"}, {"question_id": 116074, "snippet": "my_list = [[input().strip().split() for _ in range(cols)] for i in range(rows)]", "intent": "Introduction and extraction of the two-dimensional massive (VOD)", "rewritten_intent": "Complete the two-dimensional `my_list` from the `rows` line and `cols` column from the keyboard"}, {"question_id": 116074, "snippet": "my_list = []\\n\nfor r in range(rows):\\n\n]tcur_row = []\\n\n\\tfor c  in range(cols):\\n\n\\t\\tval = input()\\n\n\\t\\tcur_row.append(val)\\n\n\\tmy_list.append(cur_row)\\n", "intent": "Introduction and extraction of the two-dimensional massive (VOD)", "rewritten_intent": "Complete the two-dimensional `my_list` from the `rows` line and `cols` column from the keyboard"}, {"question_id": 786730, "snippet": "df = df.loc[cond]", "intent": "Remove lines in DataFrame that meet the condition", "rewritten_intent": "Remove 'df' lines from the dateframe under the condition of 'cond'"}, {"question_id": 528474, "snippet": "OrderedDict(sorted(my_dict.items(), key=lambda t: t[0]))", "intent": "Sorting the keys of the growth dictionary", "rewritten_intent": "Sort the dictionary 'my_dict' by growth keys"}, {"question_id": 229015, "snippet": "## -*- coding: utf-8 -*-", "intent": "Problems with Python 2.7 coding", "rewritten_intent": "Set up the utf-8 coding for the file"}, {"question_id": 517085, "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tpass", "intent": "Python: 'charmap' codec can't decode byte 0x98", "rewritten_intent": "Open the 'file_path' file to record with the coding utf-8 to the variable f"}, {"question_id": 517085, "snippet": "f = open(file_path,'a', encoding='utf-8')", "intent": "Python: 'charmap' codec can't decode byte 0x98", "rewritten_intent": "Open the 'file_path' file to record with the coding utf-8 to the variable f"}, {"question_id": 690089, "snippet": "res = requests.post(url, json=data) \\n\nprint(res.text)\n", "intent": "Posts in Python", "rewritten_intent": "Send a JSON POST query with 'data' data to 'url'"}, {"question_id": 550742, "snippet": "count_lines = sum(1 for line in open(file_path, 'r'))", "intent": "Select the number of lines in the file", "rewritten_intent": "Select the number of lines `count_lines` in the file `file_path`"}, {"question_id": 928295, "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "intent": "Read the file in Python", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 928295, "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Read the file in Python", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 928295, "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "intent": "Read the file in Python", "rewritten_intent": "Read the data from the 'file_path' file in the 'my_list' list"}, {"question_id": 255207, "snippet": "## -*- coding: utf-8 -*-", "intent": "Python \u2013 Problems with the coding of utf-8", "rewritten_intent": "Set up the utf-8 coding for the file"}, {"question_id": 777723, "snippet": "s.replace(sub_s, \"\")\n", "intent": "How to remove a certain symbol from the line?", "rewritten_intent": "Remove \u2018sub_s\u2019 from the \u2018s\u2019 line"}, {"question_id": 466658, "snippet": "sock.send(mess.encode())", "intent": "Error when connecting the socket to the server: a bytes-like object is required, not 'str'", "rewritten_intent": "Send 'mess' to the 'sock' socket"}, {"question_id": 422461, "snippet": "my_list = [value for value in my_list if value]\n", "intent": "Removing empty elements in Python list", "rewritten_intent": "Remove empty items from the 'my_list' list"}, {"question_id": 422461, "snippet": "my_list = [value for value in my_list if value != [None]]\n", "intent": "Removing empty elements in Python list", "rewritten_intent": "Remove empty items from the 'my_list' list"}, {"question_id": 533108, "snippet": "Counter(my_list)", "intent": "How to find all duplicating elements in the list and the number of their repetitions?", "rewritten_intent": "Calculate the items in the `my_list` list in `list_value_counts`"}, {"question_id": 533108, "snippet": "{i: array.count(i) for i in my_list}", "intent": "How to find all duplicating elements in the list and the number of their repetitions?", "rewritten_intent": "Calculate the items in the `my_list` list in `list_value_counts`"}, {"question_id": 594690, "snippet": "alpha = ' abcdefghijklmnopqrstuvwxyz'\\n\nnew_s = ''\\n\nfor c in s:\\n\n\\tnew_s += alpha[(alpha.index(c) + shift) % len(alpha)]\n", "intent": "Code of Caesar Python", "rewritten_intent": "Encrypt the 's' line into the 'new_s' line with Caesar's code with the shift 'shift'"}, {"question_id": 424441, "snippet": "s == s[::-1]", "intent": "The \u201cPallindro\u201d task \u2013 Python", "rewritten_intent": "Check if the 's' line is a palindrome"}, {"question_id": 424441, "snippet": "s == reversed(s)", "intent": "The \u201cPallindro\u201d task \u2013 Python", "rewritten_intent": "Check if the 's' line is a palindrome"}, {"question_id": 630116, "snippet": "derivative(my_f, x)", "intent": "Find a derivative in Python", "rewritten_intent": "Find the derivative `d` function `my_f` in the point `x`"}, {"question_id": 577060, "snippet": "s = s[:n] + new_char + s[n+1:]", "intent": "TypeError: 'str' object does not support item assignment", "rewritten_intent": "Replace the symbol with the 'n' index in the 's' line with 'new_char'"}, {"question_id": 406558, "snippet": "os.system(img_path)\n", "intent": "How to open a picture through Python?", "rewritten_intent": "Open the image 'img_path' in the guide"}, {"question_id": 406558, "snippet": "os.startfile(img_path)\n", "intent": "How to open a picture through Python?", "rewritten_intent": "Open the image 'img_path' in the guide"}, {"question_id": 458373, "snippet": "list(s)", "intent": "Divide in Python 3 words into characters", "rewritten_intent": "Break the 's' line to the list of 'chars' symbols"}, {"question_id": 458373, "snippet": "[c for c in s]", "intent": "Divide in Python 3 words into characters", "rewritten_intent": "Break the 's' line to the list of 'chars' symbols"}, {"question_id": 879670, "snippet": "s = s[:i] + s[i+1:]", "intent": "How to remove a symbol from a line by index", "rewritten_intent": "Remove the symbol with the index 'i' from the 's' line"}, {"question_id": 119418, "snippet": "common_dict = {}\\n\nfor cur_dict in dicts:\\n\n\\tfor key in cur_dict:\\n\n\\t\\tif key not in common_dict:\\n\n\\t\\t\\tcommon_dict[key] = cur_dict[key]\\n\n\\t\\t\\tcontinue\\n\n\n\\t\\tif not isinstance(common_dict[key], list):\\n\n\\t\\\\ttcommon_dict[key] = [common_dict[key]] + [cur_dict[key]]\\n\n\\t\\t\\tcontinue\\n\n\n\\t\\tcommon_dict[key] += [cur_dict[key]]\\n", "intent": "Creating a dictionary with the same keys", "rewritten_intent": "Connect the list of dicts with the same keys in the common dictionary `common_dict`"}, {"question_id": 60790, "snippet": "lib = CDLL('some.dll')", "intent": "Can I connect DLL to Python?", "rewritten_intent": "Connect the dll file 'filepath' to the 'lib' variable"}, {"question_id": 299217, "snippet": "session = requests.Session()\nresponse = session.get('http://google.com')\ncookies = session.cookies.get_dict()", "intent": "Authorization on the site", "rewritten_intent": "Obtaining cookies from the URL"}, {"question_id": 65166, "snippet": " inspect.getargspec(f)", "intent": "How do I know the number of arguments that are transmitted?", "rewritten_intent": "Obtaining the specification of the arguments of the 'f' function"}, {"question_id": 206151, "snippet": "result = os.popen(cmd, 'r', 1)", "intent": "Start Windows Commands from Python: How to remove the systeminfo Commands into the variable", "rewritten_intent": "Get the flow of data output of the console command `cmd` to the file object `result`"}, {"question_id": 118927, "snippet": "list(my_tuple)", "intent": "How to copy a cortex into the list", "rewritten_intent": "Convert 'my_tuple' to a list"}, {"question_id": 50821, "snippet": "param = '-n' if platform.system().lower()=='windows' else '-c'\\n\ncommand = ['ping', param, '1', host]\\n\nprint(subprocess.call(command) == 0)\\n", "intent": "Promote the range of networks", "rewritten_intent": "Promote the \u2018host\u2019 website"}, {"question_id": 78160, "snippet": "def Get(event):\\n\n\\ti = event.widget.curselection()\\n\n\nl.bind(\"<<ListboxSelect>>\", Get)\\n", "intent": "Index of the assigned item in Listbox", "rewritten_intent": "Get the index `i` of the assigned element of the tkinter leaf box `l`"}, {"question_id": 175425, "snippet": "os.environ('username').decode(my_encode)", "intent": "Coding of Changed Environments", "rewritten_intent": "Set the coding 'my_encode' for the variable user environment 'username'"}, {"question_id": 70512, "snippet": "MyForm(instance=user)\n", "intent": "Automatic filling in the Django Template", "rewritten_intent": "Fill in the Django 'MyForm' user 'user' data"}, {"question_id": 141157, "snippet": "my_var = my_func()", "intent": "Assignment of the variable result of the function", "rewritten_intent": "To assign the 'my_var' result to the 'my_func' function"}, {"question_id": 209059, "snippet": "re.sub(' +', my_symbol, my_string_string)", "intent": "Regular to replace the gap on the back", "rewritten_intent": "Replace the gap in the `my_string` line with `my_symbol`"}, {"question_id": 256777, "snippet": "words=dict(zip(old_data, new_data))\\n\nfor word in words:\\n\n\\ts = re.sub(r\"\\b{}\\b\".format(word), words[word], s)\\n", "intent": "Replacement of the word list file", "rewritten_intent": "Replace the list of words `old_words` to the list of words `new_words` in the line `s`"}, {"question_id": 112581, "snippet": "def search(root,key):\\n\n     \n\\tif root is None or root.val == key:\\n\n\\t\\treturn root\n \n\\tif root.val < key:\\n\n\\t\\treturn search(root.right,key)\\n\n   \n\\treturn search(root.left,key)\n\nsearch(root,val)", "intent": "Searching for element in binary tree", "rewritten_intent": "Find the nodes equal to 'val' in the binary tree 'tree'"}, {"question_id": 186169, "snippet": "l = len(a)\\n\nfor k in range(l-1): \\n\n\\tfor i in range(l-1):\\n\n\\t\\tif a[i][i] < a[i+1][i+1]:\\n\n\\t\\t\\ta[i][i],a[i+1][i+1] = a[i+1][i+1],a[i][i]\\n", "intent": "Python Matrix Elements", "rewritten_intent": "Separate the elements on the main diagonal of the square matrix `a` by reduction"}, {"question_id": 186169, "snippet": "l = len(a)\\n\nitems = [a[i][i] for i in range(l)]\\n\nitems.sort(reverse=True)\\n\nfor i in range(l):\\n\n\\ta[i][i] = items[i]\\n", "intent": "Python Matrix Elements", "rewritten_intent": "Separate the elements on the main diagonal of the square matrix `a` by reduction"}, {"question_id": 189166, "snippet": "os.popen(cmd, 'r', 1)", "intent": "Python launches console program", "rewritten_intent": "Execute the \u2018cmd\u2019 console command"}, {"question_id": 189166, "snippet": "PIPE = subprocess.PIPE\nsubprocess.Popen(cmd, shell = True)", "intent": "Python launches console program", "rewritten_intent": "Execute the \u2018cmd\u2019 console command"}, {"question_id": 168100, "snippet": "from turtle import *\\n\nspeed(\"fastest\")\\n\n\ndef sierpinski(l,n):\\n\n\\tif n==0:\\n\n\\t\\tfor i in range(0,3):\\n\n\\t\\t\\tfd(l)\\n\n\\t\\t\\tleft(120)\\n\n\\telse:\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tfd(l/2)\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tbk(l/2)\\n\n\\t\\tleft(60)\\n\n\\t\\tfd(l/2)\\n\n\\t\\tright(60)\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tleft(60)\\n\n\\t\\tbk(l/2)\\n\n\\t\\tright(60)\\n\n\nsierpinski(l, n)\\n", "intent": "The Python Triangles", "rewritten_intent": "Draw 'n' fractal triangles with the side of 'l'"}, {"question_id": 291044, "snippet": "btn.bind(\"<Button-1>\", lambda event: win.destroy())", "intent": "Close the modular window for the event", "rewritten_intent": "Close the \u2018win\u2019 modular window by pressing the \u2018btn\u2019 button in Tkinter"}, {"question_id": 215979, "snippet": "win.withdraw()", "intent": "Tkinter: How to create a daughter window and hide the parent window?", "rewritten_intent": "Close the Tkinter 'win' window"}, {"question_id": 160158, "snippet": "cursor.execute('insert into {table1} select * from {table2}')", "intent": "Copying all records from one table to another", "rewritten_intent": "Copy data from the 'table1' table to the 'table2' table from the 'cursor' database"}, {"question_id": 298270, "snippet": "s.encode('unicode_escape')", "intent": "How to screen special symbols when creating a catalogue?", "rewritten_intent": "Screenshots in the 's' line"}, {"question_id": 189042, "snippet": "\\tdef closeEvent(self, event):\\n\n\\t\\tif self.check_box.isChecked():\\n\n\\t\\t\\tevent.ignore()\\n\n\\t\\t\\tself.hide()\\n\n\\t\\t\\tself.tray_icon.showMessage(\n                \"Tray Program\",\n                \"Application was minimized to Tray\",\n                QSystemTrayIcon.Information,\n                2000\n            )\\n\n", "intent": "How to Remove a Program in Three Without Showing in the Task Panel", "rewritten_intent": "Remove the PyQt 'win' window in the third by pressing the cross"}, {"question_id": 108618, "snippet": "t = Text(root)\nt.pack()\nt.insert(END, s)", "intent": "Postal printing in Tkinter.Text()", "rewritten_intent": "Print the 's' line in Tkinter in the 'root' window"}, {"question_id": 72284, "snippet": "list(filter(f, my_list))", "intent": "Python, removing the element from the massive", "rewritten_intent": "Get the 'my_list' list items that meet the 'f' function"}, {"question_id": 83341, "snippet": "dicts.sort(key=lambda x: x[key])", "intent": "Sorting of objects", "rewritten_intent": "Sort the 'dicts' dictionary list by key"}, {"question_id": 280734, "snippet": "data = open(filepath, 'rb').read(24)\nprint(struct.unpack('<I', data[4:8]))", "intent": "Dbf files with Python", "rewritten_intent": "Dispersing the dbf file 'filepath'"}, {"question_id": 30683, "snippet": "with open(filepath) as f:\\n\n\\tlines = f.readlines()[1::2]", "intent": "How to remove unclear lines from the file?", "rewritten_intent": "Get a list of countless lines of the 'filepath' file"}, {"question_id": 30683, "snippet": "with open(filepath) as file:\\n\n\\tlines = [i.rstrip() for i in itertools.islice(file, 0, None, 2)]", "intent": "How to remove unclear lines from the file?", "rewritten_intent": "Get a list of countless lines of the 'filepath' file"}, {"question_id": 241337, "snippet": "urllib.parse.quote(s)", "intent": "How to process Cyrillic symbols in urllib.request.urlopen()?", "rewritten_intent": "Convert the Cyrillic 's' line into a special symbol line for the HTTP request"}, {"question_id": 241337, "snippet": "urllib.parse.quote_plus(s)", "intent": "How to process Cyrillic symbols in urllib.request.urlopen()?", "rewritten_intent": "Convert the Cyrillic 's' line into a special symbol line for the HTTP request"}, {"question_id": 64496, "snippet": "(pub, priv) = rsa.newkeys(512)", "intent": "Encryption with an open key", "rewritten_intent": "Generate the open key 'pub' and the closed key 'priv' for RSA encryption"}, {"question_id": 124756, "snippet": "proxyDict = {\\n\n\\t'http': proxy # \"212.254.22.52:80\"\\n\n}\\n\n\nr = requests.get('http://icanhazip.com/', proxies=proxyDict)\\n\n\nif r.status_code == 200:\\n\n\\tif r.text != \"restricted to vpn\":\\n\n\\t\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n\n\\telse:\\n\n\\t\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n\nelse:\\n\n\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n", "intent": "How to check proxy for performance?", "rewritten_intent": "Check if the proxy works."}, {"question_id": 121512, "snippet": "my_dict[key]  ==  my_var", "intent": "How to compare the value of a dictionary with a variable.", "rewritten_intent": "Check whether the value of the 'my_dict' dictionary element is equal to the 'key' key in the 'my_var' variable."}, {"question_id": 119187, "snippet": "wallpaper = bytes(wallpaper_path, 'utf-8')\\n\nctypes.windll.user32.SystemParametersInfoA(20, 0, wallpaper, 3)\\n", "intent": "Implementation of Python", "rewritten_intent": "Set the 'wallpaper_path' image as a table sheet"}, {"question_id": 13119, "snippet": "\npop3server = poplib.POP3_SSL('pop.gmail.com')  # open connection\\n\nprint(pop3server.getwelcome())  # show welcome message\\n\npop3server.user(username)\\n\npop3server.pass_(password)\\n\npop3info = pop3server.stat()  # access mailbox status\\n\nmailcount = pop3info[0]  # toral email\\n\nmessages = []\\n\nfor i in range(mailcount):\\n\n\\tfor message in pop3server.retr(i + 1)[1]:\\n\n\\t\\tmessages.append(message)\\n\npop3server.quit()\\n", "intent": "Python and Poplib issues with mail receipt", "rewritten_intent": "Get emails from the gmail server with the \u2018username\u2019 login and the \u2018password\u2019 password"}, {"question_id": 78491, "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "intent": "How to upload a file to a site via Python?", "rewritten_intent": "Download the 'file_path' file to the 'url' server"}, {"question_id": 196630, "snippet": "my_com_port = serial.Serial(com, speed, dsrdtr = 1, timeout = 0)", "intent": "How can I transfer the value of the variable \"x\" arduino?", "rewritten_intent": "Connect to the consistent port 'com' with speed 'speed'"}, {"question_id": 71961, "snippet": "win32api.SetCursorPos(coord)", "intent": "How to simulate the key pressure and the mouse movement?", "rewritten_intent": "Moving the mouse cursor to a point with the 'coord' coordinates"}, {"question_id": 316065, "snippet": "(n & (n-1) == 0) and n != 0", "intent": "How to verify that the variable is! = (stage of pair - 1)", "rewritten_intent": "Check if the number 'n' is degree 2"}, {"question_id": 280539, "snippet": "pass = getpass.getpass(prompt='Password: ', stream=None)", "intent": "Encryption of input to the Python 3 console", "rewritten_intent": "Enter the password \u2018pass\u2019 from the keyboard"}, {"question_id": 73158, "snippet": "def Get(event):\\n\n\\ti = event.widget.curselection()\\n\n\nl.bind(\"<<ListboxSelect>>\", Get)\\n", "intent": "How to identify the selected item from the list in Tkinter.ListBox?", "rewritten_intent": "Get the index `i` of the assigned element of the tkinter leaf box `l`"}, {"question_id": 205664, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "How to break down HTML with Python?", "rewritten_intent": "Separate the HTML code of the 'code' page by linking 'url'"}, {"question_id": 300767, "snippet": "strings_dict = dict([x[0].strip().split(sep) for x in strings])", "intent": "Convert a line line into a dictionary", "rewritten_intent": "Convert the string 'strings' to the dictionary 'strings_dict' by the 'sep' divider"}, {"question_id": 127208, "snippet": "with open(filepath, 'r') as f:\\n\n\\tlines = [i for i in f.readlines() if not i.startswith('[')]\\n\n\\tp = re.compile('(?P<key>\\S*(?==))\\S*(?P<znah>(?<==)\\S*)')\\n\n\\tres = {}\\n\n\\tfor line in lines:\\n\n\\t\\tparsed = re.findall(p, line)[0]\\n\n\\t\\tres[parsed[0]] = parsed[1]\\n", "intent": "Python regexp: parsing the in-file", "rewritten_intent": "Divide the ini-file `filepath` into the dictionary `res`"}, {"question_id": 316488, "snippet": "with open(filepath) as f:\\n\n\\tnums = list(map(int, f.read().split()))\\n", "intent": "Python: How to convert lines when imported from a file?", "rewritten_intent": "Read the list of 'nums' numbers from the 'filepath' file"}, {"question_id": 77855, "snippet": "res = requests.post(url, json=data)", "intent": "Working with Web Form by Post Method", "rewritten_intent": "Send a POST query `res` to JSON data `data` to `url`"}, {"question_id": 25811, "snippet": "for a in arrs:\\n\n\\tprint(a)\\n", "intent": "Extraction of values from the two-dimensional massive", "rewritten_intent": "Remove the \u2018arrs\u2019 two-dimensional massive on the screen"}, {"question_id": 25811, "snippet": "for a in arrs:\\n\n\\tfor i in a:\\n\n\\t\\tprint(i, end=\" \")\\n\n\\tprint()\\n", "intent": "Extraction of values from the two-dimensional massive", "rewritten_intent": "Remove the \u2018arrs\u2019 two-dimensional massive on the screen"}, {"question_id": 54032, "snippet": "num = random.randint(num_start, num_end)", "intent": "How to get a random number in the interval?", "rewritten_intent": "Get the random number `num` in the interval from the number `num_start` to the number `num_end`"}, {"question_id": 124837, "snippet": "win32api.keybd_event(ord(key), 0, 0,0)", "intent": "How to Imitate the Keyprint?", "rewritten_intent": "Press the \u2018key\u2019 key."}, {"question_id": 124837, "snippet": "pyautogui.press('s')", "intent": "How to Imitate the Keyprint?", "rewritten_intent": "Press the \u2018key\u2019 key."}, {"question_id": 71878, "snippet": "x = list(enumerate(l))\\n\nrandom.shuffle(x)\\n\nindices, l = zip(*x)\\n", "intent": "How to mix the list by keeping the index?", "rewritten_intent": "Mix the 'l' list by preserving the 'indices' index"}, {"question_id": 87835, "snippet": "for out_i, item in enumerate(a):\\n\n\\tfor inner_i, sub_item in enumerate(item):\\n\n\\t\\tif sub_item in my_dict:\\n\n\\t\\t\\ta[out_i][inner_i] = my_dict[sub_item]\\n", "intent": "Replacement of Massive Elements", "rewritten_intent": "Replace the inserted lists of \u2018a\u2019 by \u2018my_dict\u2019"}, {"question_id": 306126, "snippet": "pattern = r\"^[-\\w\\.]+@([-\\w]+\\.)+[-\\w]{2,4}$\"\n\nif re.match(pattern, email) is not None:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\")\nelse:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\"", "intent": "Email validation in Python", "rewritten_intent": "Check if the line 'email' is an email"}, {"question_id": 306126, "snippet": "pattern = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n\nif re.match(pattern, email) is not None:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\")\nelse:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\"", "intent": "Email validation in Python", "rewritten_intent": "Check if the line 'email' is an email"}, {"question_id": 82882, "snippet": "root = Tkinter.Tk()\nfonts = list(tkFont.families())", "intent": "Writings in Python", "rewritten_intent": "Get a list of fonts available in the system"}, {"question_id": 93534, "snippet": "nums = np.arange(n1, n2, base_nums[1] - base_nums[0])", "intent": "Creating graphics in Matplotlib using linspace", "rewritten_intent": "Generate the list of numbers `nums` in the range of numbers `n1` to `n2` with the same step in the list of numbers `base_nums`"}, {"question_id": 197093, "snippet": "my_total = -1\\n\nwhile my_total != total:\\n\n\\tnums = [random.randint(0,total) for _ in range(n)]\\n\n\\tmy_total = sum(nums)\\n", "intent": "Generation of random numbers", "rewritten_intent": "Generate 'n' of random numbers 'nums' whose sum is equal to 'total'"}, {"question_id": 295537, "snippet": "my_obj = globals()[class_name]", "intent": "Creation of an object from the class name line", "rewritten_intent": "Create a 'my_obj' class object by name in the 'class_name' line"}, {"question_id": 240287, "snippet": "my_dict = dict(tupels)", "intent": "Dictionary of Cortage in Python", "rewritten_intent": "Convert the \u2018tupels\u2019 keywords to the \u2018my_dict\u2019 dictionary"}, {"question_id": 3726, "snippet": "\nwb = openpyxl.load_workbook(bookpath, data_only = True)\\n\nsh = wb[sheet]\\n\ncolor_in_hex = sh[cell_index].fill.start_color.index\\n ", "intent": "How to determine a cell background in Excel in Python?", "rewritten_intent": "Get the color `color_in_hex` cell `cell_index` xlsx file `bookpath` table `sheet`"}, {"question_id": 172669, "snippet": "doc = docx.Document()\\n\np = doc.add_paragraph()\\n\n\nrunner = p.add_run(s)\\n\nrunner.bold = True\\n\n\ndoc.save(filepath)", "intent": "How to record a fat line in a word file?", "rewritten_intent": "Write the `s` line in the docx file `file_path` fat"}, {"question_id": 53872, "snippet": "def say(self):\\n\n\\tself.lbl[\"text\"] = s\\n\n\nself.btn[\"command\"] = self.say", "intent": "Tkinter and the print team on console", "rewritten_intent": "By clicking the tkinter 'btn' button to extract the text 's' in the 'lbl' field"}, {"question_id": 26594, "snippet": "url = re.findall(r\"\\[url=(.*)\\]\", s)[0]", "intent": "Regular expression to obtain the BBCode URL", "rewritten_intent": "Get the 'url' link from the BBCode 's' line"}, {"question_id": 262974, "snippet": "`re.sub(pattern, r\"\\1{}\".format(s), text) ", "intent": "Enter an empty line after regular words", "rewritten_intent": "Enter the 's' line after the subset assigned by 'pattern' in the 'text' line."}, {"question_id": 83802, "snippet": "def progress():\\n\n\\tdef callback(block):\\n\n\\t\\tcallback.uploaded += len(block)\\n\n\\t\\tprint('Uploaded %d bytes' % callback.uploaded)\\n\n\\tcallback.uploaded = 0\\n\n\\treturn callback\\n\n\nftp.storbinary(\"STOR \" + file, open(file, \"rb\"), 1024, progress())", "intent": "Progress in downloading the file to ftp", "rewritten_intent": "Download the 'file' file by ftp with progress bar"}, {"question_id": 178993, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "Automatic parsing from websites", "rewritten_intent": "Separate the HTML code of the 'code' page by linking 'url'"}, {"question_id": 50259, "snippet": "print(\"{:.{}f}\".format(num, f)\")", "intent": "accuracy of numbers", "rewritten_intent": "Extract the number 'num' with accuracy to 'f' of the characters"}, {"question_id": 121752, "snippet": "tree = lxml.etree.parse(filepath)", "intent": "Loading the object from xml", "rewritten_intent": "Spread the XML file 'filepath' into the object 'tree'"}, {"question_id": 27963, "snippet": "for a in zip(a1, a2):\\n\n\\tprint(*a)\\n", "intent": "Results by two columns", "rewritten_intent": "Remove the elements of the lists 'a1' and 'a2' in parallel"}, {"question_id": 54149, "snippet": "frame.grid(column=0, row=0, sticky=(N, W))", "intent": "Equalization of the widget in Tkinter", "rewritten_intent": "Equate the Tkinter 'frame' widget from the top left"}, {"question_id": 61709, "snippet": "delta_nums = [abs(target_num - i) for i in nums]\nnum = nums[delta_nums.index(min(delta_nums))]", "intent": "Find the nearest items in the list", "rewritten_intent": "Find the nearest number `n` to the number `target_num` in the list `nums`"}, {"question_id": 160598, "snippet": "cursor.columns(table=sheet)\n", "intent": "Obtaining the number and list of fields in the table", "rewritten_intent": "Get a list of fields in the `sheet` sql database with the `cursor` cursor"}, {"question_id": 111347, "snippet": "if os.access(filepath, os.R_OK):\\n\n\\tprint(\"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\")\\n\nelse:\\n\n\\tprint(\"\u041d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\")\\n", "intent": "How do I find the rights to a folder, a file?", "rewritten_intent": "Check the rights to read the 'filepath' file"}, {"question_id": 37423, "snippet": "root = etree.HTML(html)", "intent": "How to choose from the line?", "rewritten_intent": "Disperse the html line `html` into the tree `root`"}, {"question_id": 93346, "snippet": "with urllib.request.urlopen(utl) as Response:\\n\n\\tLength = Response.getheader('content-length')\\n\n\\tBlockSize = 1000000  # default value\\n\n\n\\tif Length:\\t\n\\t\\tLength = int(Length)\\n\n\\t\\tBlockSize = max(4096, Length // 20)\\n\n\n\\tprint(\"UrlLib len, blocksize: \", Length, BlockSize)\\n\n\n\\tBufferAll = io.BytesIO()\\n\n\\tSize = 0\\n\n        while True:\n            BufferNow = Response.read(BlockSize)\n            if not BufferNow:\n                break\n            BufferAll.write(BufferNow)\n            Size += len(BufferNow)\n            if Length:\n                Percent = int((Size / Length)*100)\n                print('download: {Percent}% {Url}')\n\n        print(\"Buffer All len:\", len(BufferAll.getvalue()))", "intent": "Progressbar + file download with url", "rewritten_intent": "Download the file from the URL showing the progress bar"}, {"question_id": 319702, "snippet": "dicts = [json.dumps(i) for i in dicts]\\n\ndicts = [json.loads(i) for i in set(dicts)]\\n", "intent": "Iteration of the list of dictionaries, removal of the same values", "rewritten_intent": "Remove the same dictionaries from the 'dicts' dictionary list"}, {"question_id": 78494, "snippet": "\\tdef closeEvent(self, event):\\n\n\\t\\tif self.check_box.isChecked():\\n\n\\t\\t\\tevent.ignore()\\n\n\\t\\t\\tself.hide()\\n\n\\t\\t\\tself.tray_icon.showMessage(\n                \"Tray Program\",\n                \"Application was minimized to Tray\",\n                QSystemTrayIcon.Information,\n                2000\n            )\\n\n", "intent": "Python: Installation of the program in three (Linux)", "rewritten_intent": "Remove the PyQt 'win' window in the third by pressing the cross"}, {"question_id": 167202, "snippet": "hwnd = win32gui.FindWindow(None, title)\\n\n\\tcoord = win32gui.GetWindowRect(hwnd)[0:2]\\n\n\\tprint(coord)\\n", "intent": "Obtaining window coordinates", "rewritten_intent": "Get the coordinates of the 'coords' window with the title 'title'"}, {"question_id": 151936, "snippet": "parsed_url = urlparse(url)\\n\nquery = parsed_url(parsed_url.query)\\n", "intent": "Python and Parsing URLs", "rewritten_intent": "Disperse the parameters get the url 'url' request to the dictionary 'Query'"}, {"question_id": 306957, "snippet": "os.replace(filepath, newfilepath)", "intent": "Can't change the name of the file", "rewritten_intent": "Transfer the name of the 'filepath' file to the 'newfilepath' file"}, {"question_id": 249773, "snippet": "r = range(min(a), max(a) + 1)\\\nnums = sorted(list(set(r) - set(a)))\\n", "intent": "The algorithm of free numbers", "rewritten_intent": "Find missed numbers `nums` in the list `a`"}, {"question_id": 2653, "snippet": "objects.filter(children__isnull=True)", "intent": "Filters in Jango", "rewritten_intent": "Choosing Django Objects Without Successors"}, {"question_id": 122711, "snippet": "subprocess.check_output(['g++', filepath])", "intent": "System Challenges in Python", "rewritten_intent": "Compilate the C++ file 'filepath'"}, {"question_id": 249444, "snippet": "list_s = s.split()\\n\nlist_base = base_s.split()\\n\nif set(list_s) & set(list_base):\\n\n\\tprint(\"\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442\")\\n\nelse:\\n\n\\tprint(\"\u041d\u0435 \u0441\u043e\u0434\u0435\u0440\u0434\u0436\u0438\u0442\"\\n", "intent": "How do I know if one line contains a word from the other?", "rewritten_intent": "Check if the line `s` contains the word from the line `base_s`"}, {"question_id": 30398, "snippet": "try:\\n\n\\tf()\\n\nexcept KeyboardInterrupt:\\n\n\\tprint(\"Catched KeyboardInterrupt exception\")\\n", "intent": "How do you use Ctrl+C to get out of one function and continue to perform in another?", "rewritten_intent": "Finish the \u2018f\u2019 function by pressing the Ctrl+C key"}, {"question_id": 89883, "snippet": "def paintEvent(self, event):\\n\n\\tpainter = QPainter(self)\\n\n\\tpts = self.pts\\n\n\\tpainter.setPen(QPen(QColor(Qt.darkGreen), 3))\\n\n\\tpainter.drawPolyline(self.poly(pts))\\n\n\\tpainter.setBrush(QBrush(QColor(255, 0, 0)))\\n\n\\tpainter.setPen(QPen(QColor(Qt.black), 1))\\n\n\\tfor x, y in pts:\\n\n\\t\\tpainter.drawEllipse(QRectF(x - 4, y - 4, 8, 8))\\n", "intent": "How to Imitate Wave with QPainter() in PySide/PyQt4", "rewritten_intent": "Drawing the wave with PyQt4"}, {"question_id": 9273, "snippet": "def on_click(x, y, button, pressed):\\n\n\\tcoords = (x, y)\\n\n\nwith pynput.mouse.Listener(on_click=on_click) as listener:\\n\n\\tlistener.join()\\n", "intent": "How do we capture the MouseClick system event in Python?", "rewritten_intent": "Get the mouse pressure coordinates 'coords'"}, {"question_id": 234414, "snippet": "driver.get(url)\nscreenshot = driver.save_screenshot(filepath)", "intent": "Selenium: Get a uploaded image", "rewritten_intent": "Screenshot of the URL as a 'filepath' image using the selenium driver 'driver'"}, {"question_id": 210480, "snippet": "with open(filepath) as f:\\n\n\\tlines = f.readlines()\\n\n\\tline_values = collections.Counter(lines)\\n", "intent": "Calculation and conclusion of the most repeated lines", "rewritten_intent": "Calculate the lines in the 'filepath' file in the line_counts dictionary"}, {"question_id": 51160, "snippet": "\nx = sympy.symbols('x')\\n\nprint(sympy.integrate(f, (x, n, sympy.oo)))\\n", "intent": "Calculation of non-proprietary integrator with SymPy", "rewritten_intent": "Calculate the non-proprietary integral assigned by 'f' from the number 'n' to infinity"}, {"question_id": 560, "snippet": "for key in dict2:\\n\n\\tif key in dict1:\\n\n\\t\\tdel dict1[key]\\n", "intent": "Two dictionaries, Python", "rewritten_intent": "Remove the keys in the dictionary 'dict1' from the dictionary 'dict2'"}, {"question_id": 18892, "snippet": "with open(filepath,\"r\", encoding=\"utf-8\") as f:\\n\n\\tpass", "intent": "Encoding task when creating a file", "rewritten_intent": "Create a 'filepath' file with the coding utf-8"}, {"question_id": 242841, "snippet": "getattr(obj, name)()", "intent": "How to start a function within the class?", "rewritten_intent": "Start the method c by name `name` of the object `obj`"}, {"question_id": 21336, "snippet": "from django.contrib.auth.models import User, Group\\n\nadmin.site.unregister(User)\\n\nadmin.site.unregister(Group)\\n", "intent": "How to remove admin on a third party app (Django admin)", "rewritten_intent": "Remove from the Django Administrator Panel User and Group models"}, {"question_id": 57046, "snippet": "win32api.keybd_event(ord(key), 0, 0,0)", "intent": "How to get the program to press the key?", "rewritten_intent": "Press the \u2018key\u2019 key."}, {"question_id": 57046, "snippet": "pyautogui.press('s')", "intent": "How to get the program to press the key?", "rewritten_intent": "Press the \u2018key\u2019 key."}, {"question_id": 265219, "snippet": "word_dict = dict(zip(old_data, new_data))\\n\nfor word in word_dict:\\n\n\\ts = re.sub(r\"\\b{}\\b\".format(word), word_dict[word], s)\\n", "intent": "Replace the list of words in the text", "rewritten_intent": "Replace the 's' words from the 'old_words' list with the 'new_words' list."}, {"question_id": 106280, "snippet": "with open(imgpath, 'wb') as img :\n  img_obj = base64.b64decode(img_as_s,'!-')\n  img.write(img_obj)", "intent": "How to convert a line into an image?", "rewritten_intent": "Convert a 64-digit line image image `img_as_s` to image `imgpath`"}, {"question_id": 14314, "snippet": "\nresponse = urllib.request.urlopen(url)\\n\nheaders = response.headers\\n", "intent": "Python urllib title", "rewritten_intent": "Get the 'headers' dictionary from the 'url' site"}, {"question_id": 25915, "snippet": "s.encode('unicode_escape')", "intent": "Imagine the screen function.", "rewritten_intent": "Screenshots in the 's' line"}, {"question_id": 76183, "snippet": "p = 1 << (len(s)-1)\nl = []\nfor i in range(1, p):\n\\tdef rf(first, sec):\n\\t\\tc = first[0]\n\\t\\ts1 = sec\n\\t\\tif c & i > 0 :\n\\t\\t\\ts1 = sign+s1\n\\t\\treturn (c >> 1, first[1]+s1)\n\\tl.append(functools.reduce(rf, s[1:], (p >> 1, s[0]))[1])", "intent": "Python line formatting", "rewritten_intent": "Remove all possible ways of placing the 'sign' in the 's' line as in the bit number"}]