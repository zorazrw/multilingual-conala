[{"intent": "Get out a part of the positive number on Python", "rewritten_intent": "Distinguishing a part of the number \u2018num\u2019", "snippet": "math.modf(num)[0]", "question_id": 757454}, {"intent": "Get out a part of the positive number on Python", "rewritten_intent": "Distinguishing a part of the number \u2018num\u2019", "snippet": "num % 1", "question_id": 757454}, {"intent": "Python. function of working with percents", "rewritten_intent": "Calculate how many percent is the number 'part' from the number 'whole'", "snippet": "100 / whole * part", "question_id": 247377}, {"intent": "Make the first letter of each word large (principal)", "rewritten_intent": "Make the first letter of each word in the 's' line.", "snippet": "s.title()", "question_id": 712792}, {"intent": "How to identify the time of each of the functions and the total time of the program", "rewritten_intent": "Measure the time of the \u2018time_work\u2019 function", "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "question_id": 775089}, {"intent": "How to find a number in python line?", "rewritten_intent": "Find numbers in the line 's'", "snippet": "re.findall('(\\d+)', s)", "question_id": 157675}, {"intent": "EOF during entry: SyntaxError: unexpected EOF while parsing", "rewritten_intent": "Enter the 'my_tupels' code from the keyboard as a separator to use 'sep'", "snippet": "my_tupels = tuple(map(int, input().split(sep)))\n", "question_id": 567383}, {"intent": "How to record in a file the values of the integer variable", "rewritten_intent": "Enter the number 'nums' in the file 'file_path'", "snippet": "file_1 = open(file_path, \"w\")\\n\nfile_1.write(str(num))\nfile_1.close()", "question_id": 210870}, {"intent": "How to record in a file the values of the integer variable", "rewritten_intent": "Enter the number 'nums' in the file 'file_path'", "snippet": "with open(file_path, 'w') as f:\\n\n\\tprint(str(num))\\n", "question_id": 210870}, {"intent": "Json post python request", "rewritten_intent": "Send a POST query `res` c JSON data `data` to `url`", "snippet": "res = requests.post(url, json=data)", "question_id": 681594}, {"intent": "Russian JSON object coding", "rewritten_intent": "Convert my_dict to JSON", "snippet": "json.dumps(my_dict, ensure_ascii=False)", "question_id": 584129}, {"intent": "How do you compare two lists?", "rewritten_intent": "Find the common elements of the 'common_items' list 'my_list1' and list 'my_list2'", "snippet": "count_values_l1 = Counter(my_list1)\\n\ncount_values_l2 = Counter(my_list2)\\n\nkeys1 = count_values_l1.keys()\\n\nkeys2 = count_values_l2.keys()\\n\ncommon_items = []\\n\nfor key in keys1:\\n\n\\tif key in keys2:\\n\n\\t\\tcommon_items += [key] * min(count_values_l1[key], count_values_l2[key])\n", "question_id": 37137}, {"intent": "How do you compare two lists?", "rewritten_intent": "Find the common elements of the 'common_items' list 'my_list1' and list 'my_list2'", "snippet": "list(set(my_list1) & set(my_list2))", "question_id": 37137}, {"intent": "Divide the number into simple multiplicators.", "rewritten_intent": "Divide the number 'n' into simple multiplicators 'factors'", "snippet": "factors = []\\n\nwhile n % 2 == 0:\\n\n\\tfactors.append(n)\\n\n\\tn = n / 2\\n\\n\n    \nfor i in range(3,int(math.sqrt(n))+1,2):\\n\n\\twhile (n % i == 0):\\n\n\\t\\tfactors.append(i)\\n\n\\t\\tn = n / i\\n\\n\n    \nif n > 2:\\n\n\\tfactors.append(n)", "question_id": 645227}, {"intent": "How to create a list of random whole numbers using list inclusion?", "rewritten_intent": "Generate a list of 'my_list' of long 'N' random values in the range from 'val1' to 'val2'", "snippet": "my_list = [random.randint(val1, val2) for i in range(N)]", "question_id": 565846}, {"intent": "Screening the \"\\\" symbols in python", "rewritten_intent": "Get an absolute path for the file 'file_path'", "snippet": "os.path.join(os.path.abspath(os.curdir), file_path)", "question_id": 801094}, {"intent": "How to change the items of the list?", "rewritten_intent": "Change the items of the list 'my_list' with the indices 'i' and 'j'", "snippet": "my_list[i], my_list[j] = my_list[j], my_list[i]", "question_id": 925879}, {"intent": "Authentication of VK API and Python App", "rewritten_intent": "Authorize in the VK app with the ID `APP_ID` with the login `LOGIN` and the password `PASS`", "snippet": "def auth_vk_password():\\n\n\\tsession = vk.AuthSession(app_id=APP_ID, user_login=LOGIN, user_password=PASS)\n\\tfile = open(\"auth_vk.ini\", 'w')\n\\tfile.writelines(session.access_token)\n\\treturn session\n\ntry:\\n\n\\tfile = open(\"auth_vk.ini\", 'r')\\n\nexcept IOError as e:\\n\n\\taccess_token = auth_vk_password().access_token\\n\nelse:\\n\n\\taccess_token = file.readline()\\n\n\nsession = vk.Session(access_token=access_token)\\n\nif session:\\n\n\\tprint('\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!')\\n\nelse:\\n\n\\tprint('\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c!')\\n", "question_id": 140252}, {"intent": "Listing through a gap", "rewritten_intent": "Enter from the keyboard through the lost list of lines `my_list`", "snippet": "my_list = input().split()", "question_id": 649828}, {"intent": "How to check the key in the dictionary?", "rewritten_intent": "Check the \u2018my_key\u2019 key in the word \u2018my_dict\u2019", "snippet": "my_key in my_dict", "question_id": 752179}, {"intent": "How to check the key in the dictionary?", "rewritten_intent": "Check the \u2018my_key\u2019 key in the word \u2018my_dict\u2019", "snippet": "if my_key in my_dict:\\n\n\\tprint('\u041a\u043b\u044e\u0447 {my_key} \u0435\u0441\u043b\u0438 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435')\\n\nelse:\\n\n\\tprint('\u041a\u043b\u044e\u0447\u0430 {my_key} \u043d\u0435\u0442 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435')\\n", "question_id": 752179}, {"intent": "Extension of file to python", "rewritten_intent": "Get the extension \u2018file_extension\u2019 file \u2018file_path\u2019", "snippet": "filename, file_extension = os.path.splitext(file_path)", "question_id": 540082}, {"intent": "Extension of file to python", "rewritten_intent": "Get the extension \u2018file_extension\u2019 file \u2018file_path\u2019", "snippet": "file_extension= file_path.split('.')[-1]", "question_id": 540082}, {"intent": "Remove all the symbols after inserting .replace(\",*\", \"\")", "rewritten_intent": "Remove all the symbols in the 's' line after the symbol 'symbol'", "snippet": "s = s[:s.find(symbol)]", "question_id": 502573}, {"intent": "Remove all the symbols after inserting .replace(\",*\", \"\")", "rewritten_intent": "Remove all the symbols in the 's' line after the symbol 'symbol'", "snippet": "s = s.split(symbol)[0]", "question_id": 502573}, {"intent": "Parallel performance of functions in different classes", "rewritten_intent": "Apply the method 1 of class A and the method 2 of class B", "snippet": "class A_heir(A):\\n\n\\tdef __init__(self):\\n\n\\t\\tsuper().__init__()\\n\n        \n\\tdef __call__(self, func_name=\"\", args=[], kwargs={}):\\n\n\\t\\treturn getattr(self, func_name)(*args, **kwargs)\\n\n\nclass B_heir(B):\\n\n\\tdef __init__(self):\\n\n\\t\\tsuper().__init__()\\n\n        \n\\tdef __call__(self, func_name=\"\", args=[], kwargs={}):\\n\n\\t\\treturn getattr(self, func_name)(*args, **kwargs)\\n\n            \na = A_heir()\\n\nb = B_heir()\\n\n\np1 = Process(target=a, kwargs={'func_name': method1})\\n\np2 = Process(target=b, kwargs={'func_name': method2})\\n\np1.start()\\n\np2.start()\\n\n\np1.join()\\n\np2.join()\\n", "question_id": 452762}, {"intent": "Listing differences in Python", "rewritten_intent": "Find the difference between my_list1 and my_list2", "snippet": "count_values1 = Counter(my_list1)\\n\ncount_values2 = Counter(my_list2)\\n\n\nkeys1 = list(count_values1.keys())\\n\nkeys2 = list(count_values2.keys())\\n\n\ndiff_list = []\\n\nfor key in set(keys1 + keys2):\\n\n\\tif key in keys1 and key in keys2:\\n\n\\t\\tdiff_list += [key] * abs(count_values1[key] - count_values2[key])\\n\n\\telif key in keys1:\\n\n\\t\\tdiff_list += [key] * count_values1[key]\\n\n\\telif key in keys2:\\n\n\\t\\tdiff_list += [key] * count_values2[key]\\n", "question_id": 21825}, {"intent": "Listing differences in Python", "rewritten_intent": "Find the difference between my_list1 and my_list2", "snippet": "diff_list = list(set(my_list1)-set(my_list2)) + list(set(my_list2)-set(my_list1))", "question_id": 21825}, {"intent": "Cycle while \"Summer of sequence of numbers\"", "rewritten_intent": "Find the sum of the numbers 'total' that are entered from the keyboard, the sign of the end of the input 'end_sign'", "snippet": "total = 0\\n\nwhile True:\\n\n\\tn = int(input())\\n\n\\tif n == end_sign:\\n\n\\t\\tbreak\\n\n\\ttotal += n\\n", "question_id": 384437}, {"intent": "Python | How to find the index of the symbol in a line?", "rewritten_intent": "Find the position of the symbol 'my_char' in the line 's'", "snippet": " s.index(my_char)", "question_id": 513149}, {"intent": "Python | How to find the index of the symbol in a line?", "rewritten_intent": "Find the position of the symbol 'my_char' in the line 's'", "snippet": " s.find(my_char)", "question_id": 513149}, {"intent": "Introducing n elements into one line", "rewritten_intent": "Enter the number from the keyboard through the gap in the list 'my_list'", "snippet": "my_list = list(map(int, input().split()))", "question_id": 934453}, {"intent": "Introducing n elements into one line", "rewritten_intent": "Enter the number from the keyboard through the gap in the list 'my_list'", "snippet": "my_list = [int(a) for a in input().split()]", "question_id": 934453}, {"intent": "Python: Creating Word documents by template", "rewritten_intent": "Scan the word document `output_file_path` by template from the word file `template_path` with JSON data data", "snippet": "#python-docx-template\\n\ndoc = DocxTemplate(template_path)\\n\ndata = { 'var_name' : \"HELLO WORLD!\" }\\n\ndoc.render(data)\\n\ndoc.save(output_file_path)", "question_id": 515513}, {"intent": "The empty list in Python", "rewritten_intent": "Check if my_list is empty.", "snippet": "if not my_list:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n\nelse:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n", "question_id": 524081}, {"intent": "The empty list in Python", "rewritten_intent": "Check if my_list is empty.", "snippet": "if length(my_list) == 0:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n\nelse:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n", "question_id": 524081}, {"intent": "Multiply table in python", "rewritten_intent": "Generate the multiplication table to the number number", "snippet": "for i in range(1, num):\\n\n\\tprint(*range(i, i*num+1, i), sep='\\t')\\n", "question_id": 766573}, {"intent": "Python+requests: POST transfer of multipart/form-data into a form", "rewritten_intent": "Send a POST query with JSON data and file_path to URL", "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, data=data, files=files)", "question_id": 724582}, {"intent": "How to count how many times a symbol appears in a line?", "rewritten_intent": "Calculate the symbols in the line 's'", "snippet": "Counter(s)", "question_id": 735924}, {"intent": "How to count how many times a symbol appears in a line?", "rewritten_intent": "Calculate the symbols in the line 's'", "snippet": "{c:s.count(c) for c in set(s)}", "question_id": 735924}, {"intent": "Quick search for items in the python list", "rewritten_intent": "Get the word value of my_dict by my_key", "snippet": "my_dict[my_key]", "question_id": 504426}, {"intent": "Python 3 and Russian symbols: print('Hello!') leads to UnicodeEncodeError: 'ascii' codec can't encode... error", "rewritten_intent": "Configure the utf-8 code for the file", "snippet": "## -*- coding: utf-8 -*-", "question_id": 387249}, {"intent": "Exit through Python gap", "rewritten_intent": "Convert the list 'my_list' to the 's' c line by 'sep' separator", "snippet": "s = sep.join(my_list)", "question_id": 66490}, {"intent": "Exit through Python gap", "rewritten_intent": "Convert the list 'my_list' to the 's' c line by 'sep' separator", "snippet": "s = sep.join(map(str, my_list))", "question_id": 66490}, {"intent": "Remove all numbers from the line.", "rewritten_intent": "Remove all numbers from the 's' line.", "snippet": "re.sub(r'[^\\w\\s]+|[\\d]+', r'',s)", "question_id": 363427}, {"intent": "Presentation of lines as numbers", "rewritten_intent": "Get the code of the symbols of the 's' line", "snippet": "for c in s:\\n\n\\tprint(ord(c))", "question_id": 224298}, {"intent": "How to get a HTML page code with Python?", "rewritten_intent": "Remove the HTML code of the 'code' page by the URL link", "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "question_id": 182910}, {"intent": "Python - how to stop the performance of a function from another function?", "rewritten_intent": "Disconnect the \u2018parent_func\u2019 from the \u2018child_func\u2019", "snippet": "def child_func():\\n\n\\tif something_went_wrong:\\n\n\\t\\traise Exception(\"Something went wrong\")\\n\n    \ndef parent_func():\\n\n\\t# ...\\n\n\\ttry:\\n\n\\t\\tchild_func()\\n\n\\texcept Exception as e:\\n\n\\t\\tprint(\"Error:\", e)\\n\n\\t\\treturn", "question_id": 715809}, {"intent": "TypeError: Object of type is not JSON serializable", "rewritten_intent": "Serialize my_obj object of my_class", "snippet": "class ClassEncoder(json.JSONEncoder):\\n\n\\tdef default(self, obj):\\n\n\\tif isinstance(obj, My_class):\\n\n\\t\\treturn obj.__dict__\\n\n\\treturn json.JSONEncoder.default(self, obj)\\n\n        \njson.dumps(my_obj, cls=ClassEncoder)\\n", "question_id": 850118}, {"intent": "Separate the line into words and draw them to print one by one.", "rewritten_intent": "Divide the line 's' into the word 'words'", "snippet": "words = s.split()", "question_id": 673692}, {"intent": "How to check a str-type variable in Python 3?", "rewritten_intent": "Check if \u2018s\u2019 is a line.", "snippet": "isinstance(s, str)", "question_id": 843929}, {"intent": "How to convert a list into multiple and vice versa", "rewritten_intent": "Convert a list of my_list to a number of my_set", "snippet": "my_set = set(my_list)", "question_id": 705331}, {"intent": "python 3 how to track the button click", "rewritten_intent": "When you click my_key, start my_function.", "snippet": "keyboard.add_hotkey(my_key, my_func)", "question_id": 841014}, {"intent": "pyTelegramBotAPI (telebot) processing and receiving requests", "rewritten_intent": "Process the command `cmd` telegram bots with the token `TOKEN` and send a reply message `mess`", "snippet": "bot = telebot.TeleBot(TOKEN)\\n\n\n@bot.message_handler(commands=[cmd])\\n\ndef add(message):\\n\n\\tbot.send_message(message.chat.id, mess)", "question_id": 589590}, {"intent": "Break a number into a list of numbers", "rewritten_intent": "Break the number \u2018num\u2019 into the breakdowns", "snippet": "list(str(num))", "question_id": 262786}, {"intent": "Break a number into a list of numbers", "rewritten_intent": "Break the number \u2018num\u2019 into the breakdowns", "snippet": "[int(i) for i in str(num)]", "question_id": 262786}, {"intent": "Timer in Python: to record events that have to be saved", "rewritten_intent": "Measure the time of the \u2018time_work\u2019 function", "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "question_id": 313184}, {"intent": "Check the numbers in the lines", "rewritten_intent": "Check if there are numbers in the 's' line", "snippet": "any(map(str.isdigit, s))", "question_id": 678639}, {"intent": "Check the numbers in the lines", "rewritten_intent": "Check if there are numbers in the 's' line", "snippet": "re.search('\\d+', s)", "question_id": 678639}, {"intent": "Error \"not all arguments converted during string formatting\"", "rewritten_intent": "Calculate the number from the keyboard to the variable 'num'.", "snippet": "num = int(input().strip())", "question_id": 830473}, {"intent": "Question: How many cows are there?", "rewritten_intent": "Select the slope of the word 'word' depending on the number 'n' by template", "snippet": "form = { # \u043f\u0440\u0438\u043c\u0435\u0440 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0441\u043b\u043e\u0432\u0430 \"\u043a\u043e\u0440\u043e\u0432\u0430\"\\n\n    \"11-14\": \"\u043a\u043e\u0440\u043e\u0432\",\\n\n    \"0,5-9\": \"\u043a\u043e\u0440\u043e\u0432\",\\n\n    \"1\": \"\u043a\u043e\u0440\u043e\u0432\u0430\",\\n\n    \"2-4\": \"\u043a\u043e\u0440\u043e\u0432\u044b\",\\n\n}\\n\n\nif n >= 11 and n <= 14:\\n\n\\tprint(n, form[\"11-14\"])\\n\nelse:\\n\n\\ttemp = n % 10\\n\n\\tif temp == 0 or (temp >= 5 and temp <= 9):\\n\n\\t\\tprint(n, form[\"0,5-9\"])\\n\n\\tif temp == 1:\\n\n\\t\\tprint(n, form[\"1\"])\\n\n\\tif temp >=2 and temp <=4:\\n\n\\t\\tprint(n, form[\"2-4\"])\\n", "question_id": 307354}, {"intent": "Complete the mass with random values", "rewritten_intent": "Generate a list of 'my_list' random values in the range from 'val1' to 'val2' long 'N'", "snippet": "my_list = [random.randint(val1, val2) for i in range(N)]", "question_id": 773920}, {"intent": "Python: Break the list into a list, by partition element", "rewritten_intent": "Break the list of 'my_list' into the list of 'splitted' by 'sep' divider", "snippet": "splitted = [[]]\\n\nfor item in my_list:\\n\n\\tif item == sep:\\n\n\\t\\tsplitted.append([])\\n\n\\telse:\\n\n\\t\\tsplitted[-1].append(item)", "question_id": 115592}, {"intent": "Multi-dimensional python", "rewritten_intent": "Generate a list of my_list of the size of `M`x`N` filled with the value of `val`", "snippet": "my_list = [[val for _ in range(N)] for _ in range(M)]", "question_id": 158145}, {"intent": "Calculator and cycles for and while (Python) need to write a calculator", "rewritten_intent": "Calculate the sum of `n` members of the arithmetic progression with a member given the function `f(x)`", "snippet": "s = 0\\n\nfor x in range(1, n+ 1):\\n\n\\ts += f(x)\\n", "question_id": 592250}, {"intent": "Calculator and cycles for and while (Python) need to write a calculator", "rewritten_intent": "Calculate the sum of `n` members of the arithmetic progression with a member given the function `f(x)`", "snippet": "s = 0\\n\nx = 0\\n\nwhile True:\\n\n\\tx+= 1\\n\n\\ts += f(x)\\n\n\\tif x == n:\\n\n\\t\\tbreak\\n", "question_id": 592250}, {"intent": "Transformation of dates between line-up presentations", "rewritten_intent": "Convert the 'old_date' to 'new_date' in the 'date_format' format using the datetime library", "snippet": "new_date = datetime.strptime(old_date, date_format)", "question_id": 419321}, {"intent": "Transformation of dates between line-up presentations", "rewritten_intent": "Convert the 'old_date' to 'new_date' in the 'date_format' format using the datetime library", "snippet": "locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')\\n\nnew_date = datetime.strptime(old_date, date_format).date()", "question_id": 419321}, {"intent": "Python Fixing Error and Stacktrace in Console", "rewritten_intent": "Name of the error in the try-catch", "snippet": "try:\\n\n\\tpassexcept Exception as e:\\n\n\\tprint('\u041e\u0448\u0438\u0431\u043a\u0430:\\n', traceback.format_exc())\\n", "question_id": 505510}, {"intent": "Python Fixing Error and Stacktrace in Console", "rewritten_intent": "Name of the error in the try-catch", "snippet": "try:\\n\n\\tpassexcept Exception as e:\\n\n\\tprint('\u041e\u0448\u0438\u0431\u043a\u0430:\\n', e)\\n", "question_id": 505510}, {"intent": "How to replace a string in a .txt file through python 3?", "rewritten_intent": "Replace the 'old_s' to the 'new_s' in the file 'file_path'", "snippet": "with open (file_path, 'r') as f:\\n\n\\told_data = f.read()\\n\n\nnew_data = old_data.replace(old_s, new_s)\\n\n\nwith open (file_path, 'w') as f:\\n\n\\tf.write(new_data)\\n", "question_id": 654183}, {"intent": "Calculation of the entries of the crossing substrate in the line", "rewritten_intent": "Find the number of \u2018count\u2019 entries in the \u2018s\u2019 substrate", "snippet": "count = 0\\n\ni = -1\\n\nwhile True:\\n\n\\ti = s.find(sub, i+1)\\n\n\\tif i == -1:\\n\n\\t\\tbreak\\n\n\\tcount += 1", "question_id": 404985}, {"intent": "How to send an email to Python", "rewritten_intent": "Send a letter with the text 'message' to 'receiver_email' using a gmail account with the login 'sender_email' and the password 'password'", "snippet": "# \u0414\u0430\u0439\u0442\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 https://myaccount.google.com/lesssecureapps\nport = 465  # For SSL\\n\nsmtp_server = \"smtp.gmail.com\"\\n\ncontext = ssl.create_default_context()\\n\nwith smtplib.SMTP_SSL(smtp_server, port, context=context) as server:\\n\n\\tserver.login(sender_email, password)\\n\n\\tserver.sendmail(sender_email, receiver_email, message)\\n", "question_id": 193764}, {"intent": "Can I make a colourful conclusion of a program in Python?", "rewritten_intent": "Enter the line 's' with the color 'color' in the terminal.", "snippet": "colors = {\\n\n\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\": '\\u001b[31m',\\n\n\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\": '\\u001b[32m',\\n\n\"\u0441\u0438\u043d\u0438\u0439\": '\\u001b[34m',\\n\n\"\u0431\u0435\u043b\u044b\u0439\": '\\u001b[37m',\\n\n\"\u0447\u0435\u0440\u043d\u044b\u0439\": '\\u001b[30m',\\n\n\"\u0436\u0435\u043b\u0442\u044b\u0439\": '\\u001b[33m',\\n\n'reset': '\\033[0m'\\n\n}\\n\nprint('{ colors[color] }{ s }{ colors['reset'] }')", "question_id": 294557}, {"intent": "Can I make a colourful conclusion of a program in Python?", "rewritten_intent": "Enter the line 's' with the color 'color' in the terminal.", "snippet": "#import colorama\n#from colorama import Fore\n#from colorama import Style\n\ncolors = {\\n\n\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\": 'RED'\\n,\n\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\": 'GREEN',\\n\n\"\u0441\u0438\u043d\u0438\u0439\": 'BLUE',\\n\n\"\u0431\u0435\u043b\u044b\u0439\": 'WHITE',\\n\n\"\u0447\u0435\u0440\u043d\u044b\u0439\": 'BLACK',\\n\n\"\u0436\u0435\u043b\u0442\u044b\u0439\": 'YELLOW'\\n\n}\\n\nprint(getattr(Fore, colors[color]) + Style.BRIGHT + s + Style.RESET_ALL)", "question_id": 294557}, {"intent": "Function reversed() in Python", "rewritten_intent": "Turn the list 'my_list'", "snippet": "my_list.reverse()", "question_id": 427051}, {"intent": "Function reversed() in Python", "rewritten_intent": "Turn the list 'my_list'", "snippet": "my_list = my_list[::-1]", "question_id": 427051}, {"intent": "Function reversed() in Python", "rewritten_intent": "Turn the list 'my_list'", "snippet": "my_list = list(reversed(my_list))", "question_id": 427051}, {"intent": "How to make a dictionary from two lists?", "rewritten_intent": "Unify the list of 'list_key' and the list of 'list_value' values to the 'my_dict' dictionary", "snippet": "my_dict = dict(zip(list_key, list_value))", "question_id": 789625}, {"intent": "How to make a dictionary from two lists?", "rewritten_intent": "Unify the list of 'list_key' and the list of 'list_value' values to the 'my_dict' dictionary", "snippet": "my_dict = {list_key[i]: list_value[i] for i in range(len(list_key))}", "question_id": 789625}, {"intent": "How to send a letter with an investment from a script on Piton?", "rewritten_intent": "Send a letter with the file `file_path` to the address `receiver_email` from the smtp-server `smtp_server` with the login `sender_email` and the password `password`", "snippet": "basename = os.path.basename(file_path)\\n\n\n# Compose attachment\\n\npart = MIMEBase('application', \"octet-stream\")\\n\npart.set_payload(open(file_path ,\"rb\").read() )\\n\nencoders.encode_base64(part)\\n\npart.add_header('Content-Disposition', 'attachment; filename=\"%s\"' % basename)\\n\n\n# Compose message\\n\nmsg = MIMEMultipart()\\n\nmsg['From'] = sender_email\\n\nmsg['To'] = receiver_email\\n\nmsg.attach(part)\\n\n\n# Send mail\\n\nsmtp = SMTP_SSL(smtp_server)\\n\nsmtp.connect(smtp_server, 465)\\n\nsmtp.login(sender_email, password)\\n\nsmtp.sendmail(sender_email, receiver_email, msg.as_string())\\n\nsmtp.quit()\\n", "question_id": 1}, {"intent": "Remove part of the sequence 1 2 2 3 3 3 4 4 4 4 4 5 5 5 5 5 to python 3", "rewritten_intent": "Remove the line `s` `n` once through the Sep separator", "snippet": "print(sep.join([s] * n))", "question_id": 477678}, {"intent": "How to choose the right pillars?", "rewritten_intent": "Select the column `cols` with the index `list_indexes` pandas dataframe `df`", "snippet": "cols = df.iloc[:, indexes]", "question_id": 635319}, {"intent": "How to calculate the amount of items in a list using FOR IN", "rewritten_intent": "Find the sum of the number \u2018total\u2019 of my_list", "snippet": "total = sum(my_list)", "question_id": 1085344}, {"intent": "How to calculate the amount of items in a list using FOR IN", "rewritten_intent": "Find the sum of the number \u2018total\u2019 of my_list", "snippet": "total = 0\\n\nfor i in my_list:\\n\n\\ttotal += i\\n", "question_id": 1085344}, {"intent": "Find the maximum value of the Python dictionary", "rewritten_intent": "Find the maximum \u2018max_value\u2019 in the word \u2018my_list\u2019", "snippet": "max_val = {x: y for x, y in filter(lambda x: my_list[x[0]] == max(my_list.values()), my_list.items())}\n", "question_id": 759476}, {"intent": "Find the maximum value of the Python dictionary", "rewritten_intent": "Find the maximum \u2018max_value\u2019 in the word \u2018my_list\u2019", "snippet": "max_val = max(my_list.values())", "question_id": 759476}, {"intent": "Listing words in a random order without repetitions", "rewritten_intent": "Remove 'n' words from the 'my_list' list randomly without repetitions", "snippet": "print(*random.sample(set(my_list),n))", "question_id": 407127}, {"intent": "Error in the proxy with Russian symbols Python: SyntaxError: (unicode error) 'utf-8' codec can't decode byte 0xd1", "rewritten_intent": "Configure the utf-8 code for the file", "snippet": "## -*- coding: utf-8 -*-", "question_id": 526785}, {"intent": "Assignment operator += for lists (add by place)", "rewritten_intent": "Add 'my_tuple' to the list 'my_list'", "snippet": "my_list.extend(my_tuple)", "question_id": 446920}, {"intent": "Replacement function", "rewritten_intent": "Substitute the symbol in the line `s` in the position `i` to the symbol `symbol`", "snippet": "s[:i] + symbol + s[i + 1:]", "question_id": 103581}, {"intent": "Sorting the list", "rewritten_intent": "Sort the list \u2018my_list\u2019", "snippet": "my_list = sorted(my_list)", "question_id": 28096}, {"intent": "Sorting the list", "rewritten_intent": "Sort the list \u2018my_list\u2019", "snippet": "my_list.sort()", "question_id": 28096}, {"intent": "You need to know the IP address of your computer on the Internet in Python.", "rewritten_intent": "Get your computer\u2019s \u2018my_ip\u2019 IP address online", "snippet": "conn = http.client.HTTPConnection(\"ifconfig.me\")\\n\nconn.request(\"GET\", \"/ip\")\\n\nmy_ip = conn.getresponse().read()\\n", "question_id": 133137}, {"intent": "Difference between two dates per second in Django", "rewritten_intent": "Find how much time has passed between the dates in the formate of datetime `first_date` and `second_date`", "snippet": "second_date - first_date", "question_id": 134564}, {"intent": "Graphics (picture by points) in Python", "rewritten_intent": "Generate an image by points with a list of coordinates 'points'", "snippet": "img = Image.new('RGB', (256, 256 * 3), 'white')\\n\nfor point in points:\\n\n\\tdraw.point(point + img.size,color=\"red\")\\n\n\nimg.show()\\n\n", "question_id": 14349}, {"intent": "How to accept parameters in python script", "rewritten_intent": "Get a list of parameters \u2018params\u2019 from the command line", "snippet": "sys.argv", "question_id": 236635}, {"intent": "Timer in Python", "rewritten_intent": "Measure the time of the \u2018time_work\u2019 function", "snippet": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t", "question_id": 230436}, {"intent": "Remove selective lines from the file", "rewritten_intent": "Remove from the file 'file_path' lines beginning with the 'prefix' line", "snippet": "\ntext = \"\"\nwith open(file_path, 'r') as f:\n    for line in f:\n        if not re.search(r\"^({})\".format(prefix), line):\n            text += line\n\nwith open(file_path, 'w') as f:\n    f.write(text)", "question_id": 273613}, {"intent": "Frequency of words in the text", "rewritten_intent": "Count the words in the line 's'", "snippet": "Counter(s.split())", "question_id": 9096}, {"intent": "Python how to write a translation function from a k-core system to a decimal?", "rewritten_intent": "Convert the number 'num' in a calculation system with the basis 'base' into the number 'new_num' in a decimal calculation system", "snippet": "new_num = int(str(num), base) ", "question_id": 157783}, {"intent": "How to create a new database in Python and perform a script in it?", "rewritten_intent": "Create a database of sqlite3 'file_path'", "snippet": "con = sqlite3.connect(db_path)\\n\ncur = con.cursor()\\n", "question_id": 224243}, {"intent": "Start bash from Python script 2.7.3.", "rewritten_intent": "Get the output flow of the 'cmd' command of the console to the 'result' file object", "snippet": "result = os.popen(cmd, 'r', 1)", "question_id": 225896}, {"intent": "\"ValueError: dictionary update sequence element #0 has length\" when using dict", "rewritten_intent": "Convert the line 's' to the dictionary 'my_dict'", "snippet": "my_dict = json.loads(s)", "question_id": 319317}, {"intent": "\"ValueError: dictionary update sequence element #0 has length\" when using dict", "rewritten_intent": "Convert the line 's' to the dictionary 'my_dict'", "snippet": "my_dict = dict(ast.literal_eval(s))", "question_id": 319317}, {"intent": "Read the files in a variable until it is over.", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "question_id": 235923}, {"intent": "Read the files in a variable until it is over.", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "question_id": 235923}, {"intent": "Read the files in a variable until it is over.", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "question_id": 235923}, {"intent": "Reading from a text file of numbers", "rewritten_intent": "Get a list of numbers from the line 's'", "snippet": "regexp = re.compile( \"\\s*(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?)\\s*;\", re.M )\\n\nnums = regexp.findall(s)\\n", "question_id": 44503}, {"intent": "How to break the text into separate proposals?", "rewritten_intent": "Break the line 's' into the list of proposals 'sentences'", "snippet": "split_regex = re.compile(r'[.|!|?|\u2026]')\\n\nsentences = list(filter(lambda t: t, [t.strip() for t in split_regex.split(s)]))", "question_id": 197142}, {"intent": "python 2.7, in the same line", "rewritten_intent": "Remove the 's' line to the screen without translating the line", "snippet": "print(s, end=\" \")", "question_id": 166814}, {"intent": "Challenge of other python scripts", "rewritten_intent": "Call the `f` function from the file `file_path`", "snippet": "exec(open(\"./file_path\").read())\\n\nf()\\n", "question_id": 69121}, {"intent": "Playing MP3 in Python", "rewritten_intent": "Repeat the audio file \u2018file_path\u2019", "snippet": "mixer.init()\\n\nmixer.music.load(file_path)\\n\nmixer.music.play()\\n", "question_id": 75962}, {"intent": "How to remove a value from a dictionary during a cycle for", "rewritten_intent": "Remove the word \u2018my_dict\u2019 with the key \u2018my_key\u2019 inside the cycle for", "snippet": "keys = list(my_dict.keys()).copy()\\n\nfor i in keys:\\n\n    if my_key in my_dict:\n        del my_dict[my_key]\n", "question_id": 91763}, {"intent": "Bit operations", "rewritten_intent": "Turn the number 'num' into a byte line", "snippet": "str(num).encode()", "question_id": 297129}, {"intent": "Interaction with BD in Python", "rewritten_intent": "Connect to the mysql database `db_name` in the host `my_host` under the user and the password `password`", "snippet": "con = pymysql.connect(my_host, user, password, db_name)\\n \nwith con:\\n    \n\\tcur = con.cursor()\\n", "question_id": 19994}, {"intent": "Substitute the elements of the line by the significance of the dictionary", "rewritten_intent": "Substitute the symbols in the 's' line by the word 'my_dict'", "snippet": "frm = ''.join([str(i) for i in my_dict.keys()])\\n\nto = ''.join([str(i) for i in my_dict.values()])\\n\ntrantab = str.maketrans(frm, to)\\n\ns = s.translate(trantab)\\n", "question_id": 55256}, {"intent": "Substitute the elements of the line by the significance of the dictionary", "rewritten_intent": "Substitute the symbols in the 's' line by the word 'my_dict'", "snippet": "for i, symbol in enumerate(s):\\n\n\\tif symbol in my_dict:\\n\n\\t\\ts = s[:i] + str(my_dict[symbol]) + s[i+1:]\\n", "question_id": 55256}, {"intent": "Dynamic path for upload_to in the django model (models.FileField)", "rewritten_intent": "Scan the dynamic path for file storage in Django upload_to", "snippet": "def get_upload_path(instance, filename):\\n\n    return os.path.join(\n      \"user_%d\" % instance.owner.id, \"car_%s\" % instance.slug, filename)", "question_id": 105134}, {"intent": "Remove items from the list", "rewritten_intent": "Remove from the line `s` words with the prefix `suff`", "snippet": "\" \".join(list(filter( lambda x : not x.endswith(suff), list(s.split()))))", "question_id": 185524}, {"intent": "Check the existence of a variable.", "rewritten_intent": "Check the existence of the global variable \u2018my_var\u2019", "snippet": "globs = globals().copy()\\n\nvar_name = list(filter(lambda x: id(globs[x]) == id(my_var), globs))[0]\\n\nif var_name in globals():\\n\n\\tprint('y')\\n\nelse:\\n\n\\tprint('n')\\n", "question_id": 294170}, {"intent": "Get all the significance of the dictionary.", "rewritten_intent": "Get a list of values of 'values_by_key' from the list of 'dict_list' dictionaries by the key 'my_key'", "snippet": "values_by_key  = [x[my_key] for x in dict_list if my_key in x] \n", "question_id": 205516}, {"intent": "Simple example of htmp page parser", "rewritten_intent": "Remove the HTML code of the 'code' page by the URL link", "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "question_id": 45499}, {"intent": "How do you use the commands module to execute a command from sudo to Linux?", "rewritten_intent": "Run the command `cmd` on behalf of an administrator in Linux", "snippet": "os.popen(\"sudo -S %s\"%(command), 'w').write(cmd)", "question_id": 292305}, {"intent": "Django redirect", "rewritten_intent": "Transfer to 'url' in Django", "snippet": "redirect(url)", "question_id": 58045}, {"intent": "Window location in the Tkinter center", "rewritten_intent": "Place the Tkinter 'window' window in the center", "snippet": "`x = (window.winfo_screenwidth() - window.winfo_reqwidth()) / 2\\n\ny = (window.winfo_screenheight() - window.winfo_reqheight()) / 2\\n\nwindow.wm_geometry(\"+%d+%d\" % (x, y))\\n\nwindow.mainloop()\\n", "question_id": 19319}, {"intent": "Python in Excel", "rewritten_intent": "Save a list of values in the excel file \u2018filename\u2019", "snippet": "book = xlwt.Workbook()\\n\nsheet1 = book.add_sheet(\"sheet1\")\\n\n\nfor row_index, row_values in enumerate(values):\\n\n\\trow = sheet1.row(row_index)\\n\n\\tfor col_index, col in enumerate(row_values):\\n\n\\t\\tvalue = row_values[col_index]\\n\n\\t\\trow.write(col_index, value)\\n\n\nbook.save(filename)", "question_id": 211668}, {"intent": "Massive and Cycle for in Python", "rewritten_intent": "Combining the items of the list 'my_list' in the lines", "snippet": "list(map(lambda x: x[0]+x[1], zip(my_list[0::2], my_list[1::2])))", "question_id": 163083}, {"intent": "How to translate a line into bytes into Python 3.2?", "rewritten_intent": "Turn the line 's' into the byte-time", "snippet": "s.encode()\n", "question_id": 62533}, {"intent": "JSON python", "rewritten_intent": "Convert the 's' line to a JSON object 'my_json'", "snippet": "my_json = json.loads(s)\n", "question_id": 215531}, {"intent": "Upload the file to the server in the POST mode", "rewritten_intent": "Send a POST query with the file 'file_path' to 'url'", "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "question_id": 86126}, {"intent": "How to restart the function if the exception falls out?", "rewritten_intent": "Call the `my_f` function again in case of error.", "snippet": "def stable_running():\\n\n\\ttry:\\n\n\\t\\tmy_f()\\n\n\\texcept ValueError:\\n\n\\t\\tstable_running()\\n", "question_id": 301251}, {"intent": "Encryption on Python", "rewritten_intent": "Chess the 's' line using the MD5 algorithm", "snippet": "hashlib.md5(s.unicode())", "question_id": 1666}, {"intent": "Data from the file: UnicodeEncodeError: 'charmap' codec can't encode character", "rewritten_intent": "Open the file 'file_path' with UTF-8 coding", "snippet": "with open(file_path, 'r') as f:\\n\n\\tpass", "question_id": 151750}, {"intent": "Sorting by alphabet and length immediately", "rewritten_intent": "Sort the list of strings by alphabet and length", "snippet": "strings.sort()", "question_id": 271764}, {"intent": "How to calculate the distance from one point to all the other points?", "rewritten_intent": "Find the distance between a point with coordinates and a point with coordinates.", "snippet": "[math.dist(point, cur_point) for cur_point in points]", "question_id": 103067}, {"intent": "Comparison of files", "rewritten_intent": "Compare the files \u2018file_path1\u2019 and \u2018file_path2\u2019", "snippet": "l1 = map(lambda x: x.strip(), list(open('test1.txt')))\\n\nl2 = map(lambda x: x.strip(), list(open('test2.txt')))\\n\ndiff_list = list(zip(l1, l2))\\n\n\nfor i, line in enumerate(diff_list):\\n\n\\tif line[0] == line[1]:\\n\n\\t\\tprint('\u0421\u0442\u0440\u043e\u043a\u0438 { i} \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442')\\n\n\\telse:\\n\n\\tprint('\u0421\u0442\u0440\u043e\u043a\u0438 { i} \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442')\\n", "question_id": 306224}, {"intent": "Comparison of files", "rewritten_intent": "Compare the files \u2018file_path1\u2019 and \u2018file_path2\u2019", "snippet": "from difflib import ndiff\n\nt1 = open('test1.txt').read().splitlines(1)\nt2 = open('test2.txt').read().splitlines(1)\n\nprint ''.join(ndiff(t1, t2))", "question_id": 306224}, {"intent": "Substitution of Python", "rewritten_intent": "Replace the substrate `old_sub` on the substrate `new_sub` in the `s` `count` once", "snippet": "s.replace(old_sub, new_sub, count)", "question_id": 157647}, {"intent": "How to convert lines into a dictionary?", "rewritten_intent": "Split the key-better line `s` by the separator `sep` into the dictionary `my_dict`", "snippet": "my_dict = dict([[x[1:-1] for x in s.split(sep)], ])", "question_id": 303166}, {"intent": "How do you work with a python exchange buffer?", "rewritten_intent": "Get data from the `data` exchange buffer", "snippet": "win32clipboard.OpenClipboard()\\n\ndata = win32clipboard.GetClipboardData()\\n\nwin32clipboard.CloseClipboard()\\n", "question_id": 80334}, {"intent": "How to drop zero on the right?", "rewritten_intent": "To drop zero in right.", "snippet": "num = str(num)\\n\n\nif \".\" in num:\\n\n\\tinteger, tail = num.split(\".\")\\n\n\\ttail = re.sub(r'[0]*$', '', tail)\\n\n\\tif not tail:\\n\n\\t\\tnum = integer\\n\n\\telse:\\n\n\\t\\tnum = float(integer + \".\" + tail)", "question_id": 101677}, {"intent": "How to Get a Time Belt in Python", "rewritten_intent": "Get a clock belt", "snippet": "time.timezone // 3600", "question_id": 135134}, {"intent": "How to remove a punctuation from the Unicode line?", "rewritten_intent": "Remove the pre-fixing symbols from the 's' line", "snippet": "re.sub(r'[^\\w\\s]', '', s)", "question_id": 74955}, {"intent": "How to remove a punctuation from the Unicode line?", "rewritten_intent": "Remove the pre-fixing symbols from the 's' line", "snippet": "for p in string.punctuation:\\n\n\\tif p in s:\\n\n\\t\\ts = s.replace(p, '')\\n", "question_id": 74955}, {"intent": "Download the file through python to the server", "rewritten_intent": "Send a POST query with the file 'file_path' to 'url'", "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "question_id": 91006}, {"intent": "Extension of Python Console", "rewritten_intent": "Get the output flow of the 'cmd' command of the console to the 'result' file object", "snippet": "result = os.popen(cmd, 'r', 1)", "question_id": 202621}, {"intent": "How to break the list into elements?", "rewritten_intent": "Convert a multi-dimensional list 'my_list' to a single-dimensional list", "snippet": "def get_length_items_list(a):\\n\n\\treturn list(map(lambda x: 1 if isinstance(x, list) else 0, a))\\n\n\nlength_my_list = get_length_items_list(my_list)\\n\n\nwhile max(length_my_list) > 0:\\n\n\\tnew_list = []\\n\n\\tfor item in my_list:\\n\n\\t\\tif isinstance(item, list):\n\\t\\t\\tif len(item) > 0:\n\\t\\t\\t\\tnew_list += item\n\\t\\t\\telse:\n\\t\\t\\t\\tnew_list.append(item)\n\n\\tmy_list = new_list\n\\tlength_my_list = get_length_items_list(my_list)", "question_id": 253869}, {"intent": "How to convert a list into a line?", "rewritten_intent": "Convert the list 'my_list' to the 's' c line by 'sep' separator", "snippet": "s = sep.join(my_list)", "question_id": 300050}, {"intent": "How to convert a list into a line?", "rewritten_intent": "Convert the list 'my_list' to the 's' c line by 'sep' separator", "snippet": "s = \" \".join(map(str, my_list))", "question_id": 300050}, {"intent": "Completion of a program in Python", "rewritten_intent": "Finish the program with the code c.", "snippet": "sys.exit(code)", "question_id": 459170}, {"intent": "Completion of a program in Python", "rewritten_intent": "Finish the program with the code c.", "snippet": "raise SystemExit(code)", "question_id": 459170}, {"intent": "How to break the line into separate symbols?", "rewritten_intent": "Break the string 's' into the list of symbols 'chars'", "snippet": "chars = list(s)", "question_id": 52873}, {"intent": "How to break the line into separate symbols?", "rewritten_intent": "Break the string 's' into the list of symbols 'chars'", "snippet": "chars = [c for c in s]", "question_id": 52873}, {"intent": "Fixed number of characters after embossing in Python", "rewritten_intent": "Round the 'num' to 'n' signs after the swab", "snippet": "round(num, n)", "question_id": 648454}, {"intent": "How to remove all lacunes from a line in Python?", "rewritten_intent": "Remove all lacunes from the 's' line", "snippet": "s = s.replace(' ', '')", "question_id": 359110}, {"intent": "How to remove all lacunes from a line in Python?", "rewritten_intent": "Remove all lacunes from the 's' line", "snippet": "s = ''.join(s.split())", "question_id": 359110}, {"intent": "Number of repetitive items in the list", "rewritten_intent": "Numbering items in the list 'my_list' in 'list_value_counts'", "snippet": "Counter(my_list)", "question_id": 418982}, {"intent": "Number of repetitive items in the list", "rewritten_intent": "Numbering items in the list 'my_list' in 'list_value_counts'", "snippet": "{i: array.count(i) for i in my_list}", "question_id": 418982}, {"intent": "Removal of the same items in a sorted list (list)", "rewritten_intent": "Remove repetitive items from the sorted list 'my_list'", "snippet": "my_list = [el for el, _ in groupby(my_list)]", "question_id": 575604}, {"intent": "Removal of the same items in a sorted list (list)", "rewritten_intent": "Remove repetitive items from the sorted list 'my_list'", "snippet": "my_list = list(set(my_list))", "question_id": 575604}, {"intent": "How to find a square root in Python?", "rewritten_intent": "Find the Quarry Root of 'num'", "snippet": "math.sqrt(x)", "question_id": 397222}, {"intent": "Translation of a list of lines into a list of numbers", "rewritten_intent": "Convert the list of 'my_number_strs' to the list of numbers 'my_numbers'", "snippet": "my_numbers = [int(item) for item in my_number_strs]", "question_id": 459401}, {"intent": "Search for the line", "rewritten_intent": "Check if there is the substrate 'my_subs' in the 's' line", "snippet": "re.search(sub_s, s)", "question_id": 235938}, {"intent": "Search for the line", "rewritten_intent": "Check if there is the substrate 'my_subs' in the 's' line", "snippet": "sub_s in s", "question_id": 235938}, {"intent": "Search for the line", "rewritten_intent": "Check if there is the substrate 'my_subs' in the 's' line", "snippet": " s.find(sub_s) != -1 ", "question_id": 235938}, {"intent": "Comparison of two lists in Python", "rewritten_intent": "Find the common elements of the 'common_items' list 'my_list1' and list 'my_list2'", "snippet": "count_values_l1 = Counter(my_list1)\\n\ncount_values_l2 = Counter(my_list2)\\n\nkeys1 = count_values_l1.keys()\\n\nkeys2 = count_values_l2.keys()\\n\ncommon_items = []\\n\nfor key in keys1:\\n\n\\tif key in keys2:\\n\n\\t\\tcommon_items += [key] * min(count_values_l1[key], count_values_l2[key])\n", "question_id": 427942}, {"intent": "Comparison of two lists in Python", "rewritten_intent": "Find the common elements of the 'common_items' list 'my_list1' and list 'my_list2'", "snippet": "list(set(my_list1) & set(my_list2))", "question_id": 427942}, {"intent": "Current directory in Python", "rewritten_intent": "Get the current Directorate", "snippet": "os.getcwd()", "question_id": 535318}, {"intent": "Current directory in Python", "rewritten_intent": "Get the current Directorate", "snippet": "os.path.abspath(os.curdir)", "question_id": 535318}, {"intent": "Current directory in Python", "rewritten_intent": "Get the current Directorate", "snippet": "os.path.abspath(__file__)\n\n", "question_id": 535318}, {"intent": "How to check the existence of the file?", "rewritten_intent": "Check the file \u2018file_path\u2019", "snippet": "os.path.exists(file_path)", "question_id": 414593}, {"intent": "Listing in a txt file in a piton", "rewritten_intent": "Enter data in the file \u2018file_path\u2019", "snippet": "with open(path, \"w\") as file:\\n\n\\tprint(data, file=file)", "question_id": 50064}, {"intent": "Listing in a txt file in a piton", "rewritten_intent": "Enter data in the file \u2018file_path\u2019", "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tprint(data, file=file)", "question_id": 50064}, {"intent": "Get the key of significance", "rewritten_intent": "Get the 'my_key' key from the word 'my_dict' meaning 'val'", "snippet": "my_key = None\\n\nfor k, v in my_dict.items():\\n\n\\tif v == val:\\n\n\\t\\tmy_key = k\\n\n\\t\\tbreak", "question_id": 507330}, {"intent": "Get the key of significance", "rewritten_intent": "Get the 'my_key' key from the word 'my_dict' meaning 'val'", "snippet": "reversed_dict = dict(zip(my_dict.values(), my_dict.keys()))\\n\nmy_key = reversed_dict[val]", "question_id": 507330}, {"intent": "How to check the number for clarity?", "rewritten_intent": "Check the number for clarity.", "snippet": "num % 2 == 0", "question_id": 30653}, {"intent": "Turn the list", "rewritten_intent": "Turn the list 'my_list'", "snippet": "my_list.reverse()", "question_id": 299026}, {"intent": "Turn the list", "rewritten_intent": "Turn the list 'my_list'", "snippet": "my_list = my_list[::-1]", "question_id": 299026}, {"intent": "Turn the list", "rewritten_intent": "Turn the list 'my_list'", "snippet": "my_list = list(reversed(my_list))", "question_id": 299026}, {"intent": "How to remove a mass element in a piton?", "rewritten_intent": "Remove the item 'item' from the list 'my_list'", "snippet": "my_list.remove(item)", "question_id": 81572}, {"intent": "How to remove a mass element in a piton?", "rewritten_intent": "Remove the item 'item' from the list 'my_list'", "snippet": "del my_list[my_list.index(item)]", "question_id": 81572}, {"intent": "Why does the script on Python don\u2019t understand the unicode?", "rewritten_intent": "Configure the utf-8 code for the file", "snippet": "## -*- coding: utf-8 -*-", "question_id": 293}, {"intent": "How to divide a line into a list of words divided by a gap?", "rewritten_intent": "Divide the 's' line into the 's_list' substrate list by the 'sep' divider", "snippet": "s_list = s.strip().split(sep)", "question_id": 592812}, {"intent": "Divide the number into components", "rewritten_intent": "Break the number 'num' into the list of numbers 'digits'", "snippet": "digits = [int(i) for i in str(num)]", "question_id": 506457}, {"intent": "How to remove the symbol of a new line (\\n) when you read the lines from a file", "rewritten_intent": "Read the lines from the file 'file_path' to 'lines' without moving the lines", "snippet": "with open(file_path) as file:\\n\n\\tlines = [line.rstrip() for line in file.readlines()]", "question_id": 597892}, {"intent": "How to remove the entire list of Python?", "rewritten_intent": "Create a list of my_list", "snippet": "for x in my_list:\\n \n\\tprint(x)", "question_id": 251048}, {"intent": "How to remove the entire list of Python?", "rewritten_intent": "Create a list of my_list", "snippet": "print('\\n'.join(my_list))", "question_id": 251048}, {"intent": "How to remove the entire list of Python?", "rewritten_intent": "Create a list of my_list", "snippet": "print('\\n'.join(list(map(str, my_list))))", "question_id": 251048}, {"intent": "Coding error in Python: readline() when you read the utf-8 file: 'charmap' codec can't decode the byte", "rewritten_intent": "Read the file 'file_path' with the utf-8 encoding in 'data'", "snippet": "f = codecs.open(file_path, \"r\", \"utf_8_sig\" )\ndata = f.read()\nf.close()", "question_id": 33868}, {"intent": "Coding error in Python: readline() when you read the utf-8 file: 'charmap' codec can't decode the byte", "rewritten_intent": "Read the file 'file_path' with the utf-8 encoding in 'data'", "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tdata = f.read()", "question_id": 33868}, {"intent": "Remove excess lacunes from the line.", "rewritten_intent": "Removing overlaps from the 's' line", "snippet": "s = ' '.join(s.split())", "question_id": 248267}, {"intent": "Translate from any computer to any computer", "rewritten_intent": "Transfer the number from the numbering system `from_base` to the numbering system `to_base`", "snippet": "n = int(str(num), from_base)\\n\nalphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n\nnew_num = \"\"\\n\nwhile n > 0:\\n\n\\tn, m = divmod(n, to_base)\\n\n\\tnew_num += alphabet[m]\\n\nnum = new_num[::-1]", "question_id": 607802}, {"intent": "Verification for a whole number \u2014 the condition for checking the data entered by the user", "rewritten_intent": "Check that the number is numbered.", "snippet": "isinstance(num, int)", "question_id": 585259}, {"intent": "It is necessary to clean the line from foreign symbols.", "rewritten_intent": "Clean the 's' line from the extra symbols", "snippet": "reg = re.compile('[^a-zA-Z ]')\\n\ns = reg.sub('', s))", "question_id": 446226}, {"intent": "It is necessary to clean the line from foreign symbols.", "rewritten_intent": "Clean the 's' line from the extra symbols", "snippet": "good_chars = (ascii_letters + whitespace).encode()\\n\njunk_chars = bytearray(set(range(0x100)) - set(good_chars))\\n\ns = s.encode('ascii', 'ignore').translate(None, junk_chars).decode()", "question_id": 446226}, {"intent": "Reading from a file and recording in a mass", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "question_id": 542210}, {"intent": "Reading from a file and recording in a mass", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "question_id": 542210}, {"intent": "Reading from a file and recording in a mass", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "question_id": 542210}, {"intent": "Download the file via urllib", "rewritten_intent": "Download the file on the link 'link' to 'file_path'", "snippet": "with urllib.request.urlopen(link) as url:\\n\n\\tdownloaded_file = url.read()\\n\n\\twith open(file_path, \"wb\") as f:\\n\n\\t\\tf.write(downloaded_file)", "question_id": 60925}, {"intent": "Search for word in the file", "rewritten_intent": "Find the word 'word' in the file 'file_path'", "snippet": "with open(file_path,'r') as f:\\n\n\\ttext = f.read()\\n\n\nif word in text:\\n\n\\tprint('\u0421\u043b\u043e\u0432\u043e { word } \u0435\u0441\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435')\\n\nelse:\\n\n\\tprint('\u0421\u043b\u043e\u0432\u0430 {word} \u043d\u0435\u0442 \u0432 \u0444\u0430\u0439\u043b\u0435')\\n", "question_id": 274131}, {"intent": "Conversion of a line into a list with sorting in dictionary order", "rewritten_intent": "Convert the 's' line to a 'words' list and sort out", "snippet": "words = s.split()\nwords.sort()", "question_id": 505115}, {"intent": "Passing by the Python alphabet", "rewritten_intent": "Get the symbol `my_symbol` by its code `char_code`", "snippet": "my_symbol = chr(char_code)", "question_id": 565252}, {"intent": "Coding problem when recorded in a file: UnicodeEncodeError: 'charmap' codec can't encode character '\\u039a'", "rewritten_intent": "Open the file 'file_path' to record with the utf-8 code in the variable f", "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tpass", "question_id": 509576}, {"intent": "Coding problem when recorded in a file: UnicodeEncodeError: 'charmap' codec can't encode character '\\u039a'", "rewritten_intent": "Open the file 'file_path' to record with the utf-8 code in the variable f", "snippet": "f = open(file_path,'a', encoding='utf-8')", "question_id": 509576}, {"intent": "How does sys.path add relative path to search modules?", "rewritten_intent": "Add the 'my_path' path to search for modules", "snippet": "sys.path.append(my_path)\n", "question_id": 42621}, {"intent": "Search for words in Python", "rewritten_intent": "Check if the word \u2018word\u2019 is in the line \u2018s\u2019", "snippet": "re.search(r\"\\b{}\\b\".format(word), s)", "question_id": 615741}, {"intent": "Search for words in Python", "rewritten_intent": "Check if the word \u2018word\u2019 is in the line \u2018s\u2019", "snippet": "word in s.split()", "question_id": 615741}, {"intent": "Transposing a matrix (numpy mass) into Python", "rewritten_intent": "Transposing the matrix into the new matrix", "snippet": "new_matrix = matrix.transpose()", "question_id": 500957}, {"intent": "Transposing a matrix (numpy mass) into Python", "rewritten_intent": "Transposing the matrix into the new matrix", "snippet": "new_matrix = matrix.T", "question_id": 500957}, {"intent": "Transposing a matrix (numpy mass) into Python", "rewritten_intent": "Transposing the matrix into the new matrix", "snippet": "new_matrix = []\\n\nfor i in range(len(matrix[0])):\\n\n\\tnew_matrix.append(list())\\n\n\\tfor j in range(len(matrix)):\\n\n\\t\\tnew_matrix[i].append(matrix[j][i])\\n", "question_id": 500957}, {"intent": "Introduction and Exit of Two-Dimensional Massive (VOD)", "rewritten_intent": "Complete the two-dimensional mass 'my_list' from 'rows' lines and 'cols' columns from the keyboard", "snippet": "my_list = [[input() for _ in range(cols)] for i in range(rows)]", "question_id": 116074}, {"intent": "Introduction and Exit of Two-Dimensional Massive (VOD)", "rewritten_intent": "Complete the two-dimensional mass 'my_list' from 'rows' lines and 'cols' columns from the keyboard", "snippet": "my_list = [[input().strip().split() for _ in range(cols)] for i in range(rows)]", "question_id": 116074}, {"intent": "Introduction and Exit of Two-Dimensional Massive (VOD)", "rewritten_intent": "Complete the two-dimensional mass 'my_list' from 'rows' lines and 'cols' columns from the keyboard", "snippet": "my_list = []\\n\nfor r in range(rows):\\n\n]tcur_row = []\\n\n\\tfor c  in range(cols):\\n\n\\t\\tval = input()\\n\n\\t\\tcur_row.append(val)\\n\n\\tmy_list.append(cur_row)\\n", "question_id": 116074}, {"intent": "Removal lines in DataFrame that meet the requirement", "rewritten_intent": "Remove from the dataframe `df` lines under the condition `cond`", "snippet": "df = df.loc[cond]", "question_id": 786730}, {"intent": "Sorting the key of the dictionary by increasing", "rewritten_intent": "Sorting the 'my_dict' dictionary by the key to increase", "snippet": "OrderedDict(sorted(my_dict.items(), key=lambda t: t[0]))", "question_id": 528474}, {"intent": "Coding Problems with Python 2.7", "rewritten_intent": "Configure the utf-8 code for the file", "snippet": "## -*- coding: utf-8 -*-", "question_id": 229015}, {"intent": "Python: 'charmap' codec can't decode byte 0x98", "rewritten_intent": "Open the file 'file_path' to record with the utf-8 code in the variable f", "snippet": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tpass", "question_id": 517085}, {"intent": "Python: 'charmap' codec can't decode byte 0x98", "rewritten_intent": "Open the file 'file_path' to record with the utf-8 code in the variable f", "snippet": "f = open(file_path,'a', encoding='utf-8')", "question_id": 517085}, {"intent": "Posts in python", "rewritten_intent": "Send a POST query c JSON data `data` to `url`", "snippet": "res = requests.post(url, json=data) \\n\nprint(res.text)\n", "question_id": 690089}, {"intent": "Number of lines in the file", "rewritten_intent": "Select the number of lines \u2018count_lines\u2019 in the file \u2018file_path\u2019", "snippet": "count_lines = sum(1 for line in open(file_path, 'r'))", "question_id": 550742}, {"intent": "Read the file in Python", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]", "question_id": 928295}, {"intent": "Read the file in Python", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "question_id": 928295}, {"intent": "Read the file in Python", "rewritten_intent": "Read the data from the file 'file_path' to the list 'my_list'", "snippet": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n", "question_id": 928295}, {"intent": "Python - Utf-8 Coding Problems", "rewritten_intent": "Configure the utf-8 code for the file", "snippet": "## -*- coding: utf-8 -*-", "question_id": 255207}, {"intent": "How to remove a symbol from a line?", "rewritten_intent": "Remove the substrate `sub_s` from the line `s`", "snippet": "s.replace(sub_s, \"\")\n", "question_id": 777723}, {"intent": "Error when connecting the socket to the server: a bytes-like object is required, not 'str'", "rewritten_intent": "Send the message 'mess' to the socket 'sock'", "snippet": "sock.send(mess.encode())", "question_id": 466658}, {"intent": "Remove empty items of python list", "rewritten_intent": "Remove empty items from my_list", "snippet": "my_list = [value for value in my_list if value]\n", "question_id": 422461}, {"intent": "Remove empty items of python list", "rewritten_intent": "Remove empty items from my_list", "snippet": "my_list = [value for value in my_list if value != [None]]\n", "question_id": 422461}, {"intent": "How to find all duplicating items in the list and the number of their repetitions?", "rewritten_intent": "Numbering items in the list 'my_list' in 'list_value_counts'", "snippet": "Counter(my_list)", "question_id": 533108}, {"intent": "How to find all duplicating items in the list and the number of their repetitions?", "rewritten_intent": "Numbering items in the list 'my_list' in 'list_value_counts'", "snippet": "{i: array.count(i) for i in my_list}", "question_id": 533108}, {"intent": "Caesar\u2019s Code Python", "rewritten_intent": "Encrypt the 's' line in the 'new_s' line with Caesar's code with the shift 'shift'", "snippet": "alpha = ' abcdefghijklmnopqrstuvwxyz'\\n\nnew_s = ''\\n\nfor c in s:\\n\n\\tnew_s += alpha[(alpha.index(c) + shift) % len(alpha)]\n", "question_id": 594690}, {"intent": "The \u201cPallindrom\u201d task. Python", "rewritten_intent": "Check if the line is a \u2018s\u2019 palindrome", "snippet": "s == s[::-1]", "question_id": 424441}, {"intent": "The \u201cPallindrom\u201d task. Python", "rewritten_intent": "Check if the line is a \u2018s\u2019 palindrome", "snippet": "s == reversed(s)", "question_id": 424441}, {"intent": "Find a derivative in Python", "rewritten_intent": "Find the derivative `d` function `my_f` in the 'x' point", "snippet": "derivative(my_f, x)", "question_id": 630116}, {"intent": "TypeError: 'str' object does not support item assignment", "rewritten_intent": "Replace the symbol with the 'n' index in the 's' line to 'new_char'", "snippet": "s = s[:n] + new_char + s[n+1:]", "question_id": 577060}, {"intent": "How to open a picture via Python?", "rewritten_intent": "Open the image 'img_path' in the driver", "snippet": "os.system(img_path)\n", "question_id": 406558}, {"intent": "How to open a picture via Python?", "rewritten_intent": "Open the image 'img_path' in the driver", "snippet": "os.startfile(img_path)\n", "question_id": 406558}, {"intent": "Share in Python 3 words in symbols", "rewritten_intent": "Break the string 's' into the list of symbols 'chars'", "snippet": "list(s)", "question_id": 458373}, {"intent": "Share in Python 3 words in symbols", "rewritten_intent": "Break the string 's' into the list of symbols 'chars'", "snippet": "[c for c in s]", "question_id": 458373}, {"intent": "How to remove a symbol from a index line", "rewritten_intent": "Remove the symbol with the index 'i' from the line 's'", "snippet": "s = s[:i] + s[i+1:]", "question_id": 879670}, {"intent": "Forming a dictionary with the same keys", "rewritten_intent": "Unify a list of dicts with the same keys to the common dictionary 'common_dict'", "snippet": "common_dict = {}\\n\nfor cur_dict in dicts:\\n\n\\tfor key in cur_dict:\\n\n\\t\\tif key not in common_dict:\\n\n\\t\\t\\tcommon_dict[key] = cur_dict[key]\\n\n\\t\\t\\tcontinue\\n\n\n\\t\\tif not isinstance(common_dict[key], list):\\n\n\\t\\\\ttcommon_dict[key] = [common_dict[key]] + [cur_dict[key]]\\n\n\\t\\t\\tcontinue\\n\n\n\\t\\tcommon_dict[key] += [cur_dict[key]]\\n", "question_id": 119418}, {"intent": "Can I connect DLL to Python?", "rewritten_intent": "Connect the file 'filepath' to the variable 'lib'", "snippet": "lib = CDLL('some.dll')", "question_id": 60790}, {"intent": "Authorization on the website", "rewritten_intent": "Receive cookies from the URL website", "snippet": "session = requests.Session()\nresponse = session.get('http://google.com')\ncookies = session.cookies.get_dict()", "question_id": 299217}, {"intent": "How do you know the number of arguments that are transmitted?", "rewritten_intent": "Get a specification of the arguments of the `f` function", "snippet": " inspect.getargspec(f)", "question_id": 65166}, {"intent": "Start Windows Command from Python: How to get the systeminfo Command in a Variable", "rewritten_intent": "Get the output flow of the 'cmd' command of the console to the 'result' file object", "snippet": "result = os.popen(cmd, 'r', 1)", "question_id": 206151}, {"intent": "How to copy cortex into a list", "rewritten_intent": "Convert the 'my_tuple' to a list", "snippet": "list(my_tuple)", "question_id": 118927}, {"intent": "Proping the range of networks", "rewritten_intent": "Propinning the host site", "snippet": "param = '-n' if platform.system().lower()=='windows' else '-c'\\n\ncommand = ['ping', param, '1', host]\\n\nprint(subprocess.call(command) == 0)\\n", "question_id": 50821}, {"intent": "Index of the selected item in Listbox", "rewritten_intent": "Get the index `i` of the selected element tkinter listbox `l`", "snippet": "def Get(event):\\n\n\\ti = event.widget.curselection()\\n\n\nl.bind(\"<<ListboxSelect>>\", Get)\\n", "question_id": 78160}, {"intent": "Coding the variable environment", "rewritten_intent": "Set the 'my_encode' code for the variable user environment 'username'", "snippet": "os.environ('username').decode(my_encode)", "question_id": 175425}, {"intent": "Automatic filling in Django Template", "rewritten_intent": "Complete the form in Django 'MyForm' with the user' data", "snippet": "MyForm(instance=user)\n", "question_id": 70512}, {"intent": "Assignment of a variable result of function", "rewritten_intent": "To attribute the variable `my_var` the result of the function `my_func`", "snippet": "my_var = my_func()", "question_id": 141157}, {"intent": "Regulators to replace the gap in the spine", "rewritten_intent": "Replace the gap in the line 'my_string' to the symbol 'my_symbol'", "snippet": "re.sub(' +', my_symbol, my_string_string)", "question_id": 209059}, {"intent": "Substitution of the word list file", "rewritten_intent": "Substitute the list of words \u2018old_words\u2019 to the list of words \u2018new_words\u2019 in the line \u2018s\u2019", "snippet": "words=dict(zip(old_data, new_data))\\n\nfor word in words:\\n\n\\ts = re.sub(r\"\\b{}\\b\".format(word), words[word], s)\\n", "question_id": 256777}, {"intent": "Search for element in a binary tree", "rewritten_intent": "Find a nodle equal to the value of 'val' in the binary tree tree", "snippet": "def search(root,key):\\n\n     \n\\tif root is None or root.val == key:\\n\n\\t\\treturn root\n \n\\tif root.val < key:\\n\n\\t\\treturn search(root.right,key)\\n\n   \n\\treturn search(root.left,key)\n\nsearch(root,val)", "question_id": 112581}, {"intent": "Python sorting of matrix elements", "rewritten_intent": "Sorting elements on the main diagonal of the square matrix `a` by deceleration", "snippet": "l = len(a)\\n\nfor k in range(l-1): \\n\n\\tfor i in range(l-1):\\n\n\\t\\tif a[i][i] < a[i+1][i+1]:\\n\n\\t\\t\\ta[i][i],a[i+1][i+1] = a[i+1][i+1],a[i][i]\\n", "question_id": 186169}, {"intent": "Python sorting of matrix elements", "rewritten_intent": "Sorting elements on the main diagonal of the square matrix `a` by deceleration", "snippet": "l = len(a)\\n\nitems = [a[i][i] for i in range(l)]\\n\nitems.sort(reverse=True)\\n\nfor i in range(l):\\n\n\\ta[i][i] = items[i]\\n", "question_id": 186169}, {"intent": "Python Launch Console Program", "rewritten_intent": "Complete the command of the console 'cmd'", "snippet": "os.popen(cmd, 'r', 1)", "question_id": 189166}, {"intent": "Python Launch Console Program", "rewritten_intent": "Complete the command of the console 'cmd'", "snippet": "PIPE = subprocess.PIPE\nsubprocess.Popen(cmd, shell = True)", "question_id": 189166}, {"intent": "Pythons Triangle", "rewritten_intent": "Draw the 'n' fractal triangle with the side of 'l'", "snippet": "from turtle import *\\n\nspeed(\"fastest\")\\n\n\ndef sierpinski(l,n):\\n\n\\tif n==0:\\n\n\\t\\tfor i in range(0,3):\\n\n\\t\\t\\tfd(l)\\n\n\\t\\t\\tleft(120)\\n\n\\telse:\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tfd(l/2)\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tbk(l/2)\\n\n\\t\\tleft(60)\\n\n\\t\\tfd(l/2)\\n\n\\t\\tright(60)\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tleft(60)\\n\n\\t\\tbk(l/2)\\n\n\\t\\tright(60)\\n\n\nsierpinski(l, n)\\n", "question_id": 168100}, {"intent": "Close the mode window for event", "rewritten_intent": "Close the \u2018win\u2019 mode window by clicking the \u2018btn\u2019 button in Tkinter", "snippet": "btn.bind(\"<Button-1>\", lambda event: win.destroy())", "question_id": 291044}, {"intent": "Tkinter: how to create a daughter window and hide a parent?", "rewritten_intent": "Close the window Tkinter 'win'", "snippet": "win.withdraw()", "question_id": 215979}, {"intent": "Copying all records from one table to another", "rewritten_intent": "Copying data from the table 'table1' to the table 'table2' from the database with the cursor 'cursor'", "snippet": "cursor.execute('insert into {table1} select * from {table2}')", "question_id": 160158}, {"intent": "How to screen special symbols when creating a catalogue?", "rewritten_intent": "Screening the special symbols in the line 's'", "snippet": "s.encode('unicode_escape')", "question_id": 298270}, {"intent": "How to remove a program in a trailer without displaying in the task panel", "rewritten_intent": "Remove the PyQt `win` window in the trailer by clicking the cross", "snippet": "\\tdef closeEvent(self, event):\\n\n\\t\\tif self.check_box.isChecked():\\n\n\\t\\t\\tevent.ignore()\\n\n\\t\\t\\tself.hide()\\n\n\\t\\t\\tself.tray_icon.showMessage(\n                \"Tray Program\",\n                \"Application was minimized to Tray\",\n                QSystemTrayIcon.Information,\n                2000\n            )\\n\n", "question_id": 189042}, {"intent": "Time print in Tkinter.Text()", "rewritten_intent": "Print the 's' line in Tkinter in the 'root' window", "snippet": "t = Text(root)\nt.pack()\nt.insert(END, s)", "question_id": 108618}, {"intent": "Python, removing the element from the mass", "rewritten_intent": "Get the 'my_list' list items that meet the `f` function", "snippet": "list(filter(f, my_list))", "question_id": 72284}, {"intent": "Sorting of Objects", "rewritten_intent": "Sort the list of dicts by the key", "snippet": "dicts.sort(key=lambda x: x[key])", "question_id": 83341}, {"intent": "DBF files with Python", "rewritten_intent": "Delete the dbf file 'filepath'", "snippet": "data = open(filepath, 'rb').read(24)\nprint(struct.unpack('<I', data[4:8]))", "question_id": 280734}, {"intent": "How to remove uncircumcised lines from the file?", "rewritten_intent": "Get a list of \u2018lines\u2019 files of \u2018filepath\u2019", "snippet": "with open(filepath) as f:\\n\n\\tlines = f.readlines()[1::2]", "question_id": 30683}, {"intent": "How to remove uncircumcised lines from the file?", "rewritten_intent": "Get a list of \u2018lines\u2019 files of \u2018filepath\u2019", "snippet": "with open(filepath) as file:\\n\n\\tlines = [i.rstrip() for i in itertools.islice(file, 0, None, 2)]", "question_id": 30683}, {"intent": "How to process Cyrillic symbols in urllib.request.urlopen()?", "rewritten_intent": "Convert the cyrillic line `s` into a special symbol line for http query", "snippet": "urllib.parse.quote(s)", "question_id": 241337}, {"intent": "How to process Cyrillic symbols in urllib.request.urlopen()?", "rewritten_intent": "Convert the cyrillic line `s` into a special symbol line for http query", "snippet": "urllib.parse.quote_plus(s)", "question_id": 241337}, {"intent": "Encryption with Open Key", "rewritten_intent": "Generate open key `pub` and closed key `priv` for RSA encryption", "snippet": "(pub, priv) = rsa.newkeys(512)", "question_id": 64496}, {"intent": "How to check proxy for workability?", "rewritten_intent": "Check if proxy works.", "snippet": "proxyDict = {\\n\n\\t'http': proxy # \"212.254.22.52:80\"\\n\n}\\n\n\nr = requests.get('http://icanhazip.com/', proxies=proxyDict)\\n\n\nif r.status_code == 200:\\n\n\\tif r.text != \"restricted to vpn\":\\n\n\\t\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n\n\\telse:\\n\n\\t\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n\nelse:\\n\n\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n", "question_id": 124756}, {"intent": "How to compare the significance of a dictionary with a variable.", "rewritten_intent": "Check whether the value of the word element 'my_dict' with the key is equal to the value in the variable 'my_var'", "snippet": "my_dict[key]  ==  my_var", "question_id": 121512}, {"intent": "Installation of python", "rewritten_intent": "Set the image of 'wallpaper_path' as desktop wallpaper", "snippet": "wallpaper = bytes(wallpaper_path, 'utf-8')\\n\nctypes.windll.user32.SystemParametersInfoA(20, 0, wallpaper, 3)\\n", "question_id": 119187}, {"intent": "Python and Poplib Problems with Mail Receiving", "rewritten_intent": "Receive emails from the Gmail server with the login 'username' and the password 'password'", "snippet": "\npop3server = poplib.POP3_SSL('pop.gmail.com')  # open connection\\n\nprint(pop3server.getwelcome())  # show welcome message\\n\npop3server.user(username)\\n\npop3server.pass_(password)\\n\npop3info = pop3server.stat()  # access mailbox status\\n\nmailcount = pop3info[0]  # toral email\\n\nmessages = []\\n\nfor i in range(mailcount):\\n\n\\tfor message in pop3server.retr(i + 1)[1]:\\n\n\\t\\tmessages.append(message)\\n\npop3server.quit()\\n", "question_id": 13119}, {"intent": "How to upload a file to a site via Python?", "rewritten_intent": "Download the file 'file_path' to the URL server", "snippet": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)", "question_id": 78491}, {"intent": "How can I transfer the value of the variable \"x\" of Arduino?", "rewritten_intent": "Connect to the successive port 'com' with the speed 'speed'", "snippet": "my_com_port = serial.Serial(com, speed, dsrdtr = 1, timeout = 0)", "question_id": 196630}, {"intent": "How to simulate the pressing of the keys and moving the mouse?", "rewritten_intent": "Move the mouse cursor to a point with the coordinates 'coord'", "snippet": "win32api.SetCursorPos(coord)", "question_id": 71961}, {"intent": "How to verify that a variable is != (grade of a pair - 1)", "rewritten_intent": "Check if the number \u2018n\u2019 is grade 2", "snippet": "(n & (n-1) == 0) and n != 0", "question_id": 316065}, {"intent": "Download the Python 3 Console", "rewritten_intent": "Enter the password \u2018pass\u2019 from the keyboard.", "snippet": "pass = getpass.getpass(prompt='Password: ', stream=None)", "question_id": 280539}, {"intent": "How to identify a selected item from a list in Tkinter.ListBox?", "rewritten_intent": "Get the index `i` of the selected element tkinter listbox `l`", "snippet": "def Get(event):\\n\n\\ti = event.widget.curselection()\\n\n\nl.bind(\"<<ListboxSelect>>\", Get)\\n", "question_id": 73158}, {"intent": "How to split HTML with Python standard tools?", "rewritten_intent": "Remove the HTML code of the 'code' page by the URL link", "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "question_id": 205664}, {"intent": "Convert a string to a dictionary", "rewritten_intent": "Convert strings to strings_dict by Sep", "snippet": "strings_dict = dict([x[0].strip().split(sep) for x in strings])", "question_id": 300767}, {"intent": "Python regexp: parsing ini-file", "rewritten_intent": "Delete this file 'filepath' into the dictionary 'res'", "snippet": "with open(filepath, 'r') as f:\\n\n\\tlines = [i for i in f.readlines() if not i.startswith('[')]\\n\n\\tp = re.compile('(?P<key>\\S*(?==))\\S*(?P<znah>(?<==)\\S*)')\\n\n\\tres = {}\\n\n\\tfor line in lines:\\n\n\\t\\tparsed = re.findall(p, line)[0]\\n\n\\t\\tres[parsed[0]] = parsed[1]\\n", "question_id": 127208}, {"intent": "Python: how to convert lines when importing from a file?", "rewritten_intent": "Read the list of numbers 'nums' from the file 'filepath'", "snippet": "with open(filepath) as f:\\n\n\\tnums = list(map(int, f.read().split()))\\n", "question_id": 316488}, {"intent": "Work with Web Form by Post Method", "rewritten_intent": "Send a POST query `res` c JSON data `data` to `url`", "snippet": "res = requests.post(url, json=data)", "question_id": 77855}, {"question_id": 25811, "snippet": "for a in arrs:\\n\n\\tprint(a)\\n", "intent": "Extraction of values from the two-dimensional massive", "rewritten_intent": "Remove the \u2018arrs\u2019 two-dimensional massive on the screen"}, {"question_id": 25811, "snippet": "for a in arrs:\\n\n\\tfor i in a:\\n\n\\t\\tprint(i, end=\" \")\\n\n\\tprint()\\n", "intent": "Extraction of values from the two-dimensional massive", "rewritten_intent": "Remove the \u2018arrs\u2019 two-dimensional massive on the screen"}, {"question_id": 54032, "snippet": "num = random.randint(num_start, num_end)", "intent": "How to get a random number in the interval?", "rewritten_intent": "Get the random number `num` in the interval from the number `num_start` to the number `num_end`"}, {"question_id": 124837, "snippet": "win32api.keybd_event(ord(key), 0, 0,0)", "intent": "How to Imitate the Keyprint?", "rewritten_intent": "Press the \u2018key\u2019 key."}, {"question_id": 124837, "snippet": "pyautogui.press('s')", "intent": "How to Imitate the Keyprint?", "rewritten_intent": "Press the \u2018key\u2019 key."}, {"question_id": 71878, "snippet": "x = list(enumerate(l))\\n\nrandom.shuffle(x)\\n\nindices, l = zip(*x)\\n", "intent": "How to mix the list by keeping the index?", "rewritten_intent": "Mix the 'l' list by preserving the 'indices' index"}, {"question_id": 87835, "snippet": "for out_i, item in enumerate(a):\\n\n\\tfor inner_i, sub_item in enumerate(item):\\n\n\\t\\tif sub_item in my_dict:\\n\n\\t\\t\\ta[out_i][inner_i] = my_dict[sub_item]\\n", "intent": "Replacement of Massive Elements", "rewritten_intent": "Replace the inserted lists of \u2018a\u2019 by \u2018my_dict\u2019"}, {"question_id": 306126, "snippet": "pattern = r\"^[-\\w\\.]+@([-\\w]+\\.)+[-\\w]{2,4}$\"\n\nif re.match(pattern, email) is not None:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\")\nelse:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\"", "intent": "Email validation in Python", "rewritten_intent": "Check if the line 'email' is an email"}, {"question_id": 306126, "snippet": "pattern = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n\nif re.match(pattern, email) is not None:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\")\nelse:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\"", "intent": "Email validation in Python", "rewritten_intent": "Check if the line 'email' is an email"}, {"question_id": 82882, "snippet": "root = Tkinter.Tk()\nfonts = list(tkFont.families())", "intent": "Writings in Python", "rewritten_intent": "Get a list of fonts available in the system"}, {"question_id": 93534, "snippet": "nums = np.arange(n1, n2, base_nums[1] - base_nums[0])", "intent": "Creating graphics in Matplotlib using linspace", "rewritten_intent": "Generate the list of numbers `nums` in the range of numbers `n1` to `n2` with the same step in the list of numbers `base_nums`"}, {"question_id": 197093, "snippet": "my_total = -1\\n\nwhile my_total != total:\\n\n\\tnums = [random.randint(0,total) for _ in range(n)]\\n\n\\tmy_total = sum(nums)\\n", "intent": "Generation of random numbers", "rewritten_intent": "Generate 'n' of random numbers 'nums' whose sum is equal to 'total'"}, {"question_id": 295537, "snippet": "my_obj = globals()[class_name]", "intent": "Creation of an object from the class name line", "rewritten_intent": "Create a 'my_obj' class object by name in the 'class_name' line"}, {"question_id": 240287, "snippet": "my_dict = dict(tupels)", "intent": "Dictionary of Cortage in Python", "rewritten_intent": "Convert the \u2018tupels\u2019 keywords to the \u2018my_dict\u2019 dictionary"}, {"question_id": 3726, "snippet": "\nwb = openpyxl.load_workbook(bookpath, data_only = True)\\n\nsh = wb[sheet]\\n\ncolor_in_hex = sh[cell_index].fill.start_color.index\\n ", "intent": "How to determine a cell background in Excel in Python?", "rewritten_intent": "Get the color `color_in_hex` cell `cell_index` xlsx file `bookpath` table `sheet`"}, {"question_id": 172669, "snippet": "doc = docx.Document()\\n\np = doc.add_paragraph()\\n\n\nrunner = p.add_run(s)\\n\nrunner.bold = True\\n\n\ndoc.save(filepath)", "intent": "How to record a fat line in a word file?", "rewritten_intent": "Write the `s` line in the docx file `file_path` fat"}, {"question_id": 53872, "snippet": "def say(self):\\n\n\\tself.lbl[\"text\"] = s\\n\n\nself.btn[\"command\"] = self.say", "intent": "Tkinter and the print team on console", "rewritten_intent": "By clicking the tkinter 'btn' button to extract the text 's' in the 'lbl' field"}, {"question_id": 26594, "snippet": "url = re.findall(r\"\\[url=(.*)\\]\", s)[0]", "intent": "Regular expression to obtain the BBCode URL", "rewritten_intent": "Get the 'url' link from the BBCode 's' line"}, {"question_id": 262974, "snippet": "`re.sub(pattern, r\"\\1{}\".format(s), text) ", "intent": "Enter an empty line after regular words", "rewritten_intent": "Enter the 's' line after the subset assigned by 'pattern' in the 'text' line."}, {"question_id": 83802, "snippet": "def progress():\\n\n\\tdef callback(block):\\n\n\\t\\tcallback.uploaded += len(block)\\n\n\\t\\tprint('Uploaded %d bytes' % callback.uploaded)\\n\n\\tcallback.uploaded = 0\\n\n\\treturn callback\\n\n\nftp.storbinary(\"STOR \" + file, open(file, \"rb\"), 1024, progress())", "intent": "Progress in downloading the file to ftp", "rewritten_intent": "Download the 'file' file by ftp with progress bar"}, {"question_id": 178993, "snippet": "with urllib.request.urlopen(url) as res:\n    code = res.read()", "intent": "Automatic parsing from websites", "rewritten_intent": "Separate the HTML code of the 'code' page by linking 'url'"}, {"question_id": 50259, "snippet": "print(\"{:.{}f}\".format(num, f)\")", "intent": "accuracy of numbers", "rewritten_intent": "Extract the number 'num' with accuracy to 'f' of the characters"}, {"question_id": 121752, "snippet": "tree = lxml.etree.parse(filepath)", "intent": "Loading the object from xml", "rewritten_intent": "Spread the XML file 'filepath' into the object 'tree'"}, {"question_id": 27963, "snippet": "for a in zip(a1, a2):\\n\n\\tprint(*a)\\n", "intent": "Results by two columns", "rewritten_intent": "Remove the elements of the lists 'a1' and 'a2' in parallel"}, {"question_id": 54149, "snippet": "frame.grid(column=0, row=0, sticky=(N, W))", "intent": "Equalization of the widget in Tkinter", "rewritten_intent": "Equate the Tkinter 'frame' widget from the top left"}, {"question_id": 61709, "snippet": "delta_nums = [abs(target_num - i) for i in nums]\nnum = nums[delta_nums.index(min(delta_nums))]", "intent": "Find the nearest items in the list", "rewritten_intent": "Find the nearest number `n` to the number `target_num` in the list `nums`"}, {"question_id": 160598, "snippet": "cursor.columns(table=sheet)\n", "intent": "Obtaining the number and list of fields in the table", "rewritten_intent": "Get a list of fields in the `sheet` sql database with the `cursor` cursor"}, {"question_id": 111347, "snippet": "if os.access(filepath, os.R_OK):\\n\n\\tprint(\"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\")\\n\nelse:\\n\n\\tprint(\"\u041d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\")\\n", "intent": "How do I find the rights to a folder, a file?", "rewritten_intent": "Check the rights to read the 'filepath' file"}, {"question_id": 37423, "snippet": "root = etree.HTML(html)", "intent": "How to choose from the line?", "rewritten_intent": "Disperse the html line `html` into the tree `root`"}, {"question_id": 93346, "snippet": "with urllib.request.urlopen(utl) as Response:\\n\n\\tLength = Response.getheader('content-length')\\n\n\\tBlockSize = 1000000  # default value\\n\n\n\\tif Length:\\t\n\\t\\tLength = int(Length)\\n\n\\t\\tBlockSize = max(4096, Length // 20)\\n\n\n\\tprint(\"UrlLib len, blocksize: \", Length, BlockSize)\\n\n\n\\tBufferAll = io.BytesIO()\\n\n\\tSize = 0\\n\n        while True:\n            BufferNow = Response.read(BlockSize)\n            if not BufferNow:\n                break\n            BufferAll.write(BufferNow)\n            Size += len(BufferNow)\n            if Length:\n                Percent = int((Size / Length)*100)\n                print('download: {Percent}% {Url}')\n\n        print(\"Buffer All len:\", len(BufferAll.getvalue()))", "intent": "Progressbar + file download with url", "rewritten_intent": "Download the file from the URL showing the progress bar"}, {"question_id": 319702, "snippet": "dicts = [json.dumps(i) for i in dicts]\\n\ndicts = [json.loads(i) for i in set(dicts)]\\n", "intent": "Iteration of the list of dictionaries, removal of the same values", "rewritten_intent": "Remove the same dictionaries from the 'dicts' dictionary list"}, {"question_id": 78494, "snippet": "\\tdef closeEvent(self, event):\\n\n\\t\\tif self.check_box.isChecked():\\n\n\\t\\t\\tevent.ignore()\\n\n\\t\\t\\tself.hide()\\n\n\\t\\t\\tself.tray_icon.showMessage(\n                \"Tray Program\",\n                \"Application was minimized to Tray\",\n                QSystemTrayIcon.Information,\n                2000\n            )\\n\n", "intent": "Python: Installation of the program in three (Linux)", "rewritten_intent": "Remove the PyQt 'win' window in the third by pressing the cross"}, {"question_id": 167202, "snippet": "hwnd = win32gui.FindWindow(None, title)\\n\n\\tcoord = win32gui.GetWindowRect(hwnd)[0:2]\\n\n\\tprint(coord)\\n", "intent": "Obtaining window coordinates", "rewritten_intent": "Get the coordinates of the 'coords' window with the title 'title'"}, {"question_id": 151936, "snippet": "parsed_url = urlparse(url)\\n\nquery = parsed_url(parsed_url.query)\\n", "intent": "Python and Parsing URLs", "rewritten_intent": "Disperse the parameters get the url 'url' request to the dictionary 'Query'"}, {"question_id": 306957, "snippet": "os.replace(filepath, newfilepath)", "intent": "Can't change the name of the file", "rewritten_intent": "Transfer the name of the 'filepath' file to the 'newfilepath' file"}, {"question_id": 249773, "snippet": "r = range(min(a), max(a) + 1)\\\nnums = sorted(list(set(r) - set(a)))\\n", "intent": "The algorithm of free numbers", "rewritten_intent": "Find missed numbers `nums` in the list `a`"}, {"question_id": 2653, "snippet": "objects.filter(children__isnull=True)", "intent": "Filters in Jango", "rewritten_intent": "Choosing Django Objects Without Successors"}, {"question_id": 122711, "snippet": "subprocess.check_output(['g++', filepath])", "intent": "System Challenges in Python", "rewritten_intent": "Compilate the C++ file 'filepath'"}, {"question_id": 249444, "snippet": "list_s = s.split()\\n\nlist_base = base_s.split()\\n\nif set(list_s) & set(list_base):\\n\n\\tprint(\"\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442\")\\n\nelse:\\n\n\\tprint(\"\u041d\u0435 \u0441\u043e\u0434\u0435\u0440\u0434\u0436\u0438\u0442\"\\n", "intent": "How do I know if one line contains a word from the other?", "rewritten_intent": "Check if the line `s` contains the word from the line `base_s`"}, {"question_id": 30398, "snippet": "try:\\n\n\\tf()\\n\nexcept KeyboardInterrupt:\\n\n\\tprint(\"Catched KeyboardInterrupt exception\")\\n", "intent": "How do you use Ctrl+C to get out of one function and continue to perform in another?", "rewritten_intent": "Finish the \u2018f\u2019 function by pressing the Ctrl+C key"}, {"question_id": 89883, "snippet": "def paintEvent(self, event):\\n\n\\tpainter = QPainter(self)\\n\n\\tpts = self.pts\\n\n\\tpainter.setPen(QPen(QColor(Qt.darkGreen), 3))\\n\n\\tpainter.drawPolyline(self.poly(pts))\\n\n\\tpainter.setBrush(QBrush(QColor(255, 0, 0)))\\n\n\\tpainter.setPen(QPen(QColor(Qt.black), 1))\\n\n\\tfor x, y in pts:\\n\n\\t\\tpainter.drawEllipse(QRectF(x - 4, y - 4, 8, 8))\\n", "intent": "How to Imitate Wave with QPainter() in PySide/PyQt4", "rewritten_intent": "Drawing the wave with PyQt4"}, {"question_id": 9273, "snippet": "def on_click(x, y, button, pressed):\\n\n\\tcoords = (x, y)\\n\n\nwith pynput.mouse.Listener(on_click=on_click) as listener:\\n\n\\tlistener.join()\\n", "intent": "How do we capture the MouseClick system event in Python?", "rewritten_intent": "Get the mouse pressure coordinates 'coords'"}, {"question_id": 234414, "snippet": "driver.get(url)\nscreenshot = driver.save_screenshot(filepath)", "intent": "Selenium: Get a uploaded image", "rewritten_intent": "Screenshot of the URL as a 'filepath' image using the selenium driver 'driver'"}, {"question_id": 210480, "snippet": "with open(filepath) as f:\\n\n\\tlines = f.readlines()\\n\n\\tline_values = collections.Counter(lines)\\n", "intent": "Calculation and conclusion of the most repeated lines", "rewritten_intent": "Calculate the lines in the 'filepath' file in the line_counts dictionary"}, {"question_id": 51160, "snippet": "\nx = sympy.symbols('x')\\n\nprint(sympy.integrate(f, (x, n, sympy.oo)))\\n", "intent": "Calculation of non-proprietary integrator with SymPy", "rewritten_intent": "Calculate the non-proprietary integral assigned by 'f' from the number 'n' to infinity"}, {"question_id": 560, "snippet": "for key in dict2:\\n\n\\tif key in dict1:\\n\n\\t\\tdel dict1[key]\\n", "intent": "Two dictionaries, Python", "rewritten_intent": "Remove the keys in the dictionary 'dict1' from the dictionary 'dict2'"}, {"question_id": 18892, "snippet": "with open(filepath,\"r\", encoding=\"utf-8\") as f:\\n\n\\tpass", "intent": "Encoding task when creating a file", "rewritten_intent": "Create a 'filepath' file with the coding utf-8"}, {"question_id": 242841, "snippet": "getattr(obj, name)()", "intent": "How to start a function within the class?", "rewritten_intent": "Start the method c by name `name` of the object `obj`"}, {"question_id": 21336, "snippet": "from django.contrib.auth.models import User, Group\\n\nadmin.site.unregister(User)\\n\nadmin.site.unregister(Group)\\n", "intent": "How to remove admin on a third party app (Django admin)", "rewritten_intent": "Remove from the Django Administrator Panel User and Group models"}, {"question_id": 57046, "snippet": "win32api.keybd_event(ord(key), 0, 0,0)", "intent": "How to get the program to press the key?", "rewritten_intent": "Press the \u2018key\u2019 key."}, {"question_id": 57046, "snippet": "pyautogui.press('s')", "intent": "How to get the program to press the key?", "rewritten_intent": "Press the \u2018key\u2019 key."}, {"question_id": 265219, "snippet": "word_dict = dict(zip(old_data, new_data))\\n\nfor word in word_dict:\\n\n\\ts = re.sub(r\"\\b{}\\b\".format(word), word_dict[word], s)\\n", "intent": "Replace the list of words in the text", "rewritten_intent": "Replace the 's' words from the 'old_words' list with the 'new_words' list."}, {"question_id": 106280, "snippet": "with open(imgpath, 'wb') as img :\n  img_obj = base64.b64decode(img_as_s,'!-')\n  img.write(img_obj)", "intent": "How to convert a line into an image?", "rewritten_intent": "Convert a 64-digit line image image `img_as_s` to image `imgpath`"}, {"question_id": 14314, "snippet": "\nresponse = urllib.request.urlopen(url)\\n\nheaders = response.headers\\n", "intent": "Python urllib title", "rewritten_intent": "Get the 'headers' dictionary from the 'url' site"}, {"question_id": 25915, "snippet": "s.encode('unicode_escape')", "intent": "Imagine the screen function.", "rewritten_intent": "Screenshots in the 's' line"}, {"question_id": 76183, "snippet": "p = 1 << (len(s)-1)\nl = []\nfor i in range(1, p):\n\\tdef rf(first, sec):\n\\t\\tc = first[0]\n\\t\\ts1 = sec\n\\t\\tif c & i > 0 :\n\\t\\t\\ts1 = sign+s1\n\\t\\treturn (c >> 1, first[1]+s1)\n\\tl.append(functools.reduce(rf, s[1:], (p >> 1, s[0]))[1])", "intent": "Python line formatting", "rewritten_intent": "Remove all possible ways of placing the 'sign' in the 's' line as in the bit number"}]