{"task_id": "ru-0", "prompt": "import math\ndef func_ru(num):\n    return ", "canonical_solution": "math.modf(num)[0]", "test": "\nimport math\ndef check(candidate):\n    assert (candidate(123.45) - 0.45) < 1e-6\n    assert (candidate(123.4445) - 0.4445) < 1e-6\n    assert (candidate(-0.01) - 0.01) < 1e-6\n    assert (candidate(0.) - 0.0) < 1e-6\n    assert (candidate(1000000) - 0.0) < 1e-6\n", "entry_point": "func_ru"}
{"task_id": "ru-2", "prompt": "def func_ru(part, whole):\n    return ", "canonical_solution": "100 / whole * part", "test": "\ndef check(candidate):\n    assert (candidate(100, 54) - 185.185) < 0.02\n    assert (candidate(1, 100) - 1.0) < 1e-6\n    assert (candidate(24, 4) - 600.0) < 1e-6\n", "entry_point": "func_ru"}
{"task_id": "ru-3", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "s.title()", "test": "\ndef check(candidate):\n    assert candidate('test') == 'Test'\n    assert candidate('Test') == 'Test'\n    assert candidate('TEST') == 'Test'\n    assert candidate('  ') == '  '\n", "entry_point": "func_ru"}
{"task_id": "ru-5", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "re.findall('(\\d+)', s)", "test": "\nimport re\ndef check(candidate):\n    assert candidate('123abc456') == ['123', '456']\n    assert candidate('123456') == ['123456'] \n    assert candidate('afbnjig') == []\n", "entry_point": "func_ru"}
{"task_id": "ru-10", "prompt": "def func_ru(my_dict):\n    return ", "canonical_solution": "json.dumps(my_dict, ensure_ascii=False)", "test": "\nimport json\ndef check(candidate):\n    assert candidate({'a': 123, 'Bb': None}) == json.dumps({'a': 123, 'Bb': None}, ensure_ascii=False)\n    assert candidate({123: 123, 'Bb': None}) == json.dumps({123: 123, 'Bb': None}, ensure_ascii=False)\n    assert candidate({}) == json.dumps({}, ensure_ascii=False)\n", "entry_point": "func_ru"}
{"task_id": "ru-11", "prompt": "def func_ru(my_list1, my_list2):\n    ", "suffix": "\n    return common_items", "canonical_solution": "common_items = [x for x in my_list1 if x in my_list2]", "test": "\ndef check(candidate):\n   assert set(candidate([1,2,3.5,'a'], [3.4, 'bb', 'a', 1])) == set([1, 'a']) \n   assert set(candidate([1,2,3], [4,5,6])) == set([]) \n   assert set(candidate(['ger','ferags',34.56], ['ger','ferags',34.56])) == set(['ger','ferags',34.56]) \n", "entry_point": "func_ru"}
{"task_id": "ru-13", "prompt": "def func_ru(n):\n    ", "suffix": "\n    return factors", "canonical_solution": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n", "test": "\ndef check(candidate):\n    assert candidate(17) == [17]\n    assert set(candidate(10)) == set([2, 5])\n    assert sorted(candidate(100)) == [2,2,5,5]\n", "entry_point": "func_ru"}
{"task_id": "ru-16", "prompt": "def func_ru(my_list, i, j):\n    ", "suffix": "\n    return my_list", "canonical_solution": "my_list[i], my_list[j] = my_list[j], my_list[i]", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5], 2, 4) == [1,2,5,4,3]\n", "entry_point": "func_ru"}
{"task_id": "ru-19", "prompt": "def func_ru(my_key, my_dict):\n    return ", "canonical_solution": "my_key in my_dict", "test": "\ndef check(candidate):\n    assert candidate('k', {'k': 123}) == True\n    assert candidate('aa', {'k': 123}) == False\n", "entry_point": "func_ru"}
{"task_id": "ru-21", "prompt": "def func_ru(file_path):\n    ", "suffix": "\n    return file_extension", "canonical_solution": "filename, file_extension = os.path.splitext(file_path)", "test": "\nimport os\ndef check(candidate):\n    assert candidate('file_name.txt') == '.txt'\n", "entry_point": "func_ru"}
{"task_id": "ru-23", "prompt": "def func_ru(s, symbol):\n    ", "suffix": "\n    return s", "canonical_solution": "s = s[: s.find(symbol) + len(symbol)]", "test": "\ndef check(candidate):\n    assert candidate('123abcyyl', 'cy') == '123abcy'\n", "entry_point": "func_ru"}
{"task_id": "ru-27", "prompt": "def func_ru(my_list1, my_list2):\n    ", "suffix": "\n    return diff_list", "canonical_solution": "diff_list = list(set(my_list1)-set(my_list2)) + list(set(my_list2)-set(my_list1))", "test": "\ndef check(candidate):\n    assert sorted(candidate([1,2,3,4],[2,3,4,5])) == [1,5]\n", "entry_point": "func_ru"}
{"task_id": "ru-29", "prompt": "def func_ru(my_char, s):\n    return ", "canonical_solution": " s.index(my_char)", "test": "\ndef check(candidate):\n    assert candidate('ab', '123abc456') == 3\n", "entry_point": "func_ru"}
{"task_id": "ru-30", "prompt": "def func_ru(my_char, s):\n    return ", "canonical_solution": " s.find(my_char)", "test": "\ndef check(candidate):\n    assert candidate('ab', '123abc456') == 3\n", "entry_point": "func_ru"}
{"task_id": "ru-34", "prompt": "def func_ru(my_list):\n    return ", "canonical_solution": "len(my_list) == 0", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == False\n    assert candidate([]) == True\n", "entry_point": "func_ru"}
{"task_id": "ru-38", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "Counter(s)", "test": "\nfrom collections import Counter\ndef check(candidate):\n    assert candidate('123abccb') == Counter({'1': 1, '2': 1, '3': 1, 'a': 1, 'b': 2, 'c': 2})\n", "entry_point": "func_ru"}
{"task_id": "ru-40", "prompt": "def func_ru(my_dict, my_key):\n    return ", "canonical_solution": "my_dict[my_key]", "test": "\ndef check(candidate):\n    assert candidate({'a': 123, 'b': 'aas'}, 'a') == 123\n", "entry_point": "func_ru"}
{"task_id": "ru-42", "prompt": "def func_ru(my_list, sep):\n    ", "suffix": "\n    return s", "canonical_solution": "s = sep.join(my_list)", "test": "\ndef check(candidate):\n    assert candidate(['a','b','c'], '-') == 'a-b-c'\n", "entry_point": "func_ru"}
{"task_id": "ru-44", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "re.sub(r'[^\\w\\s]+|[\\d]+', r'',s)", "test": "\nimport re\ndef check(candidate):\n    assert candidate('1a2b34c') == 'abc'\n", "entry_point": "func_ru"}
{"task_id": "ru-45", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "[ord(c) for c in s]", "test": "\ndef check(candidate):\n    assert candidate('example string') == [101, 120, 97, 109, 112, 108, 101, 32, 115, 116, 114, 105, 110, 103]\n", "entry_point": "func_ru"}
{"task_id": "ru-49", "prompt": "def func_ru(s):\n    ", "suffix": "\n    return words", "canonical_solution": "words = s.split()", "test": "\ndef check(candidate):\n    assert candidate('first second third') == ['first', 'second', 'third']\n", "entry_point": "func_ru"}
{"task_id": "ru-50", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "isinstance(s, str)", "test": "\ndef check(candidate):\n    assert candidate('1a2b34c') == True\n    assert candidate(123) == False\n", "entry_point": "func_ru"}
{"task_id": "ru-51", "prompt": "def func_ru(my_list):\n    ", "suffix": "\n    return my_set", "canonical_solution": "my_set = set(my_list)", "test": "\ndef check(candidate): \n    assert candidate(['a', 12, '45.6', 45.6]) == set(['a', 12, '45.6', 45.6])\n", "entry_point": "func_ru"}
{"task_id": "ru-55", "prompt": "def func_ru(num):\n    return ", "canonical_solution": "[int(i) for i in str(num)]", "test": "\ndef check(candidate):\n    assert candidate('43524') == [4,3,5,2,4]\n", "entry_point": "func_ru"}
{"task_id": "ru-56", "prompt": "def func_ru(func):\n    ", "suffix": "\n    return time_work", "canonical_solution": "t = time.time()\n    \n    func()\n    \n    time_work = time.time()-t", "test": "\nimport time\ndef check(candidate):\n    def func(): print('Hello World!')\n    assert (candidate(func) - 8.368492126464844e-05) < 1e-6\n", "entry_point": "func_ru"}
{"task_id": "ru-57", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "any(map(str.isdigit, s))", "test": "\ndef check(candidate):\n    assert candidate('124dhe5') == True\n    assert candidate('absbf') == False\n", "entry_point": "func_ru"}
{"task_id": "ru-62", "prompt": "def func_ru(my_list, sep):\n    ", "suffix": "\n    return splitted", "canonical_solution": "splitted = [x.split(sep) for x in my_list]", "test": "\ndef check(candidate):\n    assert candidate(['ab-c', '24v-vd', '33-000'], '-') == [['ab','c'], ['24v','vd'], ['33','000']]\n", "entry_point": "func_ru"}
{"task_id": "ru-63", "prompt": "def func_ru(M, N, val):\n    ", "suffix": "\n    return my_list", "canonical_solution": "my_list = [[val for _ in range(N)] for _ in range(M)]", "test": "\ndef check(candidate):\n    assert candidate(2, 3, 0.5) == [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]]\n", "entry_point": "func_ru"}
{"task_id": "ru-71", "prompt": "def func_ru(sub, s):\n    ", "suffix": "\n    return count", "canonical_solution": "count = 0\n    i = -1\n    while True:\n    \ti = s.find(sub, i+1)\n    \tif i == -1:\n    \t\tbreak\n    \tcount += 1", "test": "\ndef check(candidate):\n    assert candidate('23', '123gdgb23') == 2\n", "entry_point": "func_ru"}
{"task_id": "ru-75", "prompt": "def func_ru(my_list):\n    ", "suffix": "\n    return my_list", "canonical_solution": "my_list.reverse()", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == [3,2,1]\n", "entry_point": "func_ru"}
{"task_id": "ru-78", "prompt": "def func_ru(list_key, list_value):\n    ", "suffix": "\n    return my_dict", "canonical_solution": "my_dict = dict(zip(list_key, list_value))", "test": "\ndef check(candidate):\n    assert candidate(['a','b','c'], [1,2,3]) == {'a':1, 'b':2, 'c':3}\n", "entry_point": "func_ru"}
{"task_id": "ru-79", "prompt": "def func_ru(list_key, list_value):\n    ", "suffix": "\n    return my_dict", "canonical_solution": "my_dict = {list_key[i]: list_value[i] for i in range(len(list_key))}", "test": "\ndef check(candidate):\n    assert candidate(['a', 'b', 'c'], [[1], [2], [3]]) == {'a': [1], 'b': [2], 'c': [3]}\n", "entry_point": "func_ru"}
{"task_id": "ru-82", "prompt": "def func_ru(df, list_indexes):\n    ", "suffix": "\n    return cols", "canonical_solution": "cols = df.iloc[:, list_indexes]", "test": "\nimport pandas as pd\ndef check(candidate):\n    df = pd.DataFrame({'a': [1,2,3], 'b': [4,5,6], 'c': [7,8,9]})\n    assert candidate(df, [1,2]).shape == (3, 2)\n", "entry_point": "func_ru"}
{"task_id": "ru-83", "prompt": "def func_ru(my_list):\n    ", "suffix": "\n    return total", "canonical_solution": "total = sum(my_list)", "test": "\ndef check(candidate):\n    assert candidate([345, 576, 12]) == 933\n", "entry_point": "func_ru"}
{"task_id": "ru-85", "prompt": "def func_ru(my_list):\n    ", "suffix": "\n    return max_value", "canonical_solution": "max_value = {x: y for x, y in filter(lambda x: my_list[x[0]] == max(my_list.values()), my_list.items())}", "test": "\ndef check(candidate):\n    assert candidate({'a':3, 'b':2, 'r':36}) == {'r': 36}\n", "entry_point": "func_ru"}
{"task_id": "ru-90", "prompt": "def func_ru(s, i, symbol):\n    return ", "canonical_solution": "s[:i] + symbol + s[i + 1:]", "test": "\ndef check(candidate):\n    assert candidate('dsgfjksdlh', 3, 'abc') == 'dsgabcjksdlh'\n", "entry_point": "func_ru"}
{"task_id": "ru-91", "prompt": "def func_ru(my_list):\n    ", "suffix": "\n    return my_list", "canonical_solution": "my_list = sorted(my_list)", "test": "\ndef check(candidate):\n    assert candidate([3,2,1]) == [1,2,3]\n    assert candidate([1,1,1]) == [1,1,1]\n    assert candidate(['a', 'b', 'c']) == ['a', 'b', 'c']\n", "entry_point": "func_ru"}
{"task_id": "ru-94", "prompt": "def func_ru(first_date, second_date):\n    return ", "canonical_solution": "second_date - first_date", "test": "\nimport datetime\n\ndef check(candidate):\n    assert candidate(datetime.datetime(2000, 1, 2), datetime.datetime(2000, 2, 2)) == datetime.timedelta(days=31)\n", "entry_point": "func_ru"}
{"task_id": "ru-99", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "Counter(s.split())", "test": "\nfrom collections import Counter\n\ndef check(candidate):\n    assert candidate('my string') == Counter({'my': 1, 'string': 1})\n    assert candidate('this string contains repetitive words words words words ...') == Counter({\n        '...': 1, 'contains': 1, 'repetitive': 1, 'string': 1, 'this': 1, 'words': 4})\n", "entry_point": "func_ru"}
{"task_id": "ru-100", "prompt": "def func_ru(num, base):\n    ", "suffix": "\n    return new_num", "canonical_solution": "new_num = int(str(num), base) ", "test": "\ndef check(candidate):\n    assert candidate(100, 8) == 64\n", "entry_point": "func_ru"}
{"task_id": "ru-103", "prompt": "def func_ru(s):\n    ", "suffix": "\n    return my_dict", "canonical_solution": "my_dict = json.loads(s)", "test": "\nimport json\n\ndef check(candidate):\n    assert candidate('{\"abc\":1, \"dfhgfrh\": 3435}') == {\"abc\":1, \"dfhgfrh\": 3435}\n", "entry_point": "func_ru"}
{"task_id": "ru-109", "prompt": "def func_ru(s):\n    ", "suffix": "\n    return sentences", "canonical_solution": "split_regex = re.compile(r'[.|!|?|\u2026]')\n    sentences = list(filter(lambda t: t, [t.strip() for t in split_regex.split(s)]))", "test": "\nimport re\ndef check(candidate):\n    assert candidate('this is the first piece. Is there another one? Maybe...') == ['this is the first piece', 'Is there another one', 'Maybe']\n", "entry_point": "func_ru"}
{"task_id": "ru-114", "prompt": "def func_ru(num):\n    return ", "canonical_solution": "str(num).encode()", "test": "\ndef check(candidate):\n    assert candidate(123) == b'123'\n", "entry_point": "func_ru"}
{"task_id": "ru-119", "prompt": "def func_ru(s, suff):\n    return ", "canonical_solution": "\" \".join(list(filter( lambda x : not x.endswith(suff), list(s.split()))))", "test": "\ndef check(candidate):\n    assert candidate('agfgf gfg123 afg345 safg123', '123') == 'agfgf afg345'\n", "entry_point": "func_ru"}
{"task_id": "ru-121", "prompt": "def func_ru(dict_list, my_key):\n    ", "suffix": "\n    return values_by_key", "canonical_solution": "values_by_key  = [x[my_key] for x in dict_list if my_key in x] \n", "test": "\ndef check(candidate):\n    assert candidate([{'x':123}, {'a':5435.0, 'x': 'fdg'}], 'a') == [5435.0]\n    assert candidate([{'x':123}, {'a':5435.0, 'x': 'fdg'}], 'x') == [123, 'fdg']\n", "entry_point": "func_ru"}
{"task_id": "ru-127", "prompt": "def func_ru(my_list):\n    return ", "canonical_solution": "list(map(lambda x: x[0]+x[1], zip(my_list[0::2], my_list[1::2])))", "test": "\ndef check(candidate):\n    assert candidate(['cute', 'dog', 'sunny', 'day']) == ['cutedog', 'sunnyday']\n", "entry_point": "func_ru"}
{"task_id": "ru-138", "prompt": "def func_ru(s, old_sub, new_sub, count):\n    return ", "canonical_solution": "s.replace(old_sub, new_sub, count)", "test": "\ndef check(candidate):\n    assert candidate(\"this string contains some old words old old old\", 'old', 'new', 3) == 'this string contains some new words new new old'\n", "entry_point": "func_ru"}
{"task_id": "ru-143", "prompt": "def func_ru(s):\n    return ", "canonical_solution": "re.sub(r'[^\\w\\s]', '', s)", "test": "\nimport re\n\ndef check(candidate):\n    assert candidate('ergf, earg. f?') == 'ergf earg f'\n", "entry_point": "func_ru"}
{"task_id": "ru-148", "prompt": "def func_ru(my_list, sep):\n    ", "suffix": "\n    return s", "canonical_solution": "s = sep.join(my_list)", "test": "\ndef check(candidate):\n    assert candidate(['a','b','c','d','z'], '') == 'abcdz'\n    assert candidate(['a',' ','%','  ','!!'], '|') == 'a| |%|  |!!'\n", "entry_point": "func_ru"}
{"task_id": "ru-152", "prompt": "def func_ru(s):\n    ", "suffix": "\n    return chars", "canonical_solution": "chars = list(s)", "test": "\ndef check(candidate):\n    assert candidate('*%^&gym3 34') == ['*','%','^','&','g','y','m','3',' ','3','4']\n", "entry_point": "func_ru"}
