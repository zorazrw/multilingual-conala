{"task_id": "en-1", "prompt": "def func_en():\n    return ", "canonical_solution": "bytes.fromhex('4a4b4c').decode('utf-8')", "test": "def check(candidate):\n    assert candidate() == 'JKL'\n    assert candidate() != 'ABCsfz'\n    assert candidate() != '3556nth 7ied -%$g\t'", "entry_point": "func_en"}
{"task_id": "en-2", "prompt": "def func_en(myList):\n    return ", "canonical_solution": "all(x == myList[0] for x in myList)", "test": "def check(candidate):\n    assert candidate([1,2,3]) == False\n    assert candidate([1,1,1,1,1,1]) == True\n    assert candidate(['k','k','k','k','k']) == True\n    assert candidate([None,'%$#ga',3]) == False\n    assert candidate(['AAA', 'AAA']) == True\n", "entry_point": "func_en"}
{"task_id": "en-3", "prompt": "def func_en():\n    return ", "canonical_solution": "'%*s : %*s' % (20, 'Python', 20, 'Very Good')", "test": "def check(candidate):\n    assert candidate() == '              Python :            Very Good'\n    assert candidate() != 'this is a candidate output string.'\n    assert candidate() != 'this is not the expected output.'\n    assert candidate() != 'sdgbnugt nior^&%*'\n    assert candidate() != 426907956.7580\n    assert candidate() != None", "entry_point": "func_en"}
{"task_id": "en-5", "prompt": "def func_en(kwargs):\n    return ", "canonical_solution": "{k: v for k, v in list(kwargs.items()) if v is not None}", "test": "def check(candidate):\n    assert candidate({'x': None}) == {}\n    assert candidate({i: None for i in range(10)}) == {}\n    assert candidate({'x': None, 'yy': 234}) == {'yy': 234}\n    assert len(candidate({i:123 for i in range(5)})) == 5\n    assert candidate({'abc': 'abc'})['abc'] == 'abc'", "entry_point": "func_en"}
{"task_id": "en-8", "prompt": "def func_en():\n    return ", "canonical_solution": "\"\"\"\"\"\".join(['a', 'b', 'c'])", "test": "def check(candidate):\n    assert candidate() == 'abc'\n    assert candidate() != 'Abc'\n    assert candidate() != 'a,b,c'\n    assert candidate() != 'a b c'\n    assert candidate() != 'a-b-c'\n    assert candidate() != 'ABC'", "entry_point": "func_en"}
{"task_id": "en-9", "prompt": "def func_en(s1, s2):\n    return ", "canonical_solution": "pd.Series(list(set(s1).intersection(set(s2))))", "test": "import pandas as pd\nx1, x2 = pd.Series([1,2]), pd.Series([1,3])\ndef check(candidate):\n    y = pd.Series([1])\n    assert candidate(x1, x2).equals(y)\n    assert not candidate(pd.Series([1,2]), pd.Series([1,3])).equals(pd.Series([1,2,3]))\n    assert not candidate(pd.Series([1,2]), pd.Series([1,3])).equals(pd.Series([1,2]))\n    assert not candidate(pd.Series([1,2]), pd.Series([1,3])).equals(pd.Series([2,3]))\n    assert not candidate(pd.Series([1,2]), pd.Series([1,3])).equals(pd.Series([]))\n    assert not candidate(pd.Series([1,2]), pd.Series([1,3])).equals(pd.Series([i for i in range(2,10,3)]))\n", "entry_point": "func_en"}
{"task_id": "en-11", "prompt": "def func_en(when):\n    return ", "canonical_solution": "datetime.datetime.strptime(when, '%Y-%m-%d').date()", "test": "import datetime\ndef check(candidate):\n    assert candidate('2013-05-07') == datetime.date(2013, 5, 7)\n    assert candidate('2015-06-02') == datetime.date(2015, 6, 2)\n    assert candidate('2000-02-29') == datetime.date(2000, 2, 29)\n    assert candidate('1990-01-08') == datetime.date(1990, 1, 8)\n    assert candidate('1990-1-08') == datetime.date(1990, 1, 8)\n    assert candidate('1990-1-8') == datetime.date(1990, 1, 8)\n    assert candidate('1990-01-8') == datetime.date(1990, 1, 8)\n", "entry_point": "func_en"}
{"task_id": "en-12", "prompt": "def func_en(inputString):\n    return ", "canonical_solution": "inputString.split('\\n')", "test": "def check(candidate):\n    assert candidate('line a\\nfollows by line b\t...bye\\n') == ['line a', 'follows by line b\t...bye', '']\n    assert candidate('no new line in this sentence. ') == ['no new line in this sentence. ']\n    assert candidate('a\tbfs hhhdf\tsfdas') == ['a\tbfs hhhdf\tsfdas']\n    assert candidate('') == ['']\n", "entry_point": "func_en"}
{"task_id": "en-13", "prompt": "def func_en():\n    return ", "canonical_solution": "' a \\n b \\r\\n c '.split('\\n')", "test": "def check(candidate):\n    assert candidate() == [' a ', ' b \\r', ' c ']\n    assert candidate() != [' a ', ' b \\r', ' c']\n    assert candidate() != [' a', ' b \\r', ' c ']\n    assert candidate() != [' a ', '   b \\r', ' c ']\n    assert candidate() != [' aaa ', ' b \\r', ' c ']\n    assert len(candidate()) > 2\n", "entry_point": "func_en"}
{"task_id": "en-14", "prompt": "def func_en(b):\n    return ", "canonical_solution": "\"\"\":\"\"\".join(str(x) for x in b)", "test": "def check(candidate):\n    assert candidate(['x','y','zzz']) == 'x:y:zzz'\n    assert candidate(['111','22','3']) == '111:22:3'\n    assert candidate(['']) == ''\n    assert candidate([':',':']) == ':::'\n    assert candidate([',','#','#$%']) == ',:#:#$%'\n    assert candidate(['a','b','c']) != 'abc'", "entry_point": "func_en"}
{"task_id": "en-18", "prompt": "def func_en(l):\n    return ", "canonical_solution": "' '.join(map(str, l))", "test": "def check(candidate):\n    assert candidate(['x','y','zzz']) == 'x y zzz'\n    assert candidate(['111','22','3']) == '111 22 3'\n    assert candidate(['']) == ''\n    assert candidate([':',':']) == ': :'\n    assert candidate([',','#','#$%']) == ', # #$%'\n    assert candidate(['a','b','c']) != 'abc'", "entry_point": "func_en"}
{"task_id": "en-21", "prompt": "def func_en(my_string):\n    ", "suffix": "\n    return my_float", "canonical_solution": "my_float = float(my_string.replace(',', ''))", "test": "def check(candidate):\n    assert (candidate('1,234.00') - 1234.0) < 1e-6\n    assert (candidate('0.00') - 0.00) < 1e-6\n    assert (candidate('1,000,000.00') - 1000000.00) < 1e-6\n    assert (candidate('1,000,000.00') - 999999.98) > 1e-6\n    assert (candidate('1') - 1.00) < 1e-6", "entry_point": "func_en"}
{"task_id": "en-22", "prompt": "def func_en():\n    return ", "canonical_solution": "float('123,456.908'.replace(',', ''))", "test": "def check(candidate):\n    assert (candidate() - 123456.908) < 1e-6\n    assert (candidate() - 123456.9) > 1e-6\n    assert (candidate() - 1234.908) > 1e-6\n    assert type(candidate()) == float\n    assert int(candidate()) == 123456", "entry_point": "func_en"}
{"task_id": "en-23", "prompt": "def func_en():\n    return ", "canonical_solution": "sys.path.append('/path/to/whatever')", "test": "import os,sys\ndef check(candidate):\n    n1 = len(sys.path)\n    candidate()\n    assert len(sys.path) == (n1 + 1)", "entry_point": "func_en"}
{"task_id": "en-24", "prompt": "def func_en():\n    return ", "canonical_solution": "re.split('(\\\\W+)', 'Words, words, words.')", "test": "import re\ndef check(candidate):\n    assert candidate() == ['Words', ', ', 'words', ', ', 'words', '.', '']\n    assert candidate() != ['Words', 'words', ', ', 'words', '.', '']\n    assert candidate() != ['words', ', ', 'words', ', ', 'words', '.', '']\n    assert candidate() != ['Words', ', ', 'words', ', ', 'words']\n    assert candidate() == ['Words', ', '] + ['words', ', ', 'words', '.', '']\n    assert len(candidate()) == 7", "entry_point": "func_en"}
{"task_id": "en-32", "prompt": "def func_en(d):\n    return ", "canonical_solution": "{i: d[i] for i in d if i != 'c'}", "test": "def check(candidate):\n    assert candidate({'a': 1 , 'b': 2, 'c': 3}) == {'a': 1 , 'b': 2}\n    assert candidate({'c': None}) == {}\n    assert candidate({'a': 1 , 'b': 2, 'c': 3}) != {'a': 1 , 'b': 2, 'c': 3}\n    assert candidate({'c': 1, 'cc': 2, 'ccc':3}) == {'cc': 2, 'ccc':3}\n    assert 'c' not in candidate({'c':i for i in range(10)})", "entry_point": "func_en"}
{"task_id": "en-33", "prompt": "def func_en(csv_df, split_df):\n    return ", "canonical_solution": "pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))", "test": "import pandas as pd\nfrom pandas import DataFrame\ndef check(candidate):\n    split_df = pd.DataFrame({'key': ['foo', 'bar'], 'value': [1, 2]})\n    csv_df = pd.DataFrame({'key': ['foo', 'baz'], 'value': [3, 4]})\n    result = pd.DataFrame({'key': ['foo'], 'value_left': [1],'value_right': [3]})\n    assert candidate(csv_df, split_df).equals(result)", "entry_point": "func_en"}
{"task_id": "en-34", "prompt": "def func_en(s):\n    return ", "canonical_solution": "s.split(' ', 4)", "test": "def check(candidate):\n    assert candidate('1 0 A10B 100 Description: This is a description with spaces') == ['1', '0', 'A10B', '100', 'Description: This is a description with spaces']\n    assert candidate('this-is-a-continuous-sequence') == ['this-is-a-continuous-sequence']\n    assert candidate('') == ['']\n    assert candidate('\t') == ['\t']\n", "entry_point": "func_en"}
{"task_id": "en-38", "prompt": "def func_en(P, T):\n    return ", "canonical_solution": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)", "test": "\nimport numpy as np\nimport scipy\ndef check(candidate):\n    P = np.array([[6, 2, 7], [1, 1, 8], [8, 7, 1], [9, 6, 4], [2, 1, 1]])\n    T = np.array([[[9, 7, 2, 3], [9, 6, 8, 2], [6, 6, 2, 8]],\n                     [[4, 5, 5, 3], [1, 8, 3, 5], [2, 8, 1, 6]]])\n    result = np.array([[[114,  96,  42,  78], [ 66,  61,  26,  69], [141, 104,  74,  46], [159, 123,  74,  71],  [ 33,  26,  14,  16]], \n                          [[ 40, 102,  43,  70], [ 21,  77,  16,  56], [ 41, 104,  62,  65], [ 50, 125,  67,  81], [ 11,  26,  14,  17]]])\n    assert np.array_equal(candidate(P, T), result)\n", "entry_point": "func_en"}
{"task_id": "en-39", "prompt": "def func_en():\n    return ", "canonical_solution": "numpy.zeros((3, 3, 3))", "test": "\nimport numpy as np\nimport numpy\ndef check(candidate):\n    result = np.array([[[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]],\n                          [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]],\n                          [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]])\n    assert np.array_equal(candidate(), result)", "entry_point": "func_en"}
{"task_id": "en-40", "prompt": "def func_en(content):\n    return ", "canonical_solution": "\"\"\" \"\"\".join(content.split(' ')[:-1])", "test": "\ndef check(candidate): \n    assert candidate('test') == ''\n    assert candidate('this is an example content') == 'this is an example'\n    assert candidate('  ') == ' '\n    assert candidate('') == ''\n    assert candidate('blank and tab\t') == 'blank and'\n", "entry_point": "func_en"}
{"task_id": "en-41", "prompt": "def func_en(x):\n    return ", "canonical_solution": "np.asarray(x).reshape(1, -1)[(0), :]", "test": "\nimport numpy as np\ndef check(candidate):\n    assert all(candidate(1.) == np.asarray(1.))\n    assert all(candidate(123) == np.asarray(123))\n    assert all(candidate('a') == np.asarray('a'))\n    assert all(candidate(False) == np.asarray(False))\n", "entry_point": "func_en"}
{"task_id": "en-42", "prompt": "def func_en(L):\n    return ", "canonical_solution": "sum(sum(i) if isinstance(i, list) else i for i in L)", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4]) == 10\n    assert candidate([[1],[2],[3],[4]]) == 10\n    assert candidate([1,1,1,1]) == 4\n    assert candidate([1,[2,3],[4]]) == 10\n    assert candidate([]) == 0\n    assert candidate([[], []]) == 0\n", "entry_point": "func_en"}
{"task_id": "en-43", "prompt": "def func_en():\n    return ", "canonical_solution": "float.fromhex('470FC614')", "test": "\ndef check(candidate):\n    assert (candidate() - 1192216084.0) < 1e-6\n    assert (candidate() - 100) > 10000\n", "entry_point": "func_en"}
{"task_id": "en-44", "prompt": "def func_en(my_dict):\n    return ", "canonical_solution": "{k: 2 * my_dict[k] for k in my_dict.keys()}", "test": "\ndef check(candidate): \n    assert candidate({'a': [1], 'b': 4.9}) == {'a': [1, 1], 'b': 9.8}\n    assert candidate({1:1}) == {1:2}\n    assert candidate({(1,2):[1]}) == {(1,2):[1,1]}\n    assert candidate({'asd':0}) == {'asd':0}\n    assert candidate({}) == {}\n", "entry_point": "func_en"}
{"task_id": "en-46", "prompt": "def func_en(l):\n    return ", "canonical_solution": "\"\"\",\"\"\".join(l)", "test": "\ndef check(candidate): \n    assert candidate(['a','b','c']) == 'a,b,c'\n    assert candidate(['a','b']) == 'a,b'\n    assert candidate([',',',',',']) == ',,,,,'\n    assert candidate([' ','  ','c']) == ' ,  ,c'\n    assert candidate([]) == ''\n", "entry_point": "func_en"}
{"task_id": "en-47", "prompt": "def func_en(myList):\n    return ", "canonical_solution": "','.join(map(str, myList))", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == '1,2,3'\n    assert candidate([1,2,'a']) == '1,2,a'\n    assert candidate([]) == ''\n    assert candidate(['frg',3253]) == 'frg,3253'\n", "entry_point": "func_en"}
{"task_id": "en-48", "prompt": "def func_en():\n    return ", "canonical_solution": "list(reversed(list(range(10))))", "test": "\ndef check(candidate): \n    assert candidate() == [9,8,7,6,5,4,3,2,1,0]\n    assert len(candidate()) == 10\n    assert min(candidate()) == 0\n    assert type(candidate()) == list\n    assert type(candidate()[-2]) == int\n", "entry_point": "func_en"}
{"task_id": "en-49", "prompt": "def func_en():\n    return ", "canonical_solution": "'lamp, bag, mirror'.replace('bag', '')", "test": "\ndef check(candidate): \n    assert candidate() == 'lamp, , mirror'\n    assert type(candidate()) == str\n    assert len(candidate()) == 14\n    assert candidate().startswith('lamp')\n", "entry_point": "func_en"}
{"task_id": "en-50", "prompt": "def func_en(s):\n    return ", "canonical_solution": "\"\"\".\"\"\".join(s.split('.')[::-1])", "test": "\ndef check(candidate):\n    assert candidate('apple.orange.red.green.yellow') == 'yellow.green.red.orange.apple'\n    assert candidate('apple') == 'apple'\n    assert candidate('apple.orange') == 'orange.apple'\n    assert candidate('123.456') == '456.123'\n    assert candidate('.') == '.'\n", "entry_point": "func_en"}
{"task_id": "en-51", "prompt": "def func_en(s):\n    return ", "canonical_solution": "datetime.datetime.fromtimestamp(s / 1000.0).strftime('%Y-%m-%d %H:%M:%S.%f')", "test": "\nimport time, datetime\ndef check(candidate): \n    assert candidate(1236472051807) == '2009-03-08 00:27:31.807000'\n    assert candidate(1236472051808) != '2009-03-08 00:27:31.807000'\n", "entry_point": "func_en"}
{"task_id": "en-53", "prompt": "def func_en():\n    return ", "canonical_solution": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()", "test": "\nimport datetime\ndef check(candidate): \n    assert datetime.datetime.now().date() - candidate() < datetime.timedelta(days = 7, seconds = 1)\n    assert datetime.datetime.now().date() - candidate() >= datetime.timedelta(days = 7)\n", "entry_point": "func_en"}
{"task_id": "en-54", "prompt": "def func_en(column, data):\n    return ", "canonical_solution": "sum(row[column] for row in data)", "test": "\ndef check(candidate):\n    assert candidate(1, [[1,2,3], [4,5,6]]) == 7\n    assert candidate(0, [[1,1,1], [0,1,1]]) == 1\n    assert candidate(5, [[1,1,1,1,1,2], [0,1,1,1,1,1,1,1,1,1,1]]) == 3\n    assert candidate(0, [[1],[2],[3],[4]]) == 10\n", "entry_point": "func_en"}
{"task_id": "en-56", "prompt": "def func_en():\n    return ", "canonical_solution": "base64.b64encode(bytes('your string', 'utf-8'))", "test": "\nimport base64\ndef check(candidate):\n    assert candidate() == b'eW91ciBzdHJpbmc='\n", "entry_point": "func_en"}
{"task_id": "en-57", "prompt": "def func_en(dicts):\n    return ", "canonical_solution": "dict((k, [d[k] for d in dicts]) for k in dicts[0])", "test": "\ndef check(candidate): \n    assert candidate([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': ['happy']}]) == {'cat': [1, 2], 'dog': [3, ['happy']]}\n    assert candidate([{'cat': 1}, {'cat' : 2}]) != {'cat': 3}\n", "entry_point": "func_en"}
{"task_id": "en-60", "prompt": "def func_en(mylist):\n    return ", "canonical_solution": "[k for k, v in list(Counter(mylist).items()) if v > 1]", "test": "\nfrom collections import Counter\ndef check(candidate):\n    assert candidate([1,3,2,2,1,4]) == [1, 2]\n    assert candidate([1,3,2,2,1,4]) != [3,4]\n    assert candidate([]) == []\n    assert candidate([1,1,1,1,1]) == [1]\n    assert candidate([1.,1.,1.]) == [1.]\n", "entry_point": "func_en"}
{"task_id": "en-64", "prompt": "def func_en(list_of_menuitems):\n    return ", "canonical_solution": "[image for menuitem in list_of_menuitems for image in menuitem]", "test": "\ndef check(candidate): \n    assert candidate([[1,2],[3,4,5]]) == [1,2,3,4,5]\n    assert candidate([[],[]]) == []\n    assert candidate([[1,1,1], []]) == [1,1,1]\n    assert candidate([['1'],['2']]) == ['1','2']\n", "entry_point": "func_en"}
{"task_id": "en-65", "prompt": "def func_en(a, b):\n    ", "suffix": "\n    return a", "canonical_solution": "a.extend(b)", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 2, 3], {4, 5, 2}) == [1, 2, 2, 3, 2, 4, 5]\n    assert candidate([], {4,5,2}) == [2,4,5]\n    assert candidate([1,2,3,4],{2}) == [1,2,3,4,2]\n    assert candidate([1], {'a'}) == [1, 'a']\n", "entry_point": "func_en"}
{"task_id": "en-69", "prompt": "def func_en(x):\n    return ", "canonical_solution": "x.rpartition('-')[0]", "test": "\ndef check(candidate):\n    assert candidate('djhajhdjk-dadwqd-dahdjkahsk') == 'djhajhdjk-dadwqd'\n    assert candidate('/-/') == '/'\n    assert candidate('---') == '--'\n    assert candidate('') == ''\n", "entry_point": "func_en"}
{"task_id": "en-73", "prompt": "def func_en():\n    return ", "canonical_solution": "np.maximum([2, 3, 4], [1, 5, 2])", "test": "\nimport numpy as np \n\ndef check(candidate):\n    assert all(candidate() == np.array([2, 5, 4]))\n", "entry_point": "func_en"}
{"task_id": "en-77", "prompt": "def func_en():\n    return ", "canonical_solution": "[int(1000 * random.random()) for i in range(10000)]", "test": "\nimport random\ndef check(candidate):\n    assert candidate().__class__ == list\n    assert candidate()[-1].__class__ == int\n", "entry_point": "func_en"}
{"task_id": "en-84", "prompt": "def func_en(goals, penalties):\n    return ", "canonical_solution": "\"\"\"({} goals, ${})\"\"\".format(goals, penalties)", "test": "\ndef check(candidate):\n    assert candidate(0, 0) == '(0 goals, $0)'\n    assert candidate(10, -2) == '(10 goals, $-2)'\n", "entry_point": "func_en"}
{"task_id": "en-86", "prompt": "def func_en(L):\n    return ", "canonical_solution": "[int(''.join(str(d) for d in x)) for x in L]", "test": "\ndef check(candidate):\n    assert candidate([[1,2], [2,3,4], [1,0,0]]) == [12,234,100]\n", "entry_point": "func_en"}
{"task_id": "en-94", "prompt": "def func_en():\n    return ", "canonical_solution": "\"\"\"QH QD JC KD JS\"\"\".split()", "test": "\ndef check(candidate):\n    assert candidate() == ['QH', 'QD', 'JC', 'KD', 'JS']\n", "entry_point": "func_en"}
{"task_id": "en-95", "prompt": "def func_en(line):\n    return ", "canonical_solution": "re.search('>.*<', line).group(0)", "test": "\nimport re\ndef check(candidate):\n    assert candidate('>aabbcc<') == '>aabbcc<'\n", "entry_point": "func_en"}
{"task_id": "en-98", "prompt": "def func_en(thelist):\n    return ", "canonical_solution": "[index for index, item in enumerate(thelist) if item[0] == '332']", "test": "\ndef check(candidate):\n    assert candidate([[0,1,2], ['a','bb','ccc'], ['332',33,2], [33,22,332]]) == [2]\n", "entry_point": "func_en"}
{"task_id": "en-99", "prompt": "def func_en(text):\n    return ", "canonical_solution": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()", "test": "\nimport re\ndef check(candidate):\n    assert candidate('ABjfK329r0&&*#5t') == 'abjfk329r05t'\n    assert candidate('jseguwphegoi339yup h') == 'jseguwphegoi339yup h'\n    assert candidate('   ') == ''\n", "entry_point": "func_en"}
{"task_id": "en-103", "prompt": "def func_en(mylist):\n    return ", "canonical_solution": "[x for x in mylist if len(x) == 3]", "test": "\ndef check(candidate):\n    assert candidate([[1,2,3], 'abc', [345,53], 'avsvasf']) == [[1,2,3], 'abc']\n    assert candidate([[435,654.4,45,2],[34,34,757,65,32423]]) == []\n", "entry_point": "func_en"}
{"task_id": "en-173", "prompt": "def func_en(word):\n    return ", "canonical_solution": "[(x + y) for x, y in zip(word, word[1:])]", "test": "\ndef check(candidate):\n    assert candidate('string') == ['st', 'tr', 'ri', 'in', 'ng']\n    assert candidate('') == []\n    assert candidate(' ') == []\n", "entry_point": "func_en"}
{"task_id": "en-175", "prompt": "def func_en(myString):\n    return ", "canonical_solution": "re.findall('(https?://[^\\s]+)', myString)", "test": "\nimport re\ndef check(candidate):\n    assert candidate('my string does not contain a url...') == []\n    assert candidate('a string with an example url https://www.google.com/ to be extracted') == ['https://www.google.com/']\n", "entry_point": "func_en"}
