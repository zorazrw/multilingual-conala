{"task_id": "ja-0", "prompt": "def func_ja(arr):\n    return ", "canonical_solution": "arr[:, 0]", "test": "\nimport numpy as np\ndef check(candidate):\n    arr = np.array([[1,2],[3,4]])\n    assert all(candidate(arr) == np.array([1,3]))\n    arr = np.array([[3,4,5]])\n    assert all(candidate(arr) == np.array([3]))\n", "entry_point": "func_ja"}
{"task_id": "ja-7", "prompt": "def func_ja(d):\n    ", "canonical_solution": "X = np.array(d, dtype='float32')\n    X.tofile('binaryVrc.bin')", "test": "\nimport numpy as np\n\ndef check(candidate):\n    d = np.array([1., 2., 3.])\n    candidate(d)\n    d1 = np.fromfile('binaryVrc.bin', dtype='float32')\n    assert all(d1 == d)\n", "entry_point": "func_ja"}
{"task_id": "ja-9", "prompt": "def func_ja(f):\n    ", "canonical_solution": "f.close()", "test": "\ndef check(candidate):\n    f = open('tmp.txt', 'w')\n    candidate(f)\n    assert f.closed\n", "entry_point": "func_ja"}
{"task_id": "ja-14", "prompt": "def func_ja():\n    return ", "canonical_solution": "re.compile('[\u3041-\u3093\u30a1-\u30f3\u4e00-\u9fa5]+')", "test": "\nimport re\ndef check(candidate):\n    pattern = candidate()\n    words = ['\u3042\u3044\u3046\u3048\u304a', '546', '\u305f\u306c\u304d', '\u9945\u982d', 'abdf', '#%&', '    ']\n    ja_words = [pattern.findall(w) for w in words]\n    ja_words = [a for jw in ja_words for a in jw]\n    assert ja_words == ['\u3042\u3044\u3046\u3048\u304a', '\u305f\u306c\u304d', '\u9945\u982d']\n", "entry_point": "func_ja"}
{"task_id": "ja-24", "prompt": "def func_ja(df, pat):\n    return ", "canonical_solution": "df.x.str.extract(pat)", "test": "\nimport pandas as pd\ndef check(candidate): \n    df = pd.DataFrame({'x': ['\u8eca5(0.8km)', '5', '\u8eca27(8.6km)']}, index=[1, 2, 3])\n    pat = r'\u8eca(\\d*)'\n    ref = df.x.str.extract(pat)\n    assert candidate(df, pat).count()[0] == 2\n", "entry_point": "func_ja"}
{"task_id": "ja-28", "prompt": "def func_ja(a, b):\n    return ", "canonical_solution": "pd.DataFrame([a, b])", "test": "\nimport numpy as np\nimport pandas as pd\ndef check(candidate): \n    assert candidate([1,1,1], [2,2,2]).equals(pd.DataFrame([[1,1,1], [2,2,2]]))\n    assert candidate([1,2,1], [2,3,4]).equals(pd.DataFrame([[1,2,1], [2,3,4]]))\n    assert candidate([0], [1]).equals(pd.DataFrame([[0], [1]]))\n", "entry_point": "func_ja"}
{"task_id": "ja-33", "prompt": "def func_ja(df, change_dict):\n    return ", "suffix": "\n    return df", "canonical_solution": "df.replace(change_dict)", "test": "\nimport pandas as pd\ndef check(candidate):\n    df = pd.DataFrame({'kai': ['2', 'B1', '23-49', 'M2']}, index=[1, 2, 3, 4])\n    change_dict = {'2': '22', 'B1': 'B2'}\n    assert candidate(df, change_dict).equals(df.replace(change_dict))\n", "entry_point": "func_ja"}
{"task_id": "ja-40", "prompt": "def func_ja(arr, n):\n    return ", "canonical_solution": "(arr[arr > n].sum(), numpy.sum(arr > n))", "test": "\nimport numpy\nimport numpy as np \ndef check(candidate):\n    assert candidate(np.array([1,2,3,4]), 3) == (4, 1)\n", "entry_point": "func_ja"}
{"task_id": "ja-42", "prompt": "def func_ja(arr_list):\n    return ", "canonical_solution": "np.stack(arr_list)", "test": "\nimport numpy as np\ndef check(candidate):\n    arr_list = [np.array([1,2]), np.array([3,4]), np.array([5,6])]\n    assert candidate(arr_list).tolist() == [[1, 2], [3, 4], [5, 6]]\n", "entry_point": "func_ja"}
{"task_id": "ja-43", "prompt": "def func_ja(soup):\n    return ", "canonical_solution": "soup.find_all('p')", "test": "\nfrom bs4 import BeautifulSoup\ndef check(candidate):\n    soup = BeautifulSoup('<p>text</p>')\n    assert candidate(soup) == soup.find_all('p')\n", "entry_point": "func_ja"}
{"task_id": "ja-44", "prompt": "def func_ja(df, c_label):\n    return ", "canonical_solution": "df.groupby([c_label]).last()", "test": "\nimport pandas as pd\ndef check(candidate):\n    df = pd.DataFrame({'\u5229\u7528\u8005ID': [1, 2], '\u30b3\u30f3\u30c6\u30f3\u30c4ID': ['a', 'b'], '\u5024': [170, 45]})\n    c_label = ['\u5229\u7528\u8005ID', '\u30b3\u30f3\u30c6\u30f3\u30c4ID']\n    assert candidate(df, c_label).equals(df.groupby([c_label]).last())\n", "entry_point": "func_ja"}
{"task_id": "ja-45", "prompt": "def func_ja(a_list, b_list):\n    return ", "canonical_solution": "[i for i in b_list if i in a_list]", "test": "\ndef check(candidate):\n    assert candidate([1,2,3], [4,1,2]) == [1,2]\n    assert sorted(candidate([1,2,3,4,5], [4,1,2])) == [1,2,4]\n    assert candidate([1,2,3], []) == []\n", "entry_point": "func_ja"}
{"task_id": "ja-46", "prompt": "def func_ja(dt_s):\n    return ", "canonical_solution": "datetime.datetime.strptime(dt_s,'%d%b%Y')", "test": "\nimport datetime\ndef check(candidate):\n    assert candidate('10OCT2017') == datetime.datetime.strptime('10OCT2017','%d%b%Y')\n", "entry_point": "func_ja"}
{"task_id": "ja-48", "prompt": "def func_ja(n):\n    return ", "canonical_solution": "[int(c) for c in n]", "test": "\ndef check(candidate):\n    assert candidate('12345') == [1,2,3,4,5]\n    assert candidate('') == []\n    assert candidate('0') == [0]\n", "entry_point": "func_ja"}
{"task_id": "ja-54", "prompt": "def func_ja(dir):\n    return ", "canonical_solution": "os.listdir(dir)", "test": "\nimport os\ndef check(candidate):\n    assert candidate('.') == os.listdir('.')\n", "entry_point": "func_ja"}
{"task_id": "ja-56", "prompt": "def func_ja(a_1, a_2):\n    return ", "canonical_solution": "np.concatenate((a_1,a_2),axis=0)", "test": "\nimport numpy as np\nimport pandas as pd\ndef check(candidate):\n    assert all(candidate(pd.DataFrame([1,2]), pd.DataFrame([4,5])) == np.array([[1],[2],[4],[5]]))\n", "entry_point": "func_ja"}
{"task_id": "ja-60", "prompt": "def func_ja(a, b):\n    return ", "canonical_solution": "a & b", "test": "\ndef check(candidate):\n    assert candidate(22, 56678) == 6\n    assert candidate(0, -1) == 0\n    assert candidate(1000, 1) == 0\n    assert candidate(479, 234) == 202\n", "entry_point": "func_ja"}
{"task_id": "ja-61", "prompt": "def func_ja():\n    return ", "canonical_solution": "globals()", "test": "\ndef check(candidate):\n    assert candidate() == globals()\n", "entry_point": "func_ja"}
{"task_id": "ja-64", "prompt": "def func_ja(word_list):\n    return ", "canonical_solution": "Counter(word_list)", "test": "\nfrom collections import Counter\ndef check(candidate):\n    assert candidate(['this', 'is', 'a', 'word', 'List']) == Counter({'List': 1, 'a': 1, 'is': 1, 'this': 1, 'word': 1})\n    assert candidate(['List']) == Counter({'List': 1})\n    assert candidate(['this', 'this', 'this', 'this', 'this']) == Counter({'this': 5})\n    assert candidate([]) == Counter({})\n", "entry_point": "func_ja"}
{"task_id": "ja-66", "prompt": "def func_ja(f, g):\n    ", "suffix": "\n    return add_functions", "canonical_solution": "def add_functions(f, g):\n        return lambda x: f(x) + g(x)", "test": "\ndef f(x): return x\ndef g(y): return 1\n\ndef check(candidate):\n    assert candidate(f,g)(f,g)(3) == 4\n", "entry_point": "func_ja"}
{"task_id": "ja-67", "prompt": "def func_ja(obj):\n    return ", "canonical_solution": "type(obj)", "test": "\ndef check(candidate):\n    assert candidate('this is a string') == str\n    assert candidate(123.4) == float\n    assert candidate(400) == int\n    assert candidate({}) == dict \n    assert candidate([{}]) == list\n", "entry_point": "func_ja"}
{"task_id": "ja-71", "prompt": "def func_ja(foldername, filename):\n    return ", "canonical_solution": "os.path.join(foldername, filename)", "test": "\nimport os\ndef check(candidate):\n  assert candidate('folder', 'file') == 'folder/file'\n  assert candidate('', 'file') == 'file'\n  assert candidate('.', 'file') == './file'\n", "entry_point": "func_ja"}
{"task_id": "ja-73", "prompt": "def func_ja(src, range):\n    return ", "canonical_solution": "int(math.ceil(src/float(range)) * range)", "test": "\nimport math\ndef check(candidate):\n    assert candidate(22, 50) == 50\n    assert candidate(100, 23) == 115\n    assert candidate(0, 13) == 0\n    assert candidate(12, 1) == 12\n    assert candidate(34, 23) == 46\n", "entry_point": "func_ja"}
{"task_id": "ja-79", "prompt": "def func_ja(df, reg):\n    return ", "canonical_solution": "df['a'].str.extract(reg, expand=True)", "test": "\nimport pandas as pd\ndef check(candidate):\n    df = pd.DataFrame([['abc def'],['123 567'], ['qqq eee']], columns=['a'])\n    reg = r'(.{3})$'\n    assert candidate(df, reg).equals(df['a'].str.extract(reg, expand=True))\n", "entry_point": "func_ja"}
{"task_id": "ja-80", "prompt": "def func_ja(factories, shops, costs):\n    return ", "canonical_solution": "{f + s: cost for ((f,s), cost) in zip(product(factories, shops), costs)}", "test": "\nfrom itertools import product\ndef check(candidate):\n    assert candidate(['A', 'B'], ['1', '2'], [8, 10, 12, 16]) == {'A1': 8, 'A2': 10, 'B1': 12, 'B2': 16}\n", "entry_point": "func_ja"}
{"task_id": "ja-83", "prompt": "def func_ja(li):\n    ", "suffix": "\n    return s", "canonical_solution": "s = ''.join(i[0] for i in li)", "test": "\ndef check(candidate):\n    assert candidate(['sda', 'dahkdja', 'uehjkw', 'ebhjda']) == 'sdue'\n    assert candidate(['happy', 'apple', 'pear', 'pie', 'yummy']) == 'happy'\n    assert candidate(['a', 'b', 'c', 'd']) == 'abcd'\n    assert candidate([str(i) for i in range(10)]) == '0123456789'\n", "entry_point": "func_ja"}
{"task_id": "ja-86", "prompt": "def func_ja(req_data):\n    return ", "canonical_solution": "json.dumps(req_data).encode('utf-8')", "test": "\nimport json\ndef check(candidate):\n    assert candidate({'test': 'just a test'}) == b'{\"test\": \"just a test\"}'\n", "entry_point": "func_ja"}
{"task_id": "ja-88", "prompt": "def func_ja(str):\n    return ", "canonical_solution": "re.sub('([\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc])\\s+((?=[\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc]))',r'\\1\\2', str)", "test": "\nimport re\ndef check(candidate):\n    assert candidate('\u65e5 \u672c \u8a9e \u3067 \u631f \u307e \u308c \u305f \u7a7a \u767d \u3092 \u524a \u9664 \u3059 \u308b') == '\u65e5\u672c\u8a9e\u3067\u631f\u307e\u308c\u305f\u7a7a\u767d\u3092\u524a\u9664\u3059\u308b'\n", "entry_point": "func_ja"}
{"task_id": "ja-89", "prompt": "def func_ja(s, n):\n    return ", "canonical_solution": "u'{0}{1}'.format(s, n)", "test": "\ndef check(candidate):\n    assert candidate('abd', 35) == 'abd35'\n    assert candidate('', 12.34) == '12.34'\n    assert candidate([1,2,3], 'string') == '[1, 2, 3]string'\n", "entry_point": "func_ja"}
{"task_id": "ja-96", "prompt": "def func_ja(s_json):\n    ", "suffix": "\n    return d", "canonical_solution": "d = json.loads(s_json)", "test": "\nimport json\ndef check(candidate):\n    assert candidate('{\"a\":123,\"b\":45.6}') == {'a':123, 'b':45.6}\n", "entry_point": "func_ja"}
{"task_id": "ja-97", "prompt": "def func_ja(soup):\n    return ", "canonical_solution": "soup.get('a_id')", "test": "\nfrom bs4 import BeautifulSoup\ndef check(candidate):\n    soup = BeautifulSoup('<p>riginsf</p>')\n    soup['a_id'] = 'some value'\n    assert candidate(soup) == 'some value'\n", "entry_point": "func_ja"}
{"task_id": "ja-99", "prompt": "def func_ja(df):\n    ", "suffix": "\n    return df2", "canonical_solution": "df2 = df.reset_index(drop=True)", "test": "\nimport pandas as pd\ndef check(candidate):\n    df = pd.DataFrame(data={'col1':[0,1,2,3], 'col2': pd.Series([2,3], index=[2,3])}, index=[0,2,1,3])\n    assert candidate(df).equals(pd.DataFrame(data={'col1': [0,1,2,3], 'col2': pd.Series([2,3], index=[1,3])}, index=[0,1,2,3]))\n", "entry_point": "func_ja"}
{"task_id": "ja-101", "prompt": "def func_ja(z):\n    return ", "canonical_solution": "z.real", "test": "\ndef check(candidate):\n    assert candidate(1.23-0j) == 1.23\n", "entry_point": "func_ja"}
{"task_id": "ja-102", "prompt": "def func_ja(iter, r):\n    return ", "canonical_solution": "list(itertools.combinations(iter, r))", "test": "\nimport itertools \ndef check(candidate):\n    assert candidate([1,2,3], 2) == [(1, 2), (1, 3), (2, 3)]\n    assert candidate([1], 2) == []\n    assert candidate([1], 1) == [(1, )]\n", "entry_point": "func_ja"}
{"task_id": "ja-105", "prompt": "def func_ja(args, func):\n    return ", "canonical_solution": "func(*args)", "test": "\ndef check(candidate): \n    def func1(x, y, z): return x + y + z \n    assert candidate([1,2,3], func1) == 6\n    def func2(a): return 0.8\n    assert candidate(['random'], func2) == 0.8\n", "entry_point": "func_ja"}
{"task_id": "ja-120", "prompt": "def func_ja(list, string):\n    ", "suffix": "\n    return newlist", "canonical_solution": "newlist = [s for s in list if (string in s)]", "test": "\ndef check(candidate):\n    assert candidate(['abc', 'bbbb', 'fhyjn', '1326546'], 'bc') == ['abc']\n", "entry_point": "func_ja"}
{"task_id": "ja-127", "prompt": "def func_ja(json_data):\n    ", "suffix": "\n    return json_str", "canonical_solution": "json_str = json.dumps(json_data)", "test": "\nimport json\ndef check(candidate):\n    assert candidate({'a': 134, 'bvgdfbh': 46.7576}) == '{\"a\": 134, \"bvgdfbh\": 46.7576}'\n    assert candidate(['foo', {'bar': ('baz', None, 1.0, 2)}]) == '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n", "entry_point": "func_ja"}
{"task_id": "ja-145", "prompt": "def func_ja(number):\n    ", "suffix": "\n    return num_list", "canonical_solution": "\n    num_list = []\n    while number != 0: \n        num_list.append(number % 10)\n        number //= 10\n    num_list.reverse()\n", "test": "\ndef check(candidate):\n    assert candidate(123) == [1,2,3]\n", "entry_point": "func_ja"}
{"task_id": "ja-146", "prompt": "def func_ja(number):\n    ", "suffix": "\n    return num_list", "canonical_solution": "num_list = list(map(int, str(number)))", "test": "\ndef check(candidate):\n    assert candidate(123) == [1,2,3]\n", "entry_point": "func_ja"}
{"task_id": "ja-148", "prompt": "def func_ja(text):\n    ", "suffix": "\n    return list", "canonical_solution": "list = re.findall(r'[0-9]+', text)", "test": "\nimport re\ndef check(candidate):\n    assert candidate('fg456fgxnd') == ['456']\n", "entry_point": "func_ja"}
{"task_id": "ja-150", "prompt": "def func_ja(word, h):\n    return ", "canonical_solution": "word[h:] + word[:h]", "test": "\ndef check(candidate):\n    assert candidate('abcdefg', 4) == 'efgabcd'\n", "entry_point": "func_ja"}
{"task_id": "ja-151", "prompt": "def func_ja(attributes):\n    return ", "canonical_solution": "[a-1 for a in attributes]", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == [0,1,2]\n", "entry_point": "func_ja"}
{"task_id": "ja-159", "prompt": "def func_ja(list):\n    return ", "canonical_solution": "[x for x in list if x]", "test": "\ndef check(candidate):\n    assert candidate(['afrg ', 'fdbf', 13254, 54765.6]) == ['afrg ', 'fdbf', 13254, 54765.6]\n    assert candidate(['', None, 0]) == []\n", "entry_point": "func_ja"}
{"task_id": "ja-162", "prompt": "def func_ja(json_string):\n    ", "suffix": "\n    return json_obj", "canonical_solution": "json_obj = json.loads(json_string)", "test": "\nimport json\ndef check(candidate):\n    assert candidate('{\"a\": 5}') == {'a': 5}\n", "entry_point": "func_ja"}
{"task_id": "ja-167", "prompt": "def func_ja(dt):\n    return ", "canonical_solution": "dt.timestamp()", "test": "\nimport datetime, pytz\ndef check(candidate):\n    assert candidate(datetime.datetime.fromtimestamp(123456789.123456, pytz.timezone('America/Los_Angeles'))) == 123456789.123456\n", "entry_point": "func_ja"}
{"task_id": "ja-168", "prompt": "def func_ja(df, col_name, string):\n    return ", "canonical_solution": "df[df[col_name].str.contains(string)]", "test": "\nimport pandas as pd \ndef check(candidate):\n    df = pd.DataFrame({'name': ['Mr. A', 'Ms. B'], 'age': [30, 23]})\n    df_sub = pd.DataFrame({'name': ['Mr. A'], 'age': [30]})\n    assert candidate(df, 'name', 'A').equals(df_sub)\n", "entry_point": "func_ja"}
{"task_id": "ja-170", "prompt": "def func_ja(list, n):\n    return ", "canonical_solution": "list[-n:]", "test": "\ndef check(candidate):\n    candidate([1,2,3,4,5,6,7], 2) == [6,7]\n    candidate([1,2,3], 0) == []\n", "entry_point": "func_ja"}
{"task_id": "ja-171", "prompt": "def func_ja(b_string):\n    return ", "canonical_solution": "b_string.decode('unicode-escape')", "test": "\nimport unicodedata\ndef check(candidate):\n    assert candidate(b'example-string') == 'example-string'\n", "entry_point": "func_ja"}
{"task_id": "ja-172", "prompt": "def func_ja(str, old_s, new_s):\n    return ", "canonical_solution": "str.replace(old_s, new_s)", "test": "\ndef check(candidate):\n    assert candidate('mystring', 'my', 'your') == 'yourstring'\n    assert candidate('contain no old sub string', 'fngo', 'new') == 'contain no old sub string'\n", "entry_point": "func_ja"}
{"task_id": "ja-175", "prompt": "def func_ja(str):\n    return ", "canonical_solution": "str.encode('utf-8')", "test": "\ndef check(candidate):\n    assert candidate('mystr') == b'mystr'\n", "entry_point": "func_ja"}
