{"task_id": "es-0", "prompt": "def func_es(keys, val, dic):\n    ", "suffix": "\n    return result", "canonical_solution": "result = {k:v for k,v in dic.items() if (k in keys) and (v == val)}", "test": "\ndef check(candidate):\n    assert candidate(['a','b'], 23, {'cc':23, 'bb': 23, 'b':4, 'a': 23}) == {'a': 23}\n", "entry_point": "func_es"}
{"task_id": "es-9", "prompt": "def func_es(list):\n    return ", "canonical_solution": "[list[i//2] for i in range(len(list)*2-1)]", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4]) == [1,1,2,2,3,3,4]\n", "entry_point": "func_es"}
{"task_id": "es-10", "prompt": "def func_es(ruta):\n    return ", "canonical_solution": "os.listdir(ruta)", "test": "\nimport os\ndef check(candidate):\n    assert candidate('.') == os.listdir('.')\n", "entry_point": "func_es"}
{"task_id": "es-21", "prompt": "def func_es(a, b):\n    ", "suffix": "\n    return dic", "canonical_solution": "dic = set(zip(a, b))", "test": "\ndef check(candidate):\n    assert candidate([1,2,3], [4,5,6]) == set([(1, 4), (2, 5), (3, 6)])\n", "entry_point": "func_es"}
{"task_id": "es-28", "prompt": "def func_es(lista, index):\n    ", "suffix": "\n    return indextoentry", "canonical_solution": "def indextoentry(lista, index):\n        return [lista[index]]", "test": "\ndef check(candidate):\n    assert candidate([1,2,3], 0)([1,2,3], 0) == [1]\n", "entry_point": "func_es"}
{"task_id": "es-41", "prompt": "def func_es(ingreso):\n    return ", "canonical_solution": "datetime.utcnow() - ingreso", "test": "\nfrom datetime import datetime\ndef check(candidate):\n    ingreso = datetime.utcnow()\n    assert candidate(ingreso).seconds - (datetime.utcnow()-ingreso).seconds < 60\n", "entry_point": "func_es"}
{"task_id": "es-52", "prompt": "def func_es(a, b):\n    return ", "canonical_solution": "next((i for i in range(min(a,b),0,-1) if a%i==0 and b%i==0), 0)", "test": "\ndef check(candidate):\n    assert candidate(25, 30) == 5\n    assert candidate(24, 30) == 6\n    assert candidate(23, 30) == 1\n", "entry_point": "func_es"}
{"task_id": "es-56", "prompt": "def func_es(S):\n    return ", "canonical_solution": "int(S)", "test": "\ndef check(candidate):\n    assert candidate('123') == 123\n    assert candidate('10000') == 10000\n    assert candidate('0') == 0\n", "entry_point": "func_es"}
{"task_id": "es-68", "prompt": "def func_es(M, x):\n    return ", "canonical_solution": "(M.transpose() + x).transpose()", "test": "\nimport numpy as np\ndef check(candidate):\n    M = np.array([[1,2],[3,4],[5,6]])\n    x = np.array([10, 100, 1000])\n    assert candidate(M, x).tolist() == [[11,12],[103,104],[1005,1006]]\n", "entry_point": "func_es"}
{"task_id": "es-76", "prompt": "def func_es(A, B):\n    return ", "canonical_solution": "[[sum(x * B[i][col] for i,x in enumerate(fila)) for col in range(len(B[0]))] for fila in A]", "test": "\nimport numpy as np\ndef check(candidate):\n    assert (candidate([[1,2],[3,4]], [[5,6],[7,8]]) == [[19, 22], [43, 50]]) or (candidate(np.array([[1,2],[3,4]]), np.array([[5,6],[7,8]]))) == np.array([[19, 22], [43, 50]])\n", "entry_point": "func_es"}
{"task_id": "es-89", "prompt": "def func_es(x, list):\n    return ", "canonical_solution": "list.index(x)", "test": "\ndef check(candidate):\n    assert candidate(3, [1,2,3,4]) == 2\n    assert candidate(0, [0,0,0,0]) == 0\n", "entry_point": "func_es"}
{"task_id": "es-90", "prompt": "def func_es(INT, STR):\n    return ", "canonical_solution": "repr(INT) + STR", "test": "\ndef check(candidate):\n    assert candidate(2, 'a') == '2a'\n    assert candidate(-1, ' ') == '-1 '\n", "entry_point": "func_es"}
{"task_id": "es-95", "prompt": "def func_es(L):\n    return ", "canonical_solution": "list(set(L))", "test": "\ndef check(candidate):\n    assert candidate([1,1,1,1]) == [1]\n    assert candidate([1,2,3,4]) == [1,2,3,4]\n    assert candidate([]) == []\n", "entry_point": "func_es"}
{"task_id": "es-98", "prompt": "def func_es(x):\n    return ", "canonical_solution": "type(x)", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == list\n    assert candidate({'a': None}) == dict\n    assert candidate(123) == int\n    assert candidate(12.34) == float\n", "entry_point": "func_es"}
{"task_id": "es-103", "prompt": "def func_es(lista):\n    return ", "canonical_solution": "sum(lista)", "test": "\ndef check(candidate):\n    assert (candidate([1,2,3]) - 6) < 1e-6\n    assert (candidate([0.0, 3.5, 2.7, 1.8, 2.0]) - 10.0) < 1e-6\n", "entry_point": "func_es"}
{"task_id": "es-106", "prompt": "def func_es(n):\n    ", "suffix": "\n    return L", "canonical_solution": "L = [random.random() for i in range(n)]", "test": "\nimport random\n\ndef check(candidate):\n    assert len(candidate(100)) == 100\n    assert len(candidate(0)) == 0\n", "entry_point": "func_es"}
{"task_id": "es-114", "prompt": "def func_es(num):\n    return ", "canonical_solution": "math.ceil(num)", "test": "\nimport math\n\ndef check(candidate):\n    assert candidate(3.8) == 4\n    assert candidate(4.0) == 4\n    assert candidate(76.4) == 77\n", "entry_point": "func_es"}
{"task_id": "es-120", "prompt": "def func_es(s):\n    return ", "canonical_solution": "sum([int(c in 'aeiouAEIOU') for c in s])", "test": "\ndef check(candidate):\n    assert candidate('mvfbgndvsh') == 0\n    assert candidate('vowel') == 2\n    assert candidate('AAAAABBC') == 5\n", "entry_point": "func_es"}
{"task_id": "es-134", "prompt": "def func_es(n, m):\n    ", "suffix": "\n    return matriz", "canonical_solution": "matriz = []\n    \n    for i in range(n):\n        matriz.append([])\n        for j in range(m):\n            matriz[i].append(random.randint(0, 100))", "test": "\nimport random \ndef check(candidate):\n    matriz = candidate(2,3)\n    assert len(matriz) == 2 and all(len(row)==3 for row in matriz)\n", "entry_point": "func_es"}
{"task_id": "es-135", "prompt": "def func_es(n, m):\n    ", "suffix": "\n    return matriz", "canonical_solution": "matriz = np.random.randint(0, 100, size=(n, m))", "test": "\nimport numpy as np\n\ndef check(candidate):\n    assert candidate(2,3).shape == (2,3)\n    assert candidate(1,1).shape == (1,1)\n    assert candidate(10,88).shape == (10,88)\n", "entry_point": "func_es"}
{"task_id": "es-142", "prompt": "def func_es(l):\n    return ", "canonical_solution": "random.choice(l)", "test": "\nimport random\n\ndef check(candidate):\n    results = [candidate([1,2,3,4,5]) for i in range(10)]\n    assert all([(x in [1,2,3,4,5]) for x in results])\n    assert len(set(results)) > 1\n", "entry_point": "func_es"}
{"task_id": "es-143", "prompt": "def func_es(l):\n    return ", "canonical_solution": "random.sample(l,1)[0]", "test": "\nimport random\n\ndef check(candidate):\n    results = [candidate([1,2,3,4,5]) for i in range(10)]\n    assert all([(x in [1,2,3,4,5]) for x in results])\n    assert len(set(results)) > 1\n", "entry_point": "func_es"}
{"task_id": "es-155", "prompt": "def func_es(l, n):\n    return ", "canonical_solution": "max([ll[n] for ll in l])", "test": "\ndef check(candidate):\n    assert candidate([[1,2,3],[4,5,6], [-1,-2,0]], 0) == 4\n", "entry_point": "func_es"}
{"task_id": "es-157", "prompt": "def func_es(list):\n    return ", "canonical_solution": "[int(x) for x in list]", "test": "\ndef check(candidate):\n    assert candidate(['0','1','2','3','4']) == [0,1,2,3,4]\n    assert candidate(['100','444','45']) == [100, 444, 45]\n", "entry_point": "func_es"}
{"task_id": "es-158", "prompt": "def func_es(lista):\n    return ", "canonical_solution": "Counter(lista).most_common()[0][0]", "test": "\nfrom collections import Counter\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4]) == 1\n    assert candidate([8,2,5,7,3,7]) == 7\n", "entry_point": "func_es"}
{"task_id": "es-161", "prompt": "def func_es(c, m):\n    return ", "canonical_solution": "m[:,c]", "test": "\nimport numpy as np \n\ndef check(candidate):\n    assert all(candidate(1, np.array([[1,2],[3,4],[5,6]])) == np.array([2, 4, 6]))\n", "entry_point": "func_es"}
{"task_id": "es-167", "prompt": "def func_es(L, n):\n    return ", "canonical_solution": "L.remove(n)", "test": "\ndef check(candidate):\n    L = [i for i in range(8)]\n    candidate(L, 3)\n    assert L == [0,1,2,4,5,6,7]\n    candidate(L, 5)\n    assert L == [0,1,2,4,6,7]\n    candidate(L, 0)\n    assert L == [1,2,4,6,7]\n", "entry_point": "func_es"}
{"task_id": "es-174", "prompt": "def func_es(L):\n    return ", "canonical_solution": "sum(L)", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == 15\n    assert candidate([0, 1, -1, 2, 2]) == 4\n    assert candidate([3.4, 5.8, 6.6, 19.2]) == 35\n", "entry_point": "func_es"}
{"task_id": "es-175", "prompt": "def func_es(L, M, N):\n    return ", "canonical_solution": "np.array(L).reshape(M,N)", "test": "\nimport numpy as np \n\ndef check(candidate):\n    assert candidate([1,2,3,4],2,2).tolist() == [[1,2],[3,4]]\n", "entry_point": "func_es"}
{"task_id": "es-177", "prompt": "def func_es(L):\n    return ", "canonical_solution": "[i for i,x in enumerate(L) if L.count(x) > 1]", "test": "\ndef check(candidate):\n    assert candidate([1,1,2,2,3,3]) == [0,1,2,3,4,5]\n    assert candidate([1,2,3,4,5,6]) == []\n    assert candidate([100, 101, 102, 100]) == [0, 3]\n", "entry_point": "func_es"}
{"task_id": "es-179", "prompt": "def func_es(S):\n    return ", "canonical_solution": "Counter(S)", "test": "\nfrom collections import Counter\n\ndef check(candidate):\n    assert candidate('apple') == Counter({'a': 1, 'e': 1, 'l': 1, 'p': 2})\n    assert candidate('') == Counter({})\n", "entry_point": "func_es"}
{"task_id": "es-183", "prompt": "def func_es(L, n):\n    return ", "canonical_solution": "[L[i:i + n] for i in range(0, len(L), n)]", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6],3) == [[1,2,3],[4,5,6]]\n    assert candidate([1,2,3,4],1) == [[1],[2],[3],[4]]\n", "entry_point": "func_es"}
{"task_id": "es-188", "prompt": "def func_es(S):\n    ", "suffix": "\n    return (M, m, n)", "canonical_solution": "M = len([c for c in S if c.isupper()])\n    m = len([c for c in S if c.islower()])\n    n = len([c for c in S if c.isdigit()])", "test": "\ndef check(candidate):\n    assert candidate('ceg242AABd  ') == (3,4,3)\n    assert candidate('12233457') == (0,0,8)\n", "entry_point": "func_es"}
{"task_id": "es-190", "prompt": "def func_es(n):\n    return ", "canonical_solution": "int(n, 2)", "test": "\ndef check(candidate):\n    assert candidate('1100') == 12\n    assert candidate('001010111') == 87\n    assert candidate('0') == 0\n", "entry_point": "func_es"}
{"task_id": "es-192", "prompt": "def func_es(S):\n    ", "suffix": "\n    return L1, L2, L3, L4", "canonical_solution": "L1, L2, L3, L4 = random.sample(S, 4)", "test": "\nimport random \n\ndef check(candidate):\n    L1, L2, L3, L4 = candidate([1,2,3,4,5,6,7,8])\n    s = set([L1,L2,L3,L4])\n    assert len(s) == 4\n    assert s < set([i+1 for i in range(8)])\n", "entry_point": "func_es"}
{"task_id": "es-211", "prompt": "def func_es(lista):\n    return ", "canonical_solution": "list(zip(*[iter(lista)]*2))", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4]) == [(1,2),(3,4)]\n    assert candidate([1,'a',33.5,None]) == [(1,'a'),(33.5,None)]\n", "entry_point": "func_es"}
{"task_id": "es-217", "prompt": "def func_es(num):\n    return ", "canonical_solution": "sum([int(c) for c in str(num)])", "test": "\ndef check(candidate):\n    assert candidate(10) == 1\n    assert candidate(100) == 1\n    assert candidate(1234) == 10\n", "entry_point": "func_es"}
{"task_id": "es-220", "prompt": "def func_es(date):\n    return ", "canonical_solution": "date.strftime('%y%j')", "test": "\nimport datetime\ndef check(candidate):\n    date = datetime.datetime.now()\n    assert candidate(date) == date.strftime('%y%j')\n", "entry_point": "func_es"}
{"task_id": "es-221", "prompt": "def func_es(S):\n    return ", "canonical_solution": "S.upper()", "test": "\ndef check(candidate):\n    assert candidate('mystring') == 'MYSTRING'\n    assert candidate('myString') == 'MYSTRING'\n    assert candidate('MySTRinG') == 'MYSTRING'\n    assert candidate('MYSTRING') == 'MYSTRING'\n", "entry_point": "func_es"}
{"task_id": "es-222", "prompt": "def func_es(num, num1):\n    return ", "canonical_solution": "num / num1", "test": "\ndef check(candidate):\n    assert (candidate(1, 1.0) - 1.0) < 1e-6\n    assert (candidate(10, 3.3) - 3.0303) < 0.01\n", "entry_point": "func_es"}
{"task_id": "es-251", "prompt": "def func_es(S):\n    ", "suffix": "\n    return num", "canonical_solution": "num = sum([int('ch' in w) for w in S.split()])", "test": "\ndef check(candidate):\n    assert candidate('chain of words color cook zero chaos') == 2\n", "entry_point": "func_es"}
{"task_id": "es-255", "prompt": "def func_es(L1, L2):\n    return ", "canonical_solution": "list(map(operator.mul, L1, L2))", "test": "\nimport operator\n\ndef check(candidate):\n    assert candidate([3,4,2,6],[98,80,86,78]) == [294, 320, 172, 468]\n    assert candidate([i for i in range(10)], [0 for i in range(10)]) == [0,0,0,0,0,0,0,0,0,0]\n", "entry_point": "func_es"}
{"task_id": "es-256", "prompt": "def func_es(L1, L2):\n    return ", "canonical_solution": "np.multiply(L1,L2)", "test": "\nimport operator\nimport numpy as np\n\ndef check(candidate):\n    assert all(candidate(np.array([3,4,2,6]),np.array([98,80,86,78])) == np.array([294, 320, 172, 468]))\n    assert all(candidate(np.array([i for i in range(10)]), np.array([0 for i in range(10)])) == np.array([0,0,0,0,0,0,0,0,0,0]))\n", "entry_point": "func_es"}
{"task_id": "es-258", "prompt": "def func_es(L, x):\n    return ", "canonical_solution": "[i for i,a in enumerate(L) if a == x]", "test": "\nimport numpy as np \n\ndef check(candidate):\n    assert candidate([1,2,3,4,5], 4) == [3]\n    assert candidate([1,2,3,4,5], 100) == []\n", "entry_point": "func_es"}
{"task_id": "es-261", "prompt": "def func_es(df, type):\n    ", "suffix": "\n    return df1", "canonical_solution": "df1 = df.select_dtypes(include=[type])", "test": "\nimport numpy as np\nimport pandas as pd\n\ndef check(candidate):\n    assert candidate(pd.DataFrame({'a':[1,2,3], 'b':[1.,2.,3.]}), np.float).equals(pd.DataFrame({'b':[1.,2.,3.]}))\n", "entry_point": "func_es"}
{"task_id": "es-267", "prompt": "def func_es(S):\n    return ", "canonical_solution": "[substr[::-1] for substr in S.split()]", "test": "\ndef check(candidate):\n    assert candidate('this is a string') == ['siht', 'si', 'a', 'gnirts']\n    assert candidate(' '.join(['redivider', 'deified', 'civic', 'radar', 'level'])) == ['redivider', 'deified', 'civic', 'radar', 'level']\n", "entry_point": "func_es"}
{"task_id": "es-272", "prompt": "def func_es(df):\n    ", "canonical_solution": "df[df==0] = 'falta'\n    df[df==1] = 'sobra'", "test": "\nimport pandas as pd \n\ndef check(candidate):\n    df1 = pd.DataFrame({'a':[1,0,3], 'b': [0,1,4]})\n    df2 = pd.DataFrame({'a':['sobra','falta',3], 'b': ['falta','sobra',4]})\n    assert all(candidate(df1) == df2)\n", "entry_point": "func_es"}
{"task_id": "es-279", "prompt": "def func_es(num):\n    return ", "canonical_solution": "num == 0 or num % ((10**int(math.log10(abs(num))+1) - 1) // 9) == 0", "test": "\nimport math\nfrom math import log10\n\ndef check(candidate):\n    assert candidate(1111) == True\n    assert candidate(1211) == False\n    assert candidate(0) == True\n", "entry_point": "func_es"}
{"task_id": "es-285", "prompt": "def func_es(a, b):\n    return ", "canonical_solution": "all(a < b)", "test": "\nimport numpy as np \n\ndef check(candidate):\n    assert candidate(np.array([1,2,3]), np.array([4,6,8])) == True\n    assert candidate(np.array([1,2,3]), np.array([4,6,2])) == False\n    assert candidate(np.array([1,2,3]), np.array([1,2,3])) == False\n", "entry_point": "func_es"}
{"task_id": "es-290", "prompt": "def func_es(a, b):\n    return ", "canonical_solution": "tuple(sum(x) for x in zip(a, b))", "test": "\ndef check(candidate):\n    assert candidate((1,2,3),(4,5,6)) == (5,7,9)\n    assert candidate((1,2,3),(4,5,6)) != [5,7,9]\n", "entry_point": "func_es"}
